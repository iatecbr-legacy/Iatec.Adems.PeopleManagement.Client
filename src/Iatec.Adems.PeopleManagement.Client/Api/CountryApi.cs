/*
 * People Management API - BRA
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Iatec.Adems.PeopleManagement.Client.Model;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace Iatec.Adems.PeopleManagement.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICountryApi : IApiAccessor
    {
        #region Synchronous Operations

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void CountryDeleteSystemReference(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CountryDeleteSystemReferenceWithHttpInfo(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void CountrySaveSystemReference(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CountrySaveSystemReferenceWithHttpInfo(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>CountryLiteModel</returns>
        CountryLiteModel GetCountryById(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of CountryLiteModel</returns>
        ApiResponse<CountryLiteModel> GetCountryByIdWithHttpInfo(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CountryLiteSearchModel</returns>
        CountryLiteSearchModel GetCurrent();

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CountryLiteSearchModel</returns>
        ApiResponse<CountryLiteSearchModel> GetCurrentWithHttpInfo();

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>List&lt;CountryLiteModel&gt;</returns>
        List<CountryLiteModel> GetListCountryByIdList(List<Guid> idList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>ApiResponse of List&lt;CountryLiteModel&gt;</returns>
        ApiResponse<List<CountryLiteModel>> GetListCountryByIdListWithHttpInfo(List<Guid> idList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameList"> (optional)</param>
        /// <returns>List&lt;CountryLiteModel&gt;</returns>
        List<CountryLiteModel> GetListCountryByNameList(List<string> nameList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameList"> (optional)</param>
        /// <returns>ApiResponse of List&lt;CountryLiteModel&gt;</returns>
        ApiResponse<List<CountryLiteModel>> GetListCountryByNameListWithHttpInfo(List<string> nameList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="selectedItems"> (optional)</param>
        /// <returns>PagedCountryLiteSearchModel</returns>
        PagedCountryLiteSearchModel GetPageAvailable(int? numRows, int? pageIndex, string filter = null, List<Guid> selectedItems = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="selectedItems"> (optional)</param>
        /// <returns>ApiResponse of PagedCountryLiteSearchModel</returns>
        ApiResponse<PagedCountryLiteSearchModel> GetPageAvailableWithHttpInfo(int? numRows, int? pageIndex, string filter = null, List<Guid> selectedItems = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>PagedCountryLiteModel</returns>
        PagedCountryLiteModel GetPageCountryByFilter(int? numRows, int? pageIndex, string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of PagedCountryLiteModel</returns>
        ApiResponse<PagedCountryLiteModel> GetPageCountryByFilterWithHttpInfo(int? numRows, int? pageIndex, string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>PagedCountryLiteSearchModel</returns>
        PagedCountryLiteSearchModel GetPageForSearch(int? numRows, int? pageIndex, string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of PagedCountryLiteSearchModel</returns>
        ApiResponse<PagedCountryLiteSearchModel> GetPageForSearchWithHttpInfo(int? numRows, int? pageIndex, string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>PagedCountryPhoneCodeModel</returns>
        PagedCountryPhoneCodeModel GetPagePhoneCodeByFilter(int? numRows, int? pageIndex, string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of PagedCountryPhoneCodeModel</returns>
        ApiResponse<PagedCountryPhoneCodeModel> GetPagePhoneCodeByFilterWithHttpInfo(int? numRows, int? pageIndex, string filter = null);

        #endregion Synchronous Operations

        #region Asynchronous Operations

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CountryDeleteSystemReferenceAsync(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CountryDeleteSystemReferenceAsyncWithHttpInfo(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CountrySaveSystemReferenceAsync(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CountrySaveSystemReferenceAsyncWithHttpInfo(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of CountryLiteModel</returns>
        System.Threading.Tasks.Task<CountryLiteModel> GetCountryByIdAsync(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (CountryLiteModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountryLiteModel>> GetCountryByIdAsyncWithHttpInfo(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CountryLiteSearchModel</returns>
        System.Threading.Tasks.Task<CountryLiteSearchModel> GetCurrentAsync();

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CountryLiteSearchModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CountryLiteSearchModel>> GetCurrentAsyncWithHttpInfo();

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>Task of List&lt;CountryLiteModel&gt;</returns>
        System.Threading.Tasks.Task<List<CountryLiteModel>> GetListCountryByIdListAsync(List<Guid> idList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CountryLiteModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CountryLiteModel>>> GetListCountryByIdListAsyncWithHttpInfo(List<Guid> idList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameList"> (optional)</param>
        /// <returns>Task of List&lt;CountryLiteModel&gt;</returns>
        System.Threading.Tasks.Task<List<CountryLiteModel>> GetListCountryByNameListAsync(List<string> nameList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameList"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CountryLiteModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CountryLiteModel>>> GetListCountryByNameListAsyncWithHttpInfo(List<string> nameList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="selectedItems"> (optional)</param>
        /// <returns>Task of PagedCountryLiteSearchModel</returns>
        System.Threading.Tasks.Task<PagedCountryLiteSearchModel> GetPageAvailableAsync(int? numRows, int? pageIndex, string filter = null, List<Guid> selectedItems = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="selectedItems"> (optional)</param>
        /// <returns>Task of ApiResponse (PagedCountryLiteSearchModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedCountryLiteSearchModel>> GetPageAvailableAsyncWithHttpInfo(int? numRows, int? pageIndex, string filter = null, List<Guid> selectedItems = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of PagedCountryLiteModel</returns>
        System.Threading.Tasks.Task<PagedCountryLiteModel> GetPageCountryByFilterAsync(int? numRows, int? pageIndex, string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (PagedCountryLiteModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedCountryLiteModel>> GetPageCountryByFilterAsyncWithHttpInfo(int? numRows, int? pageIndex, string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of PagedCountryLiteSearchModel</returns>
        System.Threading.Tasks.Task<PagedCountryLiteSearchModel> GetPageForSearchAsync(int? numRows, int? pageIndex, string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (PagedCountryLiteSearchModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedCountryLiteSearchModel>> GetPageForSearchAsyncWithHttpInfo(int? numRows, int? pageIndex, string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of PagedCountryPhoneCodeModel</returns>
        System.Threading.Tasks.Task<PagedCountryPhoneCodeModel> GetPagePhoneCodeByFilterAsync(int? numRows, int? pageIndex, string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (PagedCountryPhoneCodeModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedCountryPhoneCodeModel>> GetPagePhoneCodeByFilterAsyncWithHttpInfo(int? numRows, int? pageIndex, string filter = null);


        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateDate"> (optional)</param>
        /// <param name="onlyInUse"> </param>        
        /// <returns>Task of ApiResponse (List&lt;CountryLiteModel&gt;)</returns>
        System.Threading.Tasks.Task<List<CountryLiteModel>> GetListCountryForUpdateAsync(bool onlyInUse, DateTime? updateDate = null);


        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateDate"> (optional)</param>
        /// <param name="onlyInUse"> </param>        
        /// <returns>Task of ApiResponse (List&lt;CountryLiteModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CountryLiteModel>>> GetListCountryForUpdateAsyncHttpInfo(bool onlyInUse, DateTime? updateDate = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateDate"> (optional)</param>
        /// <param name="onlyInUse"> </param>        
        /// <returns>List&lt;CountryLiteModel&gt;</returns>
        List<CountryLiteModel> GetListCountryForUpdate(bool onlyInUse, DateTime? updateDate = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateDate"> (optional)</param>
        /// <param name="onlyInUse"> </param>        
        /// <returns>ApiResponse (List&lt;CountryLiteModel&gt;)</returns>
        ApiResponse<List<CountryLiteModel>> GetListCountryForUpdateHttpInfo(bool onlyInUse, DateTime? updateDate = null);

        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CountryApi : ICountryApi
    {
        private Iatec.Adems.PeopleManagement.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CountryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CountryApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Iatec.Adems.PeopleManagement.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CountryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CountryApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Iatec.Adems.PeopleManagement.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Iatec.Adems.PeopleManagement.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void CountryDeleteSystemReference(Guid? id)
        {
            CountryDeleteSystemReferenceWithHttpInfo(id);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CountryDeleteSystemReferenceWithHttpInfo(Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CountryApi->CountryDeleteSystemReference");

            var localVarPath = "/country/systemReference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountryDeleteSystemReference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CountryDeleteSystemReferenceAsync(Guid? id)
        {
            await CountryDeleteSystemReferenceAsyncWithHttpInfo(id);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CountryDeleteSystemReferenceAsyncWithHttpInfo(Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CountryApi->CountryDeleteSystemReference");

            var localVarPath = "/country/systemReference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountryDeleteSystemReference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void CountrySaveSystemReference(Guid? id)
        {
            CountrySaveSystemReferenceWithHttpInfo(id);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CountrySaveSystemReferenceWithHttpInfo(Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CountryApi->CountrySaveSystemReference");

            var localVarPath = "/country/systemReference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountrySaveSystemReference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CountrySaveSystemReferenceAsync(Guid? id)
        {
            await CountrySaveSystemReferenceAsyncWithHttpInfo(id);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CountrySaveSystemReferenceAsyncWithHttpInfo(Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CountryApi->CountrySaveSystemReference");

            var localVarPath = "/country/systemReference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountrySaveSystemReference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>CountryLiteModel</returns>
        public CountryLiteModel GetCountryById(Guid? id)
        {
            ApiResponse<CountryLiteModel> localVarResponse = GetCountryByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of CountryLiteModel</returns>
        public ApiResponse<CountryLiteModel> GetCountryByIdWithHttpInfo(Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CountryApi->GetCountryById");

            var localVarPath = "/country/byId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCountryById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CountryLiteModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CountryLiteModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(CountryLiteModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of CountryLiteModel</returns>
        public async System.Threading.Tasks.Task<CountryLiteModel> GetCountryByIdAsync(Guid? id)
        {
            ApiResponse<CountryLiteModel> localVarResponse = await GetCountryByIdAsyncWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (CountryLiteModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CountryLiteModel>> GetCountryByIdAsyncWithHttpInfo(Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling CountryApi->GetCountryById");

            var localVarPath = "/country/byId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCountryById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CountryLiteModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CountryLiteModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(CountryLiteModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CountryLiteSearchModel</returns>
        public CountryLiteSearchModel GetCurrent()
        {
            ApiResponse<CountryLiteSearchModel> localVarResponse = GetCurrentWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of CountryLiteSearchModel</returns>
        public ApiResponse<CountryLiteSearchModel> GetCurrentWithHttpInfo()
        {
            var localVarPath = "/country/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CountryLiteSearchModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CountryLiteSearchModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(CountryLiteSearchModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CountryLiteSearchModel</returns>
        public async System.Threading.Tasks.Task<CountryLiteSearchModel> GetCurrentAsync()
        {
            ApiResponse<CountryLiteSearchModel> localVarResponse = await GetCurrentAsyncWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CountryLiteSearchModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CountryLiteSearchModel>> GetCurrentAsyncWithHttpInfo()
        {
            var localVarPath = "/country/current";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCurrent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CountryLiteSearchModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CountryLiteSearchModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(CountryLiteSearchModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>List&lt;CountryLiteModel&gt;</returns>
        public List<CountryLiteModel> GetListCountryByIdList(List<Guid> idList = null)
        {
            ApiResponse<List<CountryLiteModel>> localVarResponse = GetListCountryByIdListWithHttpInfo(idList);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>ApiResponse of List&lt;CountryLiteModel&gt;</returns>
        public ApiResponse<List<CountryLiteModel>> GetListCountryByIdListWithHttpInfo(List<Guid> idList = null)
        {
            var localVarPath = "/country/byIdList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            //if (idList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "idList", idList)); // query parameter
            if (idList != null && idList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(idList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = idList; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListCountryByIdList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CountryLiteModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CountryLiteModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CountryLiteModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>Task of List&lt;CountryLiteModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<CountryLiteModel>> GetListCountryByIdListAsync(List<Guid> idList = null)
        {
            ApiResponse<List<CountryLiteModel>> localVarResponse = await GetListCountryByIdListAsyncWithHttpInfo(idList);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CountryLiteModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CountryLiteModel>>> GetListCountryByIdListAsyncWithHttpInfo(List<Guid> idList = null)
        {
            var localVarPath = "/country/byIdList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            //if (idList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "idList", idList)); // query parameter
            if (idList != null && idList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(idList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = idList; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListCountryByIdList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CountryLiteModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CountryLiteModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CountryLiteModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameList"> (optional)</param>
        /// <returns>List&lt;CountryLiteModel&gt;</returns>
        public List<CountryLiteModel> GetListCountryByNameList(List<string> nameList = null)
        {
            ApiResponse<List<CountryLiteModel>> localVarResponse = GetListCountryByNameListWithHttpInfo(nameList);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameList"> (optional)</param>
        /// <returns>ApiResponse of List&lt;CountryLiteModel&gt;</returns>
        public ApiResponse<List<CountryLiteModel>> GetListCountryByNameListWithHttpInfo(List<string> nameList = null)
        {
            var localVarPath = "/country/byNameList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            //if (nameList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "nameList", nameList)); // query parameter
            if (nameList != null && nameList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(nameList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = nameList; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListCountryByNameList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CountryLiteModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CountryLiteModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CountryLiteModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameList"> (optional)</param>
        /// <returns>Task of List&lt;CountryLiteModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<CountryLiteModel>> GetListCountryByNameListAsync(List<string> nameList = null)
        {
            ApiResponse<List<CountryLiteModel>> localVarResponse = await GetListCountryByNameListAsyncWithHttpInfo(nameList);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameList"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;CountryLiteModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CountryLiteModel>>> GetListCountryByNameListAsyncWithHttpInfo(List<string> nameList = null)
        {
            var localVarPath = "/country/byNameList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            //if (nameList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "nameList", nameList)); // query parameter
            if (nameList != null && nameList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(nameList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = nameList; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListCountryByNameList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CountryLiteModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CountryLiteModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CountryLiteModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="selectedItems"> (optional)</param>
        /// <returns>PagedCountryLiteSearchModel</returns>
        public PagedCountryLiteSearchModel GetPageAvailable(int? numRows, int? pageIndex, string filter = null, List<Guid> selectedItems = null)
        {
            ApiResponse<PagedCountryLiteSearchModel> localVarResponse = GetPageAvailableWithHttpInfo(numRows, pageIndex, filter, selectedItems);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="selectedItems"> (optional)</param>
        /// <returns>ApiResponse of PagedCountryLiteSearchModel</returns>
        public ApiResponse<PagedCountryLiteSearchModel> GetPageAvailableWithHttpInfo(int? numRows, int? pageIndex, string filter = null, List<Guid> selectedItems = null)
        {
            // verify the required parameter 'numRows' is set
            if (numRows == null)
                throw new ApiException(400, "Missing required parameter 'numRows' when calling CountryApi->GetPageAvailable");
            // verify the required parameter 'pageIndex' is set
            if (pageIndex == null)
                throw new ApiException(400, "Missing required parameter 'pageIndex' when calling CountryApi->GetPageAvailable");

            var localVarPath = "/country/pageAvailable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (numRows != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "numRows", numRows)); // query parameter
            if (pageIndex != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageIndex", pageIndex)); // query parameter
            //if (selectedItems != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "selectedItems", selectedItems)); // query parameter
            if (selectedItems != null && selectedItems.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(selectedItems); // http body (model) parameter
            }
            else
            {
                localVarPostBody = selectedItems; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageAvailable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedCountryLiteSearchModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedCountryLiteSearchModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedCountryLiteSearchModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="selectedItems"> (optional)</param>
        /// <returns>Task of PagedCountryLiteSearchModel</returns>
        public async System.Threading.Tasks.Task<PagedCountryLiteSearchModel> GetPageAvailableAsync(int? numRows, int? pageIndex, string filter = null, List<Guid> selectedItems = null)
        {
            ApiResponse<PagedCountryLiteSearchModel> localVarResponse = await GetPageAvailableAsyncWithHttpInfo(numRows, pageIndex, filter, selectedItems);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="selectedItems"> (optional)</param>
        /// <returns>Task of ApiResponse (PagedCountryLiteSearchModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedCountryLiteSearchModel>> GetPageAvailableAsyncWithHttpInfo(int? numRows, int? pageIndex, string filter = null, List<Guid> selectedItems = null)
        {
            // verify the required parameter 'numRows' is set
            if (numRows == null)
                throw new ApiException(400, "Missing required parameter 'numRows' when calling CountryApi->GetPageAvailable");
            // verify the required parameter 'pageIndex' is set
            if (pageIndex == null)
                throw new ApiException(400, "Missing required parameter 'pageIndex' when calling CountryApi->GetPageAvailable");

            var localVarPath = "/country/pageAvailable";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (numRows != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "numRows", numRows)); // query parameter
            if (pageIndex != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageIndex", pageIndex)); // query parameter
            //if (selectedItems != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "selectedItems", selectedItems)); // query parameter
            if (selectedItems != null && selectedItems.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(selectedItems); // http body (model) parameter
            }
            else
            {
                localVarPostBody = selectedItems; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageAvailable", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedCountryLiteSearchModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedCountryLiteSearchModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedCountryLiteSearchModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>PagedCountryLiteModel</returns>
        public PagedCountryLiteModel GetPageCountryByFilter(int? numRows, int? pageIndex, string filter = null)
        {
            ApiResponse<PagedCountryLiteModel> localVarResponse = GetPageCountryByFilterWithHttpInfo(numRows, pageIndex, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of PagedCountryLiteModel</returns>
        public ApiResponse<PagedCountryLiteModel> GetPageCountryByFilterWithHttpInfo(int? numRows, int? pageIndex, string filter = null)
        {
            // verify the required parameter 'numRows' is set
            if (numRows == null)
                throw new ApiException(400, "Missing required parameter 'numRows' when calling CountryApi->GetPageCountryByFilter");
            // verify the required parameter 'pageIndex' is set
            if (pageIndex == null)
                throw new ApiException(400, "Missing required parameter 'pageIndex' when calling CountryApi->GetPageCountryByFilter");

            var localVarPath = "/country/pageByFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (numRows != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "numRows", numRows)); // query parameter
            if (pageIndex != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageIndex", pageIndex)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageCountryByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedCountryLiteModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedCountryLiteModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedCountryLiteModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of PagedCountryLiteModel</returns>
        public async System.Threading.Tasks.Task<PagedCountryLiteModel> GetPageCountryByFilterAsync(int? numRows, int? pageIndex, string filter = null)
        {
            ApiResponse<PagedCountryLiteModel> localVarResponse = await GetPageCountryByFilterAsyncWithHttpInfo(numRows, pageIndex, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (PagedCountryLiteModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedCountryLiteModel>> GetPageCountryByFilterAsyncWithHttpInfo(int? numRows, int? pageIndex, string filter = null)
        {
            // verify the required parameter 'numRows' is set
            if (numRows == null)
                throw new ApiException(400, "Missing required parameter 'numRows' when calling CountryApi->GetPageCountryByFilter");
            // verify the required parameter 'pageIndex' is set
            if (pageIndex == null)
                throw new ApiException(400, "Missing required parameter 'pageIndex' when calling CountryApi->GetPageCountryByFilter");

            var localVarPath = "/country/pageByFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (numRows != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "numRows", numRows)); // query parameter
            if (pageIndex != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageIndex", pageIndex)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageCountryByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedCountryLiteModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedCountryLiteModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedCountryLiteModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>PagedCountryLiteSearchModel</returns>
        public PagedCountryLiteSearchModel GetPageForSearch(int? numRows, int? pageIndex, string filter = null)
        {
            ApiResponse<PagedCountryLiteSearchModel> localVarResponse = GetPageForSearchWithHttpInfo(numRows, pageIndex, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of PagedCountryLiteSearchModel</returns>
        public ApiResponse<PagedCountryLiteSearchModel> GetPageForSearchWithHttpInfo(int? numRows, int? pageIndex, string filter = null)
        {
            // verify the required parameter 'numRows' is set
            if (numRows == null)
                throw new ApiException(400, "Missing required parameter 'numRows' when calling CountryApi->GetPageForSearch");
            // verify the required parameter 'pageIndex' is set
            if (pageIndex == null)
                throw new ApiException(400, "Missing required parameter 'pageIndex' when calling CountryApi->GetPageForSearch");

            var localVarPath = "/country/pageForSearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (numRows != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "numRows", numRows)); // query parameter
            if (pageIndex != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageIndex", pageIndex)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageForSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedCountryLiteSearchModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedCountryLiteSearchModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedCountryLiteSearchModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of PagedCountryLiteSearchModel</returns>
        public async System.Threading.Tasks.Task<PagedCountryLiteSearchModel> GetPageForSearchAsync(int? numRows, int? pageIndex, string filter = null)
        {
            ApiResponse<PagedCountryLiteSearchModel> localVarResponse = await GetPageForSearchAsyncWithHttpInfo(numRows, pageIndex, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (PagedCountryLiteSearchModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedCountryLiteSearchModel>> GetPageForSearchAsyncWithHttpInfo(int? numRows, int? pageIndex, string filter = null)
        {
            // verify the required parameter 'numRows' is set
            if (numRows == null)
                throw new ApiException(400, "Missing required parameter 'numRows' when calling CountryApi->GetPageForSearch");
            // verify the required parameter 'pageIndex' is set
            if (pageIndex == null)
                throw new ApiException(400, "Missing required parameter 'pageIndex' when calling CountryApi->GetPageForSearch");

            var localVarPath = "/country/pageForSearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (numRows != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "numRows", numRows)); // query parameter
            if (pageIndex != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageIndex", pageIndex)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageForSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedCountryLiteSearchModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedCountryLiteSearchModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedCountryLiteSearchModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>PagedCountryPhoneCodeModel</returns>
        public PagedCountryPhoneCodeModel GetPagePhoneCodeByFilter(int? numRows, int? pageIndex, string filter = null)
        {
            ApiResponse<PagedCountryPhoneCodeModel> localVarResponse = GetPagePhoneCodeByFilterWithHttpInfo(numRows, pageIndex, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of PagedCountryPhoneCodeModel</returns>
        public ApiResponse<PagedCountryPhoneCodeModel> GetPagePhoneCodeByFilterWithHttpInfo(int? numRows, int? pageIndex, string filter = null)
        {
            // verify the required parameter 'numRows' is set
            if (numRows == null)
                throw new ApiException(400, "Missing required parameter 'numRows' when calling CountryApi->GetPagePhoneCodeByFilter");
            // verify the required parameter 'pageIndex' is set
            if (pageIndex == null)
                throw new ApiException(400, "Missing required parameter 'pageIndex' when calling CountryApi->GetPagePhoneCodeByFilter");

            var localVarPath = "/country/pagePhoneCodeByFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (numRows != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "numRows", numRows)); // query parameter
            if (pageIndex != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageIndex", pageIndex)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPagePhoneCodeByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedCountryPhoneCodeModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedCountryPhoneCodeModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedCountryPhoneCodeModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of PagedCountryPhoneCodeModel</returns>
        public async System.Threading.Tasks.Task<PagedCountryPhoneCodeModel> GetPagePhoneCodeByFilterAsync(int? numRows, int? pageIndex, string filter = null)
        {
            ApiResponse<PagedCountryPhoneCodeModel> localVarResponse = await GetPagePhoneCodeByFilterAsyncWithHttpInfo(numRows, pageIndex, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (PagedCountryPhoneCodeModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedCountryPhoneCodeModel>> GetPagePhoneCodeByFilterAsyncWithHttpInfo(int? numRows, int? pageIndex, string filter = null)
        {
            // verify the required parameter 'numRows' is set
            if (numRows == null)
                throw new ApiException(400, "Missing required parameter 'numRows' when calling CountryApi->GetPagePhoneCodeByFilter");
            // verify the required parameter 'pageIndex' is set
            if (pageIndex == null)
                throw new ApiException(400, "Missing required parameter 'pageIndex' when calling CountryApi->GetPagePhoneCodeByFilter");

            var localVarPath = "/country/pagePhoneCodeByFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (numRows != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "numRows", numRows)); // query parameter
            if (pageIndex != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageIndex", pageIndex)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPagePhoneCodeByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedCountryPhoneCodeModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedCountryPhoneCodeModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedCountryPhoneCodeModel)));
        }

              



        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateDate"> (optional)</param>
        /// <param name="onlyInUse"> </param>        
        /// <returns>List&lt;CountryLiteModel&gt;</returns>
        public List<CountryLiteModel> GetListCountryForUpdate(bool onlyInUse, DateTime? updateDate = null)
        {
            ApiResponse<List<CountryLiteModel>> localVarResponse = GetListCountryForUpdateHttpInfo(onlyInUse, updateDate);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateDate"> (optional)</param>
        /// <param name="onlyInUse"> </param>        
        /// <returns>ApiResponse (List&lt;CountryLiteModel&gt;)</returns>
        public ApiResponse<List<CountryLiteModel>> GetListCountryForUpdateHttpInfo(bool onlyInUse, DateTime? updateDate = null)
        {
            var localVarPath = "/country/forUpdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updateDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "updateDate", updateDate)); // query parameter
            localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "onlyInUse", onlyInUse)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListCountryForUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CountryLiteModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CountryLiteModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CountryLiteModel>)));
        }


        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateDate"> (optional)</param>
        /// <param name="onlyInUse"> </param>        
        /// <returns>Task of List&lt;CountryLiteModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<CountryLiteModel>> GetListCountryForUpdateAsync(bool onlyInUse, DateTime? updateDate = null)
        {
            ApiResponse<List<CountryLiteModel>> localVarResponse = await GetListCountryForUpdateAsyncHttpInfo(onlyInUse, updateDate);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateDate"> (optional)</param>
        /// <param name="onlyInUse"> </param>        
        /// <returns>Task of ApiResponse (List&lt;CountryLiteModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<CountryLiteModel>>> GetListCountryForUpdateAsyncHttpInfo(bool onlyInUse, DateTime? updateDate = null)
        {
            var localVarPath = "/country/forUpdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updateDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "updateDate", updateDate)); // query parameter
            localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "onlyInUse", onlyInUse)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListCountryForUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<CountryLiteModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<CountryLiteModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<CountryLiteModel>)));
        }
    }
}
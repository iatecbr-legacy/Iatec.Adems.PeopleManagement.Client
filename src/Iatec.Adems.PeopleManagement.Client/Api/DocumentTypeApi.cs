/*
 * People Management API - BRA
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Iatec.Adems.PeopleManagement.Client.Model;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace Iatec.Adems.PeopleManagement.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDocumentTypeApi : IApiAccessor
    {
        #region Synchronous Operations

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DocumentTypeDeleteSystemReference(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocumentTypeDeleteSystemReferenceWithHttpInfo(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DocumentTypeSaveSystemReference(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocumentTypeSaveSystemReferenceWithHttpInfo(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DocumentTypeModel</returns>
        DocumentTypeModel GetDocumentTypeById(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DocumentTypeModel</returns>
        ApiResponse<DocumentTypeModel> GetDocumentTypeByIdWithHttpInfo(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classification"></param>
        /// <returns>DocumentTypeModel</returns>
        DocumentTypeModel GetIdentifierByClassification(DocumentTypeClassificationModel classification);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classification"></param>
        /// <returns>ApiResponse of DocumentTypeModel</returns>
        ApiResponse<DocumentTypeModel> GetIdentifierByClassificationWithHttpInfo(DocumentTypeClassificationModel classification);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>List&lt;DocumentTypeLiteSearchModel&gt;</returns>
        List<DocumentTypeLiteSearchModel> GetListByIdListForSearch(List<Guid> idList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentTypeLiteSearchModel&gt;</returns>
        ApiResponse<List<DocumentTypeLiteSearchModel>> GetListByIdListForSearchWithHttpInfo(List<Guid> idList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;DocumentTypeModel&gt;</returns>
        List<DocumentTypeModel> GetListDocumentTypeByFilter(string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentTypeModel&gt;</returns>
        ApiResponse<List<DocumentTypeModel>> GetListDocumentTypeByFilterWithHttpInfo(string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>List&lt;DocumentTypeModel&gt;</returns>
        List<DocumentTypeModel> GetListDocumentTypeByIdList(List<Guid> idList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentTypeModel&gt;</returns>
        ApiResponse<List<DocumentTypeModel>> GetListDocumentTypeByIdListWithHttpInfo(List<Guid> idList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;DocumentTypeModel&gt;</returns>
        List<DocumentTypeModel> GetListForNaturalPersonByFilter(string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentTypeModel&gt;</returns>
        ApiResponse<List<DocumentTypeModel>> GetListForNaturalPersonByFilterWithHttpInfo(string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;DocumentTypeLiteSearchModel&gt;</returns>
        List<DocumentTypeLiteSearchModel> GetListForNaturalPersonByFilterForSearch(string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentTypeLiteSearchModel&gt;</returns>
        ApiResponse<List<DocumentTypeLiteSearchModel>> GetListForNaturalPersonByFilterForSearchWithHttpInfo(string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;DocumentTypeModel&gt;</returns>
        List<DocumentTypeModel> GetListForSpecificPersonByFilter(Guid? personId, string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentTypeModel&gt;</returns>
        ApiResponse<List<DocumentTypeModel>> GetListForSpecificPersonByFilterWithHttpInfo(Guid? personId, string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateDate"> (optional)</param>
        /// <param name="onlyInUse"> </param>        
        /// <returns>List&lt;DocumentTypeModel&gt;</returns>
        List<DocumentTypeModel> GetListDocumentTypeForUpdate(bool onlyInUse, DateTime? updateDate = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateDate"> (optional)</param>
        /// <param name="onlyInUse"> </param>        
        /// <returns>ApiResponse (List&lt;DocumentTypeModel&gt;)</returns>
        ApiResponse<List<DocumentTypeModel>> GetListDocumentTypeForUpdateHttpInfo(bool onlyInUse, DateTime? updateDate = null);

        #endregion Synchronous Operations

        #region Asynchronous Operations

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DocumentTypeDeleteSystemReferenceAsync(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentTypeDeleteSystemReferenceAsyncWithHttpInfo(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DocumentTypeSaveSystemReferenceAsync(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DocumentTypeSaveSystemReferenceAsyncWithHttpInfo(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of DocumentTypeModel</returns>
        System.Threading.Tasks.Task<DocumentTypeModel> GetDocumentTypeByIdAsync(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (DocumentTypeModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentTypeModel>> GetDocumentTypeByIdAsyncWithHttpInfo(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classification"></param>
        /// <returns>Task of DocumentTypeModel</returns>
        System.Threading.Tasks.Task<DocumentTypeModel> GetIdentifierByClassificationAsync(DocumentTypeClassificationModel classification);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classification"></param>
        /// <returns>Task of ApiResponse (DocumentTypeModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentTypeModel>> GetIdentifierByClassificationAsyncWithHttpInfo(DocumentTypeClassificationModel classification);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>Task of List&lt;DocumentTypeLiteSearchModel&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentTypeLiteSearchModel>> GetListByIdListForSearchAsync(List<Guid> idList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DocumentTypeLiteSearchModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentTypeLiteSearchModel>>> GetListByIdListForSearchAsyncWithHttpInfo(List<Guid> idList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;DocumentTypeModel&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentTypeModel>> GetListDocumentTypeByFilterAsync(string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DocumentTypeModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentTypeModel>>> GetListDocumentTypeByFilterAsyncWithHttpInfo(string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>Task of List&lt;DocumentTypeModel&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentTypeModel>> GetListDocumentTypeByIdListAsync(List<Guid> idList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DocumentTypeModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentTypeModel>>> GetListDocumentTypeByIdListAsyncWithHttpInfo(List<Guid> idList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;DocumentTypeModel&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentTypeModel>> GetListForNaturalPersonByFilterAsync(string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DocumentTypeModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentTypeModel>>> GetListForNaturalPersonByFilterAsyncWithHttpInfo(string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;DocumentTypeLiteSearchModel&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentTypeLiteSearchModel>> GetListForNaturalPersonByFilterForSearchAsync(string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DocumentTypeLiteSearchModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentTypeLiteSearchModel>>> GetListForNaturalPersonByFilterForSearchAsyncWithHttpInfo(string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;DocumentTypeModel&gt;</returns>
        System.Threading.Tasks.Task<List<DocumentTypeModel>> GetListForSpecificPersonByFilterAsync(Guid? personId, string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DocumentTypeModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentTypeModel>>> GetListForSpecificPersonByFilterAsyncWithHttpInfo(Guid? personId, string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateDate"> (optional)</param>
        /// <param name="onlyInUse"> </param>        
        /// <returns>Task of ApiResponse (List&lt;DocumentTypeModel&gt;)</returns>
        System.Threading.Tasks.Task<List<DocumentTypeModel>> GetListDocumentTypeForUpdateAsync(bool onlyInUse, DateTime? updateDate = null);


        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateDate"> (optional)</param>
        /// <param name="onlyInUse"> </param>        
        /// <returns>Task of ApiResponse (List&lt;DocumentTypeModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DocumentTypeModel>>> GetListDocumentTypeForUpdateAsyncHttpInfo(bool onlyInUse, DateTime? updateDate = null);



        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DocumentTypeApi : IDocumentTypeApi
    {
        private Iatec.Adems.PeopleManagement.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentTypeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DocumentTypeApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Iatec.Adems.PeopleManagement.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentTypeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DocumentTypeApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Iatec.Adems.PeopleManagement.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Iatec.Adems.PeopleManagement.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DocumentTypeDeleteSystemReference(Guid? id)
        {
            DocumentTypeDeleteSystemReferenceWithHttpInfo(id);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocumentTypeDeleteSystemReferenceWithHttpInfo(Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentTypeApi->DocumentTypeDeleteSystemReference");

            var localVarPath = "/documentType/systemReference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypeDeleteSystemReference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DocumentTypeDeleteSystemReferenceAsync(Guid? id)
        {
            await DocumentTypeDeleteSystemReferenceAsyncWithHttpInfo(id);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentTypeDeleteSystemReferenceAsyncWithHttpInfo(Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentTypeApi->DocumentTypeDeleteSystemReference");

            var localVarPath = "/documentType/systemReference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypeDeleteSystemReference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DocumentTypeSaveSystemReference(Guid? id)
        {
            DocumentTypeSaveSystemReferenceWithHttpInfo(id);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocumentTypeSaveSystemReferenceWithHttpInfo(Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentTypeApi->DocumentTypeSaveSystemReference");

            var localVarPath = "/documentType/systemReference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypeSaveSystemReference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DocumentTypeSaveSystemReferenceAsync(Guid? id)
        {
            await DocumentTypeSaveSystemReferenceAsyncWithHttpInfo(id);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DocumentTypeSaveSystemReferenceAsyncWithHttpInfo(Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentTypeApi->DocumentTypeSaveSystemReference");

            var localVarPath = "/documentType/systemReference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentTypeSaveSystemReference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DocumentTypeModel</returns>
        public DocumentTypeModel GetDocumentTypeById(Guid? id)
        {
            ApiResponse<DocumentTypeModel> localVarResponse = GetDocumentTypeByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DocumentTypeModel</returns>
        public ApiResponse<DocumentTypeModel> GetDocumentTypeByIdWithHttpInfo(Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentTypeApi->GetDocumentTypeById");

            var localVarPath = "/documentType/byId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentTypeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentTypeModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentTypeModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentTypeModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of DocumentTypeModel</returns>
        public async System.Threading.Tasks.Task<DocumentTypeModel> GetDocumentTypeByIdAsync(Guid? id)
        {
            ApiResponse<DocumentTypeModel> localVarResponse = await GetDocumentTypeByIdAsyncWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (DocumentTypeModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentTypeModel>> GetDocumentTypeByIdAsyncWithHttpInfo(Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DocumentTypeApi->GetDocumentTypeById");

            var localVarPath = "/documentType/byId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentTypeById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentTypeModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentTypeModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentTypeModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classification"></param>
        /// <returns>DocumentTypeModel</returns>
        public DocumentTypeModel GetIdentifierByClassification(DocumentTypeClassificationModel classification)
        {
            ApiResponse<DocumentTypeModel> localVarResponse = GetIdentifierByClassificationWithHttpInfo(classification);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classification"></param>
        /// <returns>ApiResponse of DocumentTypeModel</returns>
        public ApiResponse<DocumentTypeModel> GetIdentifierByClassificationWithHttpInfo(DocumentTypeClassificationModel classification)
        {
            // verify the required parameter 'classification' is set
            if (classification == null)
                throw new ApiException(400, "Missing required parameter 'classification' when calling DocumentTypeApi->GetIdentifierByClassification");

            var localVarPath = "/documentType/identifierByClassification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (classification != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "classification", classification)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdentifierByClassification", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentTypeModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentTypeModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentTypeModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classification"></param>
        /// <returns>Task of DocumentTypeModel</returns>
        public async System.Threading.Tasks.Task<DocumentTypeModel> GetIdentifierByClassificationAsync(DocumentTypeClassificationModel classification)
        {
            ApiResponse<DocumentTypeModel> localVarResponse = await GetIdentifierByClassificationAsyncWithHttpInfo(classification);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="classification"></param>
        /// <returns>Task of ApiResponse (DocumentTypeModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentTypeModel>> GetIdentifierByClassificationAsyncWithHttpInfo(DocumentTypeClassificationModel classification)
        {
            // verify the required parameter 'classification' is set
            if (classification == null)
                throw new ApiException(400, "Missing required parameter 'classification' when calling DocumentTypeApi->GetIdentifierByClassification");

            var localVarPath = "/documentType/identifierByClassification";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (classification != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "classification", classification)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdentifierByClassification", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentTypeModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DocumentTypeModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentTypeModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>List&lt;DocumentTypeLiteSearchModel&gt;</returns>
        public List<DocumentTypeLiteSearchModel> GetListByIdListForSearch(List<Guid> idList = null)
        {
            ApiResponse<List<DocumentTypeLiteSearchModel>> localVarResponse = GetListByIdListForSearchWithHttpInfo(idList);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentTypeLiteSearchModel&gt;</returns>
        public ApiResponse<List<DocumentTypeLiteSearchModel>> GetListByIdListForSearchWithHttpInfo(List<Guid> idList = null)
        {
            var localVarPath = "/documentType/byIdListForSearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "idList", idList)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListByIdListForSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentTypeLiteSearchModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentTypeLiteSearchModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentTypeLiteSearchModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>Task of List&lt;DocumentTypeLiteSearchModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentTypeLiteSearchModel>> GetListByIdListForSearchAsync(List<Guid> idList = null)
        {
            ApiResponse<List<DocumentTypeLiteSearchModel>> localVarResponse = await GetListByIdListForSearchAsyncWithHttpInfo(idList);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DocumentTypeLiteSearchModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocumentTypeLiteSearchModel>>> GetListByIdListForSearchAsyncWithHttpInfo(List<Guid> idList = null)
        {
            var localVarPath = "/documentType/byIdListForSearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "idList", idList)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListByIdListForSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentTypeLiteSearchModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentTypeLiteSearchModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentTypeLiteSearchModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;DocumentTypeModel&gt;</returns>
        public List<DocumentTypeModel> GetListDocumentTypeByFilter(string filter = null)
        {
            ApiResponse<List<DocumentTypeModel>> localVarResponse = GetListDocumentTypeByFilterWithHttpInfo(filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentTypeModel&gt;</returns>
        public ApiResponse<List<DocumentTypeModel>> GetListDocumentTypeByFilterWithHttpInfo(string filter = null)
        {
            var localVarPath = "/documentType/byFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListDocumentTypeByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentTypeModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentTypeModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentTypeModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;DocumentTypeModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentTypeModel>> GetListDocumentTypeByFilterAsync(string filter = null)
        {
            ApiResponse<List<DocumentTypeModel>> localVarResponse = await GetListDocumentTypeByFilterAsyncWithHttpInfo(filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DocumentTypeModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocumentTypeModel>>> GetListDocumentTypeByFilterAsyncWithHttpInfo(string filter = null)
        {
            var localVarPath = "/documentType/byFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListDocumentTypeByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentTypeModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentTypeModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentTypeModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>List&lt;DocumentTypeModel&gt;</returns>
        public List<DocumentTypeModel> GetListDocumentTypeByIdList(List<Guid> idList = null)
        {
            ApiResponse<List<DocumentTypeModel>> localVarResponse = GetListDocumentTypeByIdListWithHttpInfo(idList);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentTypeModel&gt;</returns>
        public ApiResponse<List<DocumentTypeModel>> GetListDocumentTypeByIdListWithHttpInfo(List<Guid> idList = null)
        {
            var localVarPath = "/documentType/byIdList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "idList", idList)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListDocumentTypeByIdList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentTypeModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentTypeModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentTypeModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>Task of List&lt;DocumentTypeModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentTypeModel>> GetListDocumentTypeByIdListAsync(List<Guid> idList = null)
        {
            ApiResponse<List<DocumentTypeModel>> localVarResponse = await GetListDocumentTypeByIdListAsyncWithHttpInfo(idList);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DocumentTypeModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocumentTypeModel>>> GetListDocumentTypeByIdListAsyncWithHttpInfo(List<Guid> idList = null)
        {
            var localVarPath = "/documentType/byIdList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "idList", idList)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListDocumentTypeByIdList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentTypeModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentTypeModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentTypeModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;DocumentTypeModel&gt;</returns>
        public List<DocumentTypeModel> GetListForNaturalPersonByFilter(string filter = null)
        {
            ApiResponse<List<DocumentTypeModel>> localVarResponse = GetListForNaturalPersonByFilterWithHttpInfo(filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentTypeModel&gt;</returns>
        public ApiResponse<List<DocumentTypeModel>> GetListForNaturalPersonByFilterWithHttpInfo(string filter = null)
        {
            var localVarPath = "/documentType/forNaturalPersonByFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListForNaturalPersonByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentTypeModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentTypeModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentTypeModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;DocumentTypeModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentTypeModel>> GetListForNaturalPersonByFilterAsync(string filter = null)
        {
            ApiResponse<List<DocumentTypeModel>> localVarResponse = await GetListForNaturalPersonByFilterAsyncWithHttpInfo(filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DocumentTypeModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocumentTypeModel>>> GetListForNaturalPersonByFilterAsyncWithHttpInfo(string filter = null)
        {
            var localVarPath = "/documentType/forNaturalPersonByFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListForNaturalPersonByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentTypeModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentTypeModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentTypeModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;DocumentTypeLiteSearchModel&gt;</returns>
        public List<DocumentTypeLiteSearchModel> GetListForNaturalPersonByFilterForSearch(string filter = null)
        {
            ApiResponse<List<DocumentTypeLiteSearchModel>> localVarResponse = GetListForNaturalPersonByFilterForSearchWithHttpInfo(filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentTypeLiteSearchModel&gt;</returns>
        public ApiResponse<List<DocumentTypeLiteSearchModel>> GetListForNaturalPersonByFilterForSearchWithHttpInfo(string filter = null)
        {
            var localVarPath = "/documentType/forNaturalPersonByFilterForSearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListForNaturalPersonByFilterForSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentTypeLiteSearchModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentTypeLiteSearchModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentTypeLiteSearchModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;DocumentTypeLiteSearchModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentTypeLiteSearchModel>> GetListForNaturalPersonByFilterForSearchAsync(string filter = null)
        {
            ApiResponse<List<DocumentTypeLiteSearchModel>> localVarResponse = await GetListForNaturalPersonByFilterForSearchAsyncWithHttpInfo(filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DocumentTypeLiteSearchModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocumentTypeLiteSearchModel>>> GetListForNaturalPersonByFilterForSearchAsyncWithHttpInfo(string filter = null)
        {
            var localVarPath = "/documentType/forNaturalPersonByFilterForSearch";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListForNaturalPersonByFilterForSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentTypeLiteSearchModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentTypeLiteSearchModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentTypeLiteSearchModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;DocumentTypeModel&gt;</returns>
        public List<DocumentTypeModel> GetListForSpecificPersonByFilter(Guid? personId, string filter = null)
        {
            ApiResponse<List<DocumentTypeModel>> localVarResponse = GetListForSpecificPersonByFilterWithHttpInfo(personId, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;DocumentTypeModel&gt;</returns>
        public ApiResponse<List<DocumentTypeModel>> GetListForSpecificPersonByFilterWithHttpInfo(Guid? personId, string filter = null)
        {
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling DocumentTypeApi->GetListForSpecificPersonByFilter");

            var localVarPath = "/documentType/forSpecificPersonByFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "personId", personId)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListForSpecificPersonByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentTypeModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentTypeModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentTypeModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;DocumentTypeModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentTypeModel>> GetListForSpecificPersonByFilterAsync(Guid? personId, string filter = null)
        {
            ApiResponse<List<DocumentTypeModel>> localVarResponse = await GetListForSpecificPersonByFilterAsyncWithHttpInfo(personId, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;DocumentTypeModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocumentTypeModel>>> GetListForSpecificPersonByFilterAsyncWithHttpInfo(Guid? personId, string filter = null)
        {
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling DocumentTypeApi->GetListForSpecificPersonByFilter");

            var localVarPath = "/documentType/forSpecificPersonByFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "personId", personId)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListForSpecificPersonByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentTypeModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentTypeModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentTypeModel>)));
        }

        

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateDate"> (optional)</param>
        /// <param name="onlyInUse"> </param>        
        /// <returns>List&lt;DocumentTypeModel&gt;</returns>
        public List<DocumentTypeModel> GetListDocumentTypeForUpdate(bool onlyInUse, DateTime? updateDate = null)
        {
            ApiResponse<List<DocumentTypeModel>> localVarResponse = GetListDocumentTypeForUpdateHttpInfo(onlyInUse, updateDate);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateDate"> (optional)</param>
        /// <param name="onlyInUse"> </param>        
        /// <returns>ApiResponse (List&lt;DocumentTypeModel&gt;)</returns>
        public ApiResponse<List<DocumentTypeModel>> GetListDocumentTypeForUpdateHttpInfo(bool onlyInUse, DateTime? updateDate = null)
        {
            var localVarPath = "/documentType/forUpdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updateDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "updateDate", updateDate)); // query parameter
            localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "onlyInUse", onlyInUse)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListDocumentTypeForUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentTypeModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentTypeModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentTypeModel>)));
        }



        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateDate"> (optional)</param>
        /// <param name="onlyInUse"> </param>        
        /// <returns>Task of List&lt;DocumentTypeModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<DocumentTypeModel>> GetListDocumentTypeForUpdateAsync(bool onlyInUse, DateTime? updateDate = null)
        {
            ApiResponse<List<DocumentTypeModel>> localVarResponse = await GetListDocumentTypeForUpdateAsyncHttpInfo(onlyInUse, updateDate);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateDate"> (optional)</param>
        /// <param name="onlyInUse"> </param>        
        /// <returns>Task of ApiResponse (List&lt;DocumentTypeModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DocumentTypeModel>>> GetListDocumentTypeForUpdateAsyncHttpInfo(bool onlyInUse, DateTime? updateDate = null)
        {
            var localVarPath = "/documentType/forUpdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (updateDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "updateDate", updateDate)); // query parameter
            localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "onlyInUse", onlyInUse)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListDocumentTypeForUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DocumentTypeModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DocumentTypeModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DocumentTypeModel>)));
        }
    }
}
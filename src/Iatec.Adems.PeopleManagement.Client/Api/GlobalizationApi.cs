/*
 * People Management API - BRA
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Iatec.Adems.PeopleManagement.Client.Model;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace Iatec.Adems.PeopleManagement.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGlobalizationApi : IApiAccessor
    {
        #region Synchronous Operations

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <returns>CultureModel</returns>
        CultureModel GetCultureByName(string name = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <returns>ApiResponse of CultureModel</returns>
        ApiResponse<CultureModel> GetCultureByNameWithHttpInfo(string name = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>PagedCultureModel</returns>
        PagedCultureModel GetPageCultureByFilter(int? numRows, int? pageIndex, string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of PagedCultureModel</returns>
        ApiResponse<PagedCultureModel> GetPageCultureByFilterWithHttpInfo(int? numRows, int? pageIndex, string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>PagedTimeZoneModel</returns>
        PagedTimeZoneModel GetPageTimeZoneByFilter(int? numRows, int? pageIndex, string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of PagedTimeZoneModel</returns>
        ApiResponse<PagedTimeZoneModel> GetPageTimeZoneByFilterWithHttpInfo(int? numRows, int? pageIndex, string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>TimeZoneModel</returns>
        TimeZoneModel GetTimeZoneById(string id = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>ApiResponse of TimeZoneModel</returns>
        ApiResponse<TimeZoneModel> GetTimeZoneByIdWithHttpInfo(string id = null);

        #endregion Synchronous Operations

        #region Asynchronous Operations

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <returns>Task of CultureModel</returns>
        System.Threading.Tasks.Task<CultureModel> GetCultureByNameAsync(string name = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <returns>Task of ApiResponse (CultureModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<CultureModel>> GetCultureByNameAsyncWithHttpInfo(string name = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of PagedCultureModel</returns>
        System.Threading.Tasks.Task<PagedCultureModel> GetPageCultureByFilterAsync(int? numRows, int? pageIndex, string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (PagedCultureModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedCultureModel>> GetPageCultureByFilterAsyncWithHttpInfo(int? numRows, int? pageIndex, string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of PagedTimeZoneModel</returns>
        System.Threading.Tasks.Task<PagedTimeZoneModel> GetPageTimeZoneByFilterAsync(int? numRows, int? pageIndex, string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (PagedTimeZoneModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedTimeZoneModel>> GetPageTimeZoneByFilterAsyncWithHttpInfo(int? numRows, int? pageIndex, string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of TimeZoneModel</returns>
        System.Threading.Tasks.Task<TimeZoneModel> GetTimeZoneByIdAsync(string id = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of ApiResponse (TimeZoneModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<TimeZoneModel>> GetTimeZoneByIdAsyncWithHttpInfo(string id = null);

        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GlobalizationApi : IGlobalizationApi
    {
        private Iatec.Adems.PeopleManagement.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalizationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GlobalizationApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Iatec.Adems.PeopleManagement.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GlobalizationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GlobalizationApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Iatec.Adems.PeopleManagement.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Iatec.Adems.PeopleManagement.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <returns>CultureModel</returns>
        public CultureModel GetCultureByName(string name = null)
        {
            ApiResponse<CultureModel> localVarResponse = GetCultureByNameWithHttpInfo(name);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <returns>ApiResponse of CultureModel</returns>
        public ApiResponse<CultureModel> GetCultureByNameWithHttpInfo(string name = null)
        {
            var localVarPath = "/globalization/cultureByName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCultureByName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CultureModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CultureModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(CultureModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <returns>Task of CultureModel</returns>
        public async System.Threading.Tasks.Task<CultureModel> GetCultureByNameAsync(string name = null)
        {
            ApiResponse<CultureModel> localVarResponse = await GetCultureByNameAsyncWithHttpInfo(name);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name"> (optional)</param>
        /// <returns>Task of ApiResponse (CultureModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CultureModel>> GetCultureByNameAsyncWithHttpInfo(string name = null)
        {
            var localVarPath = "/globalization/cultureByName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetCultureByName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CultureModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CultureModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(CultureModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>PagedCultureModel</returns>
        public PagedCultureModel GetPageCultureByFilter(int? numRows, int? pageIndex, string filter = null)
        {
            ApiResponse<PagedCultureModel> localVarResponse = GetPageCultureByFilterWithHttpInfo(numRows, pageIndex, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of PagedCultureModel</returns>
        public ApiResponse<PagedCultureModel> GetPageCultureByFilterWithHttpInfo(int? numRows, int? pageIndex, string filter = null)
        {
            // verify the required parameter 'numRows' is set
            if (numRows == null)
                throw new ApiException(400, "Missing required parameter 'numRows' when calling GlobalizationApi->GetPageCultureByFilter");
            // verify the required parameter 'pageIndex' is set
            if (pageIndex == null)
                throw new ApiException(400, "Missing required parameter 'pageIndex' when calling GlobalizationApi->GetPageCultureByFilter");

            var localVarPath = "/globalization/pageCultureByFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (numRows != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "numRows", numRows)); // query parameter
            if (pageIndex != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageIndex", pageIndex)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageCultureByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedCultureModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedCultureModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedCultureModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of PagedCultureModel</returns>
        public async System.Threading.Tasks.Task<PagedCultureModel> GetPageCultureByFilterAsync(int? numRows, int? pageIndex, string filter = null)
        {
            ApiResponse<PagedCultureModel> localVarResponse = await GetPageCultureByFilterAsyncWithHttpInfo(numRows, pageIndex, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (PagedCultureModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedCultureModel>> GetPageCultureByFilterAsyncWithHttpInfo(int? numRows, int? pageIndex, string filter = null)
        {
            // verify the required parameter 'numRows' is set
            if (numRows == null)
                throw new ApiException(400, "Missing required parameter 'numRows' when calling GlobalizationApi->GetPageCultureByFilter");
            // verify the required parameter 'pageIndex' is set
            if (pageIndex == null)
                throw new ApiException(400, "Missing required parameter 'pageIndex' when calling GlobalizationApi->GetPageCultureByFilter");

            var localVarPath = "/globalization/pageCultureByFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (numRows != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "numRows", numRows)); // query parameter
            if (pageIndex != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageIndex", pageIndex)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageCultureByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedCultureModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedCultureModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedCultureModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>PagedTimeZoneModel</returns>
        public PagedTimeZoneModel GetPageTimeZoneByFilter(int? numRows, int? pageIndex, string filter = null)
        {
            ApiResponse<PagedTimeZoneModel> localVarResponse = GetPageTimeZoneByFilterWithHttpInfo(numRows, pageIndex, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of PagedTimeZoneModel</returns>
        public ApiResponse<PagedTimeZoneModel> GetPageTimeZoneByFilterWithHttpInfo(int? numRows, int? pageIndex, string filter = null)
        {
            // verify the required parameter 'numRows' is set
            if (numRows == null)
                throw new ApiException(400, "Missing required parameter 'numRows' when calling GlobalizationApi->GetPageTimeZoneByFilter");
            // verify the required parameter 'pageIndex' is set
            if (pageIndex == null)
                throw new ApiException(400, "Missing required parameter 'pageIndex' when calling GlobalizationApi->GetPageTimeZoneByFilter");

            var localVarPath = "/globalization/pageTimeZoneByFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (numRows != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "numRows", numRows)); // query parameter
            if (pageIndex != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageIndex", pageIndex)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageTimeZoneByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedTimeZoneModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedTimeZoneModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedTimeZoneModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of PagedTimeZoneModel</returns>
        public async System.Threading.Tasks.Task<PagedTimeZoneModel> GetPageTimeZoneByFilterAsync(int? numRows, int? pageIndex, string filter = null)
        {
            ApiResponse<PagedTimeZoneModel> localVarResponse = await GetPageTimeZoneByFilterAsyncWithHttpInfo(numRows, pageIndex, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (PagedTimeZoneModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedTimeZoneModel>> GetPageTimeZoneByFilterAsyncWithHttpInfo(int? numRows, int? pageIndex, string filter = null)
        {
            // verify the required parameter 'numRows' is set
            if (numRows == null)
                throw new ApiException(400, "Missing required parameter 'numRows' when calling GlobalizationApi->GetPageTimeZoneByFilter");
            // verify the required parameter 'pageIndex' is set
            if (pageIndex == null)
                throw new ApiException(400, "Missing required parameter 'pageIndex' when calling GlobalizationApi->GetPageTimeZoneByFilter");

            var localVarPath = "/globalization/pageTimeZoneByFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (numRows != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "numRows", numRows)); // query parameter
            if (pageIndex != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageIndex", pageIndex)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageTimeZoneByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedTimeZoneModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedTimeZoneModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedTimeZoneModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>TimeZoneModel</returns>
        public TimeZoneModel GetTimeZoneById(string id = null)
        {
            ApiResponse<TimeZoneModel> localVarResponse = GetTimeZoneByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>ApiResponse of TimeZoneModel</returns>
        public ApiResponse<TimeZoneModel> GetTimeZoneByIdWithHttpInfo(string id = null)
        {
            var localVarPath = "/globalization/timeZoneById";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTimeZoneById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TimeZoneModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TimeZoneModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(TimeZoneModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of TimeZoneModel</returns>
        public async System.Threading.Tasks.Task<TimeZoneModel> GetTimeZoneByIdAsync(string id = null)
        {
            ApiResponse<TimeZoneModel> localVarResponse = await GetTimeZoneByIdAsyncWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"> (optional)</param>
        /// <returns>Task of ApiResponse (TimeZoneModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TimeZoneModel>> GetTimeZoneByIdAsyncWithHttpInfo(string id = null)
        {
            var localVarPath = "/globalization/timeZoneById";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTimeZoneById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TimeZoneModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TimeZoneModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(TimeZoneModel)));
        }
    }
}
/*
 * People Management API - BRA
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Iatec.Adems.PeopleManagement.Client.Model;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace Iatec.Adems.PeopleManagement.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILegalEntityApi : IApiAccessor
    {
        #region Synchronous Operations

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="legalEntityIdList"> (optional)</param>
        /// <returns></returns>
        void DeleteLegalEntity(List<Guid> legalEntityIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="legalEntityIdList"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteLegalEntityWithHttpInfo(List<Guid> legalEntityIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"> (optional)</param>
        /// <returns>LegalEntityLiteExternalModel</returns>
        LegalEntityLiteExternalModel GetByCode(string code = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"> (optional)</param>
        /// <returns>ApiResponse of LegalEntityLiteExternalModel</returns>
        ApiResponse<LegalEntityLiteExternalModel> GetByCodeWithHttpInfo(string code = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentNumber"> (optional)</param>
        /// <returns>LegalEntityLiteExternalModel</returns>
        LegalEntityLiteExternalModel GetByIdentifierDocumentNumber(string documentNumber = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentNumber"> (optional)</param>
        /// <returns>ApiResponse of LegalEntityLiteExternalModel</returns>
        ApiResponse<LegalEntityLiteExternalModel> GetByIdentifierDocumentNumberWithHttpInfo(string documentNumber = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>LegalEntityLiteExternalModel</returns>
        LegalEntityLiteExternalModel GetLegalEntityById(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of LegalEntityLiteExternalModel</returns>
        ApiResponse<LegalEntityLiteExternalModel> GetLegalEntityByIdWithHttpInfo(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;LegalEntityLiteExternalModel&gt;</returns>
        List<LegalEntityLiteExternalModel> GetListIsAdventistActiveByFilter(string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;LegalEntityLiteExternalModel&gt;</returns>
        ApiResponse<List<LegalEntityLiteExternalModel>> GetListIsAdventistActiveByFilterWithHttpInfo(string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentNumberList"> (optional)</param>
        /// <param name="documentTypeIdList"> (optional)</param>
        /// <returns>List&lt;LegalEntityLiteExternalModel&gt;</returns>
        List<LegalEntityLiteExternalModel> GetListLegalEntityByDocumentNumberList(List<string> documentNumberList = null, List<Guid> documentTypeIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentNumberList"> (optional)</param>
        /// <param name="documentTypeIdList"> (optional)</param>
        /// <returns>ApiResponse of List&lt;LegalEntityLiteExternalModel&gt;</returns>
        ApiResponse<List<LegalEntityLiteExternalModel>> GetListLegalEntityByDocumentNumberListWithHttpInfo(List<string> documentNumberList = null, List<Guid> documentTypeIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>List&lt;LegalEntityLiteExternalModel&gt;</returns>
        List<LegalEntityLiteExternalModel> GetListLegalEntityByIdList(List<Guid> idList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>ApiResponse of List&lt;LegalEntityLiteExternalModel&gt;</returns>
        ApiResponse<List<LegalEntityLiteExternalModel>> GetListLegalEntityByIdListWithHttpInfo(List<Guid> idList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;LegalEntitySystemUpdateLiteModel&gt;</returns>
        List<LegalEntitySystemUpdateLiteModel> GetListLegalEntityLastSystemUpdate();

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;LegalEntitySystemUpdateLiteModel&gt;</returns>
        ApiResponse<List<LegalEntitySystemUpdateLiteModel>> GetListLegalEntityLastSystemUpdateWithHttpInfo();

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="isAdventist"> (optional)</param>
        /// <param name="documentNumber"> (optional)</param>
        /// <returns>PagedLegalEntityLiteExternalModel</returns>
        PagedLegalEntityLiteExternalModel GetPageByFilterAndDocNumber(int? numRows, int? pageIndex, string filter = null, bool? isAdventist = null, string documentNumber = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="isAdventist"> (optional)</param>
        /// <param name="documentNumber"> (optional)</param>
        /// <returns>ApiResponse of PagedLegalEntityLiteExternalModel</returns>
        ApiResponse<PagedLegalEntityLiteExternalModel> GetPageByFilterAndDocNumberWithHttpInfo(int? numRows, int? pageIndex, string filter = null, bool? isAdventist = null, string documentNumber = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="isAdventist"> (optional)</param>
        /// <returns>PagedLegalEntityLiteExternalModel</returns>
        PagedLegalEntityLiteExternalModel GetPageLegalEntityByFilter(int? numRows, int? pageIndex, string filter = null, bool? isAdventist = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="isAdventist"> (optional)</param>
        /// <returns>ApiResponse of PagedLegalEntityLiteExternalModel</returns>
        ApiResponse<PagedLegalEntityLiteExternalModel> GetPageLegalEntityByFilterWithHttpInfo(int? numRows, int? pageIndex, string filter = null, bool? isAdventist = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="legalEntity"> (optional)</param>
        /// <returns>LegalEntityLiteExternalModel</returns>
        LegalEntityLiteExternalModel InsertForImport(LegalEntityLiteExternalModel legalEntity = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="legalEntity"> (optional)</param>
        /// <returns>ApiResponse of LegalEntityLiteExternalModel</returns>
        ApiResponse<LegalEntityLiteExternalModel> InsertForImportWithHttpInfo(LegalEntityLiteExternalModel legalEntity = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="legalEntityIdList"> (optional)</param>
        /// <returns></returns>
        void LegalEntitySaveSystemReference(List<Guid> legalEntityIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="legalEntityIdList"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LegalEntitySaveSystemReferenceWithHttpInfo(List<Guid> legalEntityIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="legalEntityIdList"> (optional)</param>
        /// <returns></returns>
        void LegalEntityUpdateNotice(List<Guid> legalEntityIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="legalEntityIdList"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LegalEntityUpdateNoticeWithHttpInfo(List<Guid> legalEntityIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="legalEntity"> (optional)</param>
        /// <returns>LegalEntityLiteExternalModel</returns>
        LegalEntityLiteExternalModel SaveLegalEntity(LegalEntityLiteExternalModel legalEntity = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="legalEntity"> (optional)</param>
        /// <returns>ApiResponse of LegalEntityLiteExternalModel</returns>
        ApiResponse<LegalEntityLiteExternalModel> SaveLegalEntityWithHttpInfo(LegalEntityLiteExternalModel legalEntity = null);

        #endregion Synchronous Operations

        #region Asynchronous Operations

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="legalEntityIdList"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteLegalEntityAsync(List<Guid> legalEntityIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="legalEntityIdList"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLegalEntityAsyncWithHttpInfo(List<Guid> legalEntityIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"> (optional)</param>
        /// <returns>Task of LegalEntityLiteExternalModel</returns>
        System.Threading.Tasks.Task<LegalEntityLiteExternalModel> GetByCodeAsync(string code = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"> (optional)</param>
        /// <returns>Task of ApiResponse (LegalEntityLiteExternalModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<LegalEntityLiteExternalModel>> GetByCodeAsyncWithHttpInfo(string code = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentNumber"> (optional)</param>
        /// <returns>Task of LegalEntityLiteExternalModel</returns>
        System.Threading.Tasks.Task<LegalEntityLiteExternalModel> GetByIdentifierDocumentNumberAsync(string documentNumber = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentNumber"> (optional)</param>
        /// <returns>Task of ApiResponse (LegalEntityLiteExternalModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<LegalEntityLiteExternalModel>> GetByIdentifierDocumentNumberAsyncWithHttpInfo(string documentNumber = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of LegalEntityLiteExternalModel</returns>
        System.Threading.Tasks.Task<LegalEntityLiteExternalModel> GetLegalEntityByIdAsync(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (LegalEntityLiteExternalModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<LegalEntityLiteExternalModel>> GetLegalEntityByIdAsyncWithHttpInfo(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;LegalEntityLiteExternalModel&gt;</returns>
        System.Threading.Tasks.Task<List<LegalEntityLiteExternalModel>> GetListIsAdventistActiveByFilterAsync(string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LegalEntityLiteExternalModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LegalEntityLiteExternalModel>>> GetListIsAdventistActiveByFilterAsyncWithHttpInfo(string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentNumberList"> (optional)</param>
        /// <param name="documentTypeIdList"> (optional)</param>
        /// <returns>Task of List&lt;LegalEntityLiteExternalModel&gt;</returns>
        System.Threading.Tasks.Task<List<LegalEntityLiteExternalModel>> GetListLegalEntityByDocumentNumberListAsync(List<string> documentNumberList = null, List<Guid> documentTypeIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentNumberList"> (optional)</param>
        /// <param name="documentTypeIdList"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LegalEntityLiteExternalModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LegalEntityLiteExternalModel>>> GetListLegalEntityByDocumentNumberListAsyncWithHttpInfo(List<string> documentNumberList = null, List<Guid> documentTypeIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>Task of List&lt;LegalEntityLiteExternalModel&gt;</returns>
        System.Threading.Tasks.Task<List<LegalEntityLiteExternalModel>> GetListLegalEntityByIdListAsync(List<Guid> idList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LegalEntityLiteExternalModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LegalEntityLiteExternalModel>>> GetListLegalEntityByIdListAsyncWithHttpInfo(List<Guid> idList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;LegalEntitySystemUpdateLiteModel&gt;</returns>
        System.Threading.Tasks.Task<List<LegalEntitySystemUpdateLiteModel>> GetListLegalEntityLastSystemUpdateAsync();

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;LegalEntitySystemUpdateLiteModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LegalEntitySystemUpdateLiteModel>>> GetListLegalEntityLastSystemUpdateAsyncWithHttpInfo();

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="isAdventist"> (optional)</param>
        /// <param name="documentNumber"> (optional)</param>
        /// <returns>Task of PagedLegalEntityLiteExternalModel</returns>
        System.Threading.Tasks.Task<PagedLegalEntityLiteExternalModel> GetPageByFilterAndDocNumberAsync(int? numRows, int? pageIndex, string filter = null, bool? isAdventist = null, string documentNumber = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="isAdventist"> (optional)</param>
        /// <param name="documentNumber"> (optional)</param>
        /// <returns>Task of ApiResponse (PagedLegalEntityLiteExternalModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedLegalEntityLiteExternalModel>> GetPageByFilterAndDocNumberAsyncWithHttpInfo(int? numRows, int? pageIndex, string filter = null, bool? isAdventist = null, string documentNumber = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="isAdventist"> (optional)</param>
        /// <returns>Task of PagedLegalEntityLiteExternalModel</returns>
        System.Threading.Tasks.Task<PagedLegalEntityLiteExternalModel> GetPageLegalEntityByFilterAsync(int? numRows, int? pageIndex, string filter = null, bool? isAdventist = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="isAdventist"> (optional)</param>
        /// <returns>Task of ApiResponse (PagedLegalEntityLiteExternalModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedLegalEntityLiteExternalModel>> GetPageLegalEntityByFilterAsyncWithHttpInfo(int? numRows, int? pageIndex, string filter = null, bool? isAdventist = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="legalEntity"> (optional)</param>
        /// <returns>Task of LegalEntityLiteExternalModel</returns>
        System.Threading.Tasks.Task<LegalEntityLiteExternalModel> InsertForImportAsync(LegalEntityLiteExternalModel legalEntity = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="legalEntity"> (optional)</param>
        /// <returns>Task of ApiResponse (LegalEntityLiteExternalModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<LegalEntityLiteExternalModel>> InsertForImportAsyncWithHttpInfo(LegalEntityLiteExternalModel legalEntity = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="legalEntityIdList"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LegalEntitySaveSystemReferenceAsync(List<Guid> legalEntityIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="legalEntityIdList"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LegalEntitySaveSystemReferenceAsyncWithHttpInfo(List<Guid> legalEntityIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="legalEntityIdList"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LegalEntityUpdateNoticeAsync(List<Guid> legalEntityIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="legalEntityIdList"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LegalEntityUpdateNoticeAsyncWithHttpInfo(List<Guid> legalEntityIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="legalEntity"> (optional)</param>
        /// <returns>Task of LegalEntityLiteExternalModel</returns>
        System.Threading.Tasks.Task<LegalEntityLiteExternalModel> SaveLegalEntityAsync(LegalEntityLiteExternalModel legalEntity = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="legalEntity"> (optional)</param>
        /// <returns>Task of ApiResponse (LegalEntityLiteExternalModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<LegalEntityLiteExternalModel>> SaveLegalEntityAsyncWithHttpInfo(LegalEntityLiteExternalModel legalEntity = null);

        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LegalEntityApi : ILegalEntityApi
    {
        private Iatec.Adems.PeopleManagement.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LegalEntityApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LegalEntityApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Iatec.Adems.PeopleManagement.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LegalEntityApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LegalEntityApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Iatec.Adems.PeopleManagement.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Iatec.Adems.PeopleManagement.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="legalEntityIdList"> (optional)</param>
        /// <returns></returns>
        public void DeleteLegalEntity(List<Guid> legalEntityIdList = null)
        {
            DeleteLegalEntityWithHttpInfo(legalEntityIdList);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="legalEntityIdList"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteLegalEntityWithHttpInfo(List<Guid> legalEntityIdList = null)
        {
            var localVarPath = "/legalEntity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            //if (legalEntityIdList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "legalEntityIdList", legalEntityIdList)); // query parameter
            if (legalEntityIdList != null && legalEntityIdList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(legalEntityIdList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = legalEntityIdList; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLegalEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="legalEntityIdList"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteLegalEntityAsync(List<Guid> legalEntityIdList = null)
        {
            await DeleteLegalEntityAsyncWithHttpInfo(legalEntityIdList);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="legalEntityIdList"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLegalEntityAsyncWithHttpInfo(List<Guid> legalEntityIdList = null)
        {
            var localVarPath = "/legalEntity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (legalEntityIdList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "legalEntityIdList", legalEntityIdList)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteLegalEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"> (optional)</param>
        /// <returns>LegalEntityLiteExternalModel</returns>
        public LegalEntityLiteExternalModel GetByCode(string code = null)
        {
            ApiResponse<LegalEntityLiteExternalModel> localVarResponse = GetByCodeWithHttpInfo(code);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"> (optional)</param>
        /// <returns>ApiResponse of LegalEntityLiteExternalModel</returns>
        public ApiResponse<LegalEntityLiteExternalModel> GetByCodeWithHttpInfo(string code = null)
        {
            var localVarPath = "/legalEntity/byCode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "code", code)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetByCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LegalEntityLiteExternalModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LegalEntityLiteExternalModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LegalEntityLiteExternalModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"> (optional)</param>
        /// <returns>Task of LegalEntityLiteExternalModel</returns>
        public async System.Threading.Tasks.Task<LegalEntityLiteExternalModel> GetByCodeAsync(string code = null)
        {
            ApiResponse<LegalEntityLiteExternalModel> localVarResponse = await GetByCodeAsyncWithHttpInfo(code);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="code"> (optional)</param>
        /// <returns>Task of ApiResponse (LegalEntityLiteExternalModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LegalEntityLiteExternalModel>> GetByCodeAsyncWithHttpInfo(string code = null)
        {
            var localVarPath = "/legalEntity/byCode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (code != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "code", code)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetByCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LegalEntityLiteExternalModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LegalEntityLiteExternalModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LegalEntityLiteExternalModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentNumber"> (optional)</param>
        /// <returns>LegalEntityLiteExternalModel</returns>
        public LegalEntityLiteExternalModel GetByIdentifierDocumentNumber(string documentNumber = null)
        {
            ApiResponse<LegalEntityLiteExternalModel> localVarResponse = GetByIdentifierDocumentNumberWithHttpInfo(documentNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentNumber"> (optional)</param>
        /// <returns>ApiResponse of LegalEntityLiteExternalModel</returns>
        public ApiResponse<LegalEntityLiteExternalModel> GetByIdentifierDocumentNumberWithHttpInfo(string documentNumber = null)
        {
            var localVarPath = "/legalEntity/byIdentifierDocumentNumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "documentNumber", documentNumber)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetByIdentifierDocumentNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LegalEntityLiteExternalModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LegalEntityLiteExternalModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LegalEntityLiteExternalModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentNumber"> (optional)</param>
        /// <returns>Task of LegalEntityLiteExternalModel</returns>
        public async System.Threading.Tasks.Task<LegalEntityLiteExternalModel> GetByIdentifierDocumentNumberAsync(string documentNumber = null)
        {
            ApiResponse<LegalEntityLiteExternalModel> localVarResponse = await GetByIdentifierDocumentNumberAsyncWithHttpInfo(documentNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentNumber"> (optional)</param>
        /// <returns>Task of ApiResponse (LegalEntityLiteExternalModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LegalEntityLiteExternalModel>> GetByIdentifierDocumentNumberAsyncWithHttpInfo(string documentNumber = null)
        {
            var localVarPath = "/legalEntity/byIdentifierDocumentNumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "documentNumber", documentNumber)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetByIdentifierDocumentNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LegalEntityLiteExternalModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LegalEntityLiteExternalModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LegalEntityLiteExternalModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>LegalEntityLiteExternalModel</returns>
        public LegalEntityLiteExternalModel GetLegalEntityById(Guid? id)
        {
            ApiResponse<LegalEntityLiteExternalModel> localVarResponse = GetLegalEntityByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of LegalEntityLiteExternalModel</returns>
        public ApiResponse<LegalEntityLiteExternalModel> GetLegalEntityByIdWithHttpInfo(Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LegalEntityApi->GetLegalEntityById");

            var localVarPath = "/legalEntity/byId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLegalEntityById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LegalEntityLiteExternalModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LegalEntityLiteExternalModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LegalEntityLiteExternalModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of LegalEntityLiteExternalModel</returns>
        public async System.Threading.Tasks.Task<LegalEntityLiteExternalModel> GetLegalEntityByIdAsync(Guid? id)
        {
            ApiResponse<LegalEntityLiteExternalModel> localVarResponse = await GetLegalEntityByIdAsyncWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (LegalEntityLiteExternalModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LegalEntityLiteExternalModel>> GetLegalEntityByIdAsyncWithHttpInfo(Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling LegalEntityApi->GetLegalEntityById");

            var localVarPath = "/legalEntity/byId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLegalEntityById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LegalEntityLiteExternalModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LegalEntityLiteExternalModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LegalEntityLiteExternalModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>List&lt;LegalEntityLiteExternalModel&gt;</returns>
        public List<LegalEntityLiteExternalModel> GetListIsAdventistActiveByFilter(string filter = null)
        {
            ApiResponse<List<LegalEntityLiteExternalModel>> localVarResponse = GetListIsAdventistActiveByFilterWithHttpInfo(filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of List&lt;LegalEntityLiteExternalModel&gt;</returns>
        public ApiResponse<List<LegalEntityLiteExternalModel>> GetListIsAdventistActiveByFilterWithHttpInfo(string filter = null)
        {
            var localVarPath = "/legalEntity/isAdventistActiveByFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListIsAdventistActiveByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LegalEntityLiteExternalModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LegalEntityLiteExternalModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LegalEntityLiteExternalModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of List&lt;LegalEntityLiteExternalModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<LegalEntityLiteExternalModel>> GetListIsAdventistActiveByFilterAsync(string filter = null)
        {
            ApiResponse<List<LegalEntityLiteExternalModel>> localVarResponse = await GetListIsAdventistActiveByFilterAsyncWithHttpInfo(filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LegalEntityLiteExternalModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LegalEntityLiteExternalModel>>> GetListIsAdventistActiveByFilterAsyncWithHttpInfo(string filter = null)
        {
            var localVarPath = "/legalEntity/isAdventistActiveByFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListIsAdventistActiveByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LegalEntityLiteExternalModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LegalEntityLiteExternalModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LegalEntityLiteExternalModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentNumberList"> (optional)</param>
        /// <param name="documentTypeIdList"> (optional)</param>
        /// <returns>List&lt;LegalEntityLiteExternalModel&gt;</returns>
        public List<LegalEntityLiteExternalModel> GetListLegalEntityByDocumentNumberList(List<string> documentNumberList = null, List<Guid> documentTypeIdList = null)
        {
            ApiResponse<List<LegalEntityLiteExternalModel>> localVarResponse = GetListLegalEntityByDocumentNumberListWithHttpInfo(documentNumberList, documentTypeIdList);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentNumberList"> (optional)</param>
        /// <param name="documentTypeIdList"> (optional)</param>
        /// <returns>ApiResponse of List&lt;LegalEntityLiteExternalModel&gt;</returns>
        public ApiResponse<List<LegalEntityLiteExternalModel>> GetListLegalEntityByDocumentNumberListWithHttpInfo(List<string> documentNumberList = null, List<Guid> documentTypeIdList = null)
        {
            var localVarPath = "/legalEntity/byDocumentNumberList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentNumberList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "documentNumberList", documentNumberList)); // query parameter
            if (documentTypeIdList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "documentTypeIdList", documentTypeIdList)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListLegalEntityByDocumentNumberList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LegalEntityLiteExternalModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LegalEntityLiteExternalModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LegalEntityLiteExternalModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentNumberList"> (optional)</param>
        /// <param name="documentTypeIdList"> (optional)</param>
        /// <returns>Task of List&lt;LegalEntityLiteExternalModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<LegalEntityLiteExternalModel>> GetListLegalEntityByDocumentNumberListAsync(List<string> documentNumberList = null, List<Guid> documentTypeIdList = null)
        {
            ApiResponse<List<LegalEntityLiteExternalModel>> localVarResponse = await GetListLegalEntityByDocumentNumberListAsyncWithHttpInfo(documentNumberList, documentTypeIdList);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentNumberList"> (optional)</param>
        /// <param name="documentTypeIdList"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LegalEntityLiteExternalModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LegalEntityLiteExternalModel>>> GetListLegalEntityByDocumentNumberListAsyncWithHttpInfo(List<string> documentNumberList = null, List<Guid> documentTypeIdList = null)
        {
            var localVarPath = "/legalEntity/byDocumentNumberList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentNumberList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "documentNumberList", documentNumberList)); // query parameter
            if (documentTypeIdList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "documentTypeIdList", documentTypeIdList)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListLegalEntityByDocumentNumberList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LegalEntityLiteExternalModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LegalEntityLiteExternalModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LegalEntityLiteExternalModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>List&lt;LegalEntityLiteExternalModel&gt;</returns>
        public List<LegalEntityLiteExternalModel> GetListLegalEntityByIdList(List<Guid> idList = null)
        {
            ApiResponse<List<LegalEntityLiteExternalModel>> localVarResponse = GetListLegalEntityByIdListWithHttpInfo(idList);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>ApiResponse of List&lt;LegalEntityLiteExternalModel&gt;</returns>
        public ApiResponse<List<LegalEntityLiteExternalModel>> GetListLegalEntityByIdListWithHttpInfo(List<Guid> idList = null)
        {
            var localVarPath = "/legalEntity/byIdList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            //if (idList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "idList", idList)); // query parameter
            if (idList != null && idList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(idList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = idList; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListLegalEntityByIdList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LegalEntityLiteExternalModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LegalEntityLiteExternalModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LegalEntityLiteExternalModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>Task of List&lt;LegalEntityLiteExternalModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<LegalEntityLiteExternalModel>> GetListLegalEntityByIdListAsync(List<Guid> idList = null)
        {
            ApiResponse<List<LegalEntityLiteExternalModel>> localVarResponse = await GetListLegalEntityByIdListAsyncWithHttpInfo(idList);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LegalEntityLiteExternalModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LegalEntityLiteExternalModel>>> GetListLegalEntityByIdListAsyncWithHttpInfo(List<Guid> idList = null)
        {
            var localVarPath = "/legalEntity/byIdList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            //if (idList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "idList", idList)); // query parameter
            if (idList != null && idList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(idList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = idList; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListLegalEntityByIdList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LegalEntityLiteExternalModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LegalEntityLiteExternalModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LegalEntityLiteExternalModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;LegalEntitySystemUpdateLiteModel&gt;</returns>
        public List<LegalEntitySystemUpdateLiteModel> GetListLegalEntityLastSystemUpdate()
        {
            ApiResponse<List<LegalEntitySystemUpdateLiteModel>> localVarResponse = GetListLegalEntityLastSystemUpdateWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;LegalEntitySystemUpdateLiteModel&gt;</returns>
        public ApiResponse<List<LegalEntitySystemUpdateLiteModel>> GetListLegalEntityLastSystemUpdateWithHttpInfo()
        {
            var localVarPath = "/legalEntity/lastSystemUpdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListLegalEntityLastSystemUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LegalEntitySystemUpdateLiteModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LegalEntitySystemUpdateLiteModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LegalEntitySystemUpdateLiteModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;LegalEntitySystemUpdateLiteModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<LegalEntitySystemUpdateLiteModel>> GetListLegalEntityLastSystemUpdateAsync()
        {
            ApiResponse<List<LegalEntitySystemUpdateLiteModel>> localVarResponse = await GetListLegalEntityLastSystemUpdateAsyncWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;LegalEntitySystemUpdateLiteModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LegalEntitySystemUpdateLiteModel>>> GetListLegalEntityLastSystemUpdateAsyncWithHttpInfo()
        {
            var localVarPath = "/legalEntity/lastSystemUpdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListLegalEntityLastSystemUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LegalEntitySystemUpdateLiteModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LegalEntitySystemUpdateLiteModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LegalEntitySystemUpdateLiteModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="isAdventist"> (optional)</param>
        /// <param name="documentNumber"> (optional)</param>
        /// <returns>PagedLegalEntityLiteExternalModel</returns>
        public PagedLegalEntityLiteExternalModel GetPageByFilterAndDocNumber(int? numRows, int? pageIndex, string filter = null, bool? isAdventist = null, string documentNumber = null)
        {
            ApiResponse<PagedLegalEntityLiteExternalModel> localVarResponse = GetPageByFilterAndDocNumberWithHttpInfo(numRows, pageIndex, filter, isAdventist, documentNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="isAdventist"> (optional)</param>
        /// <param name="documentNumber"> (optional)</param>
        /// <returns>ApiResponse of PagedLegalEntityLiteExternalModel</returns>
        public ApiResponse<PagedLegalEntityLiteExternalModel> GetPageByFilterAndDocNumberWithHttpInfo(int? numRows, int? pageIndex, string filter = null, bool? isAdventist = null, string documentNumber = null)
        {
            // verify the required parameter 'numRows' is set
            if (numRows == null)
                throw new ApiException(400, "Missing required parameter 'numRows' when calling LegalEntityApi->GetPageByFilterAndDocNumber");
            // verify the required parameter 'pageIndex' is set
            if (pageIndex == null)
                throw new ApiException(400, "Missing required parameter 'pageIndex' when calling LegalEntityApi->GetPageByFilterAndDocNumber");

            var localVarPath = "/legalEntity/pageByFilterAndDocNumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (isAdventist != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "isAdventist", isAdventist)); // query parameter
            if (documentNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "documentNumber", documentNumber)); // query parameter
            if (numRows != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "numRows", numRows)); // query parameter
            if (pageIndex != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageIndex", pageIndex)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageByFilterAndDocNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedLegalEntityLiteExternalModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedLegalEntityLiteExternalModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedLegalEntityLiteExternalModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="isAdventist"> (optional)</param>
        /// <param name="documentNumber"> (optional)</param>
        /// <returns>Task of PagedLegalEntityLiteExternalModel</returns>
        public async System.Threading.Tasks.Task<PagedLegalEntityLiteExternalModel> GetPageByFilterAndDocNumberAsync(int? numRows, int? pageIndex, string filter = null, bool? isAdventist = null, string documentNumber = null)
        {
            ApiResponse<PagedLegalEntityLiteExternalModel> localVarResponse = await GetPageByFilterAndDocNumberAsyncWithHttpInfo(numRows, pageIndex, filter, isAdventist, documentNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="isAdventist"> (optional)</param>
        /// <param name="documentNumber"> (optional)</param>
        /// <returns>Task of ApiResponse (PagedLegalEntityLiteExternalModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedLegalEntityLiteExternalModel>> GetPageByFilterAndDocNumberAsyncWithHttpInfo(int? numRows, int? pageIndex, string filter = null, bool? isAdventist = null, string documentNumber = null)
        {
            // verify the required parameter 'numRows' is set
            if (numRows == null)
                throw new ApiException(400, "Missing required parameter 'numRows' when calling LegalEntityApi->GetPageByFilterAndDocNumber");
            // verify the required parameter 'pageIndex' is set
            if (pageIndex == null)
                throw new ApiException(400, "Missing required parameter 'pageIndex' when calling LegalEntityApi->GetPageByFilterAndDocNumber");

            var localVarPath = "/legalEntity/pageByFilterAndDocNumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (isAdventist != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "isAdventist", isAdventist)); // query parameter
            if (documentNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "documentNumber", documentNumber)); // query parameter
            if (numRows != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "numRows", numRows)); // query parameter
            if (pageIndex != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageIndex", pageIndex)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageByFilterAndDocNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedLegalEntityLiteExternalModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedLegalEntityLiteExternalModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedLegalEntityLiteExternalModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="isAdventist"> (optional)</param>
        /// <returns>PagedLegalEntityLiteExternalModel</returns>
        public PagedLegalEntityLiteExternalModel GetPageLegalEntityByFilter(int? numRows, int? pageIndex, string filter = null, bool? isAdventist = null)
        {
            ApiResponse<PagedLegalEntityLiteExternalModel> localVarResponse = GetPageLegalEntityByFilterWithHttpInfo(numRows, pageIndex, filter, isAdventist);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="isAdventist"> (optional)</param>
        /// <returns>ApiResponse of PagedLegalEntityLiteExternalModel</returns>
        public ApiResponse<PagedLegalEntityLiteExternalModel> GetPageLegalEntityByFilterWithHttpInfo(int? numRows, int? pageIndex, string filter = null, bool? isAdventist = null)
        {
            // verify the required parameter 'numRows' is set
            if (numRows == null)
                throw new ApiException(400, "Missing required parameter 'numRows' when calling LegalEntityApi->GetPageLegalEntityByFilter");
            // verify the required parameter 'pageIndex' is set
            if (pageIndex == null)
                throw new ApiException(400, "Missing required parameter 'pageIndex' when calling LegalEntityApi->GetPageLegalEntityByFilter");

            var localVarPath = "/legalEntity/pageByFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (isAdventist != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "isAdventist", isAdventist)); // query parameter
            if (numRows != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "numRows", numRows)); // query parameter
            if (pageIndex != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageIndex", pageIndex)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageLegalEntityByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedLegalEntityLiteExternalModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedLegalEntityLiteExternalModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedLegalEntityLiteExternalModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="isAdventist"> (optional)</param>
        /// <returns>Task of PagedLegalEntityLiteExternalModel</returns>
        public async System.Threading.Tasks.Task<PagedLegalEntityLiteExternalModel> GetPageLegalEntityByFilterAsync(int? numRows, int? pageIndex, string filter = null, bool? isAdventist = null)
        {
            ApiResponse<PagedLegalEntityLiteExternalModel> localVarResponse = await GetPageLegalEntityByFilterAsyncWithHttpInfo(numRows, pageIndex, filter, isAdventist);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="isAdventist"> (optional)</param>
        /// <returns>Task of ApiResponse (PagedLegalEntityLiteExternalModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedLegalEntityLiteExternalModel>> GetPageLegalEntityByFilterAsyncWithHttpInfo(int? numRows, int? pageIndex, string filter = null, bool? isAdventist = null)
        {
            // verify the required parameter 'numRows' is set
            if (numRows == null)
                throw new ApiException(400, "Missing required parameter 'numRows' when calling LegalEntityApi->GetPageLegalEntityByFilter");
            // verify the required parameter 'pageIndex' is set
            if (pageIndex == null)
                throw new ApiException(400, "Missing required parameter 'pageIndex' when calling LegalEntityApi->GetPageLegalEntityByFilter");

            var localVarPath = "/legalEntity/pageByFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (isAdventist != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "isAdventist", isAdventist)); // query parameter
            if (numRows != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "numRows", numRows)); // query parameter
            if (pageIndex != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageIndex", pageIndex)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageLegalEntityByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedLegalEntityLiteExternalModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedLegalEntityLiteExternalModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedLegalEntityLiteExternalModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="legalEntity"> (optional)</param>
        /// <returns>LegalEntityLiteExternalModel</returns>
        public LegalEntityLiteExternalModel InsertForImport(LegalEntityLiteExternalModel legalEntity = null)
        {
            ApiResponse<LegalEntityLiteExternalModel> localVarResponse = InsertForImportWithHttpInfo(legalEntity);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="legalEntity"> (optional)</param>
        /// <returns>ApiResponse of LegalEntityLiteExternalModel</returns>
        public ApiResponse<LegalEntityLiteExternalModel> InsertForImportWithHttpInfo(LegalEntityLiteExternalModel legalEntity = null)
        {
            var localVarPath = "/legalEntity/insertForImport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (legalEntity != null && legalEntity.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(legalEntity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = legalEntity; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertForImport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LegalEntityLiteExternalModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LegalEntityLiteExternalModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LegalEntityLiteExternalModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="legalEntity"> (optional)</param>
        /// <returns>Task of LegalEntityLiteExternalModel</returns>
        public async System.Threading.Tasks.Task<LegalEntityLiteExternalModel> InsertForImportAsync(LegalEntityLiteExternalModel legalEntity = null)
        {
            ApiResponse<LegalEntityLiteExternalModel> localVarResponse = await InsertForImportAsyncWithHttpInfo(legalEntity);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="legalEntity"> (optional)</param>
        /// <returns>Task of ApiResponse (LegalEntityLiteExternalModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LegalEntityLiteExternalModel>> InsertForImportAsyncWithHttpInfo(LegalEntityLiteExternalModel legalEntity = null)
        {
            var localVarPath = "/legalEntity/insertForImport";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (legalEntity != null && legalEntity.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(legalEntity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = legalEntity; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InsertForImport", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LegalEntityLiteExternalModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LegalEntityLiteExternalModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LegalEntityLiteExternalModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="legalEntityIdList"> (optional)</param>
        /// <returns></returns>
        public void LegalEntitySaveSystemReference(List<Guid> legalEntityIdList = null)
        {
            LegalEntitySaveSystemReferenceWithHttpInfo(legalEntityIdList);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="legalEntityIdList"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LegalEntitySaveSystemReferenceWithHttpInfo(List<Guid> legalEntityIdList = null)
        {
            var localVarPath = "/legalEntity/systemReference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            //if (legalEntityIdList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "legalEntityIdList", legalEntityIdList)); // query parameter
            if (legalEntityIdList != null && legalEntityIdList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(legalEntityIdList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = legalEntityIdList; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LegalEntitySaveSystemReference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="legalEntityIdList"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LegalEntitySaveSystemReferenceAsync(List<Guid> legalEntityIdList = null)
        {
            await LegalEntitySaveSystemReferenceAsyncWithHttpInfo(legalEntityIdList);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="legalEntityIdList"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LegalEntitySaveSystemReferenceAsyncWithHttpInfo(List<Guid> legalEntityIdList = null)
        {
            var localVarPath = "/legalEntity/systemReference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            //if (legalEntityIdList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "legalEntityIdList", legalEntityIdList)); // query parameter
            if (legalEntityIdList != null && legalEntityIdList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(legalEntityIdList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = legalEntityIdList; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LegalEntitySaveSystemReference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="legalEntityIdList"> (optional)</param>
        /// <returns></returns>
        public void LegalEntityUpdateNotice(List<Guid> legalEntityIdList = null)
        {
            LegalEntityUpdateNoticeWithHttpInfo(legalEntityIdList);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="legalEntityIdList"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LegalEntityUpdateNoticeWithHttpInfo(List<Guid> legalEntityIdList = null)
        {
            var localVarPath = "/legalEntity/notice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            //if (legalEntityIdList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "legalEntityIdList", legalEntityIdList)); // query parameter
            if (legalEntityIdList != null && legalEntityIdList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(legalEntityIdList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = legalEntityIdList; // byte array
            }


            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LegalEntityUpdateNotice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="legalEntityIdList"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LegalEntityUpdateNoticeAsync(List<Guid> legalEntityIdList = null)
        {
            await LegalEntityUpdateNoticeAsyncWithHttpInfo(legalEntityIdList);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="legalEntityIdList"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LegalEntityUpdateNoticeAsyncWithHttpInfo(List<Guid> legalEntityIdList = null)
        {
            var localVarPath = "/legalEntity/notice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            //if (legalEntityIdList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "legalEntityIdList", legalEntityIdList)); // query parameter

            if (legalEntityIdList != null && legalEntityIdList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(legalEntityIdList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = legalEntityIdList; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LegalEntityUpdateNotice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="legalEntity"> (optional)</param>
        /// <returns>LegalEntityLiteExternalModel</returns>
        public LegalEntityLiteExternalModel SaveLegalEntity(LegalEntityLiteExternalModel legalEntity = null)
        {
            ApiResponse<LegalEntityLiteExternalModel> localVarResponse = SaveLegalEntityWithHttpInfo(legalEntity);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="legalEntity"> (optional)</param>
        /// <returns>ApiResponse of LegalEntityLiteExternalModel</returns>
        public ApiResponse<LegalEntityLiteExternalModel> SaveLegalEntityWithHttpInfo(LegalEntityLiteExternalModel legalEntity = null)
        {
            var localVarPath = "/legalEntity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (legalEntity != null && legalEntity.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(legalEntity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = legalEntity; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveLegalEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LegalEntityLiteExternalModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LegalEntityLiteExternalModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LegalEntityLiteExternalModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="legalEntity"> (optional)</param>
        /// <returns>Task of LegalEntityLiteExternalModel</returns>
        public async System.Threading.Tasks.Task<LegalEntityLiteExternalModel> SaveLegalEntityAsync(LegalEntityLiteExternalModel legalEntity = null)
        {
            ApiResponse<LegalEntityLiteExternalModel> localVarResponse = await SaveLegalEntityAsyncWithHttpInfo(legalEntity);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="legalEntity"> (optional)</param>
        /// <returns>Task of ApiResponse (LegalEntityLiteExternalModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LegalEntityLiteExternalModel>> SaveLegalEntityAsyncWithHttpInfo(LegalEntityLiteExternalModel legalEntity = null)
        {
            var localVarPath = "/legalEntity";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (legalEntity != null && legalEntity.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(legalEntity); // http body (model) parameter
            }
            else
            {
                localVarPostBody = legalEntity; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveLegalEntity", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LegalEntityLiteExternalModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LegalEntityLiteExternalModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LegalEntityLiteExternalModel)));
        }
    }
}
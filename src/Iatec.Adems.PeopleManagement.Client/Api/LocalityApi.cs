/*
 * People Management API - BRA
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Iatec.Adems.PeopleManagement.Client.Model;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace Iatec.Adems.PeopleManagement.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILocalityApi : IApiAccessor
    {
        #region Synchronous Operations

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId"></param>
        /// <param name="zipCode"> (optional)</param>
        /// <returns>ZipPostalCodeAddressLiteModel</returns>
        ZipPostalCodeAddressLiteModel GetAddressByZipPostalCode(Guid? countryId, string zipCode = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId"></param>
        /// <param name="zipCode"> (optional)</param>
        /// <returns>ApiResponse of ZipPostalCodeAddressLiteModel</returns>
        ApiResponse<ZipPostalCodeAddressLiteModel> GetAddressByZipPostalCodeWithHttpInfo(Guid? countryId, string zipCode = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="divisionType"></param>
        /// <param name="countryId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="parentId"> (optional)</param>
        /// <returns>List&lt;LocalityLiteSearchModel&gt;</returns>
        List<LocalityLiteSearchModel> GetListByDivisionTypeAndCountry(PoliticalDivisionTypeModel divisionType, Guid? countryId, string filter = null, Guid? parentId = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="divisionType"></param>
        /// <param name="countryId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="parentId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;LocalityLiteSearchModel&gt;</returns>
        ApiResponse<List<LocalityLiteSearchModel>> GetListByDivisionTypeAndCountryWithHttpInfo(PoliticalDivisionTypeModel divisionType, Guid? countryId, string filter = null, Guid? parentId = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localityTypeId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="parentId"> (optional)</param>
        /// <returns>List&lt;LocalityLiteSearchModel&gt;</returns>
        List<LocalityLiteSearchModel> GetListByTypeAndParent(Guid? localityTypeId, string filter = null, Guid? parentId = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localityTypeId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="parentId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;LocalityLiteSearchModel&gt;</returns>
        ApiResponse<List<LocalityLiteSearchModel>> GetListByTypeAndParentWithHttpInfo(Guid? localityTypeId, string filter = null, Guid? parentId = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>List&lt;LocalityLiteModel&gt;</returns>
        List<LocalityLiteModel> GetListLocalityByIdList(List<Guid> idList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>ApiResponse of List&lt;LocalityLiteModel&gt;</returns>
        ApiResponse<List<LocalityLiteModel>> GetListLocalityByIdListWithHttpInfo(List<Guid> idList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameList"> (optional)</param>
        /// <returns>List&lt;LocalityLiteModel&gt;</returns>
        List<LocalityLiteModel> GetListLocalityByNameList(List<string> nameList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameList"> (optional)</param>
        /// <returns>ApiResponse of List&lt;LocalityLiteModel&gt;</returns>
        ApiResponse<List<LocalityLiteModel>> GetListLocalityByNameListWithHttpInfo(List<string> nameList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>LocalityLiteModel</returns>
        LocalityLiteModel GetLocalityById(Guid id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of LocalityLiteModel</returns>
        ApiResponse<LocalityLiteModel> GetLocalityByIdWithHttpInfo(Guid id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId"></param>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>PagedLocalityLiteSearchModel</returns>
        PagedLocalityLiteSearchModel GetPageCityByFilterAndCountry(Guid? countryId, int? numRows, int? pageIndex, string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId"></param>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of PagedLocalityLiteSearchModel</returns>
        ApiResponse<PagedLocalityLiteSearchModel> GetPageCityByFilterAndCountryWithHttpInfo(Guid? countryId, int? numRows, int? pageIndex, string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId"></param>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>PagedLocalityLiteSearchModel</returns>
        PagedLocalityLiteSearchModel GetPageHasAddressByFilterAndCountry(Guid? countryId, int? numRows, int? pageIndex, string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId"></param>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of PagedLocalityLiteSearchModel</returns>
        ApiResponse<PagedLocalityLiteSearchModel> GetPageHasAddressByFilterAndCountryWithHttpInfo(Guid? countryId, int? numRows, int? pageIndex, string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="countryId"> (optional)</param>
        /// <param name="localityTypeId"> (optional)</param>
        /// <returns>PagedLocalityLiteModel</returns>
        PagedLocalityLiteModel GetPageLocalityByFilter(int? numRows, int? pageIndex, string filter = null, Guid? countryId = null, Guid? localityTypeId = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="countryId"> (optional)</param>
        /// <param name="localityTypeId"> (optional)</param>
        /// <returns>ApiResponse of PagedLocalityLiteModel</returns>
        ApiResponse<PagedLocalityLiteModel> GetPageLocalityByFilterWithHttpInfo(int? numRows, int? pageIndex, string filter = null, Guid? countryId = null, Guid? localityTypeId = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void LocalityDeleteSystemReference(Guid id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LocalityDeleteSystemReferenceWithHttpInfo(Guid id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void LocalitySaveSystemReference(Guid id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LocalitySaveSystemReferenceWithHttpInfo(Guid id);

        #endregion Synchronous Operations

        #region Asynchronous Operations

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId"></param>
        /// <param name="zipCode"> (optional)</param>
        /// <returns>Task of ZipPostalCodeAddressLiteModel</returns>
        System.Threading.Tasks.Task<ZipPostalCodeAddressLiteModel> GetAddressByZipPostalCodeAsync(Guid? countryId, string zipCode = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId"></param>
        /// <param name="zipCode"> (optional)</param>
        /// <returns>Task of ApiResponse (ZipPostalCodeAddressLiteModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ZipPostalCodeAddressLiteModel>> GetAddressByZipPostalCodeAsyncWithHttpInfo(Guid? countryId, string zipCode = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="divisionType"></param>
        /// <param name="countryId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="parentId"> (optional)</param>
        /// <returns>Task of List&lt;LocalityLiteSearchModel&gt;</returns>
        System.Threading.Tasks.Task<List<LocalityLiteSearchModel>> GetListByDivisionTypeAndCountryAsync(PoliticalDivisionTypeModel divisionType, Guid? countryId, string filter = null, Guid? parentId = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="divisionType"></param>
        /// <param name="countryId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="parentId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LocalityLiteSearchModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LocalityLiteSearchModel>>> GetListByDivisionTypeAndCountryAsyncWithHttpInfo(PoliticalDivisionTypeModel divisionType, Guid? countryId, string filter = null, Guid? parentId = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localityTypeId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="parentId"> (optional)</param>
        /// <returns>Task of List&lt;LocalityLiteSearchModel&gt;</returns>
        System.Threading.Tasks.Task<List<LocalityLiteSearchModel>> GetListByTypeAndParentAsync(Guid? localityTypeId, string filter = null, Guid? parentId = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localityTypeId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="parentId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LocalityLiteSearchModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LocalityLiteSearchModel>>> GetListByTypeAndParentAsyncWithHttpInfo(Guid? localityTypeId, string filter = null, Guid? parentId = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>Task of List&lt;LocalityLiteModel&gt;</returns>
        System.Threading.Tasks.Task<List<LocalityLiteModel>> GetListLocalityByIdListAsync(List<Guid> idList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LocalityLiteModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LocalityLiteModel>>> GetListLocalityByIdListAsyncWithHttpInfo(List<Guid> idList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameList"> (optional)</param>
        /// <returns>Task of List&lt;LocalityLiteModel&gt;</returns>
        System.Threading.Tasks.Task<List<LocalityLiteModel>> GetListLocalityByNameListAsync(List<string> nameList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameList"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LocalityLiteModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LocalityLiteModel>>> GetListLocalityByNameListAsyncWithHttpInfo(List<string> nameList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of LocalityLiteModel</returns>
        System.Threading.Tasks.Task<LocalityLiteModel> GetLocalityByIdAsync(Guid id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (LocalityLiteModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<LocalityLiteModel>> GetLocalityByIdAsyncWithHttpInfo(Guid id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId"></param>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of PagedLocalityLiteSearchModel</returns>
        System.Threading.Tasks.Task<PagedLocalityLiteSearchModel> GetPageCityByFilterAndCountryAsync(Guid? countryId, int? numRows, int? pageIndex, string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId"></param>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (PagedLocalityLiteSearchModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedLocalityLiteSearchModel>> GetPageCityByFilterAndCountryAsyncWithHttpInfo(Guid? countryId, int? numRows, int? pageIndex, string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId"></param>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of PagedLocalityLiteSearchModel</returns>
        System.Threading.Tasks.Task<PagedLocalityLiteSearchModel> GetPageHasAddressByFilterAndCountryAsync(Guid? countryId, int? numRows, int? pageIndex, string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId"></param>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (PagedLocalityLiteSearchModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedLocalityLiteSearchModel>> GetPageHasAddressByFilterAndCountryAsyncWithHttpInfo(Guid? countryId, int? numRows, int? pageIndex, string filter = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="countryId"> (optional)</param>
        /// <param name="localityTypeId"> (optional)</param>
        /// <returns>Task of PagedLocalityLiteModel</returns>
        System.Threading.Tasks.Task<PagedLocalityLiteModel> GetPageLocalityByFilterAsync(int? numRows, int? pageIndex, string filter = null, Guid? countryId = null, Guid? localityTypeId = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="countryId"> (optional)</param>
        /// <param name="localityTypeId"> (optional)</param>
        /// <returns>Task of ApiResponse (PagedLocalityLiteModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedLocalityLiteModel>> GetPageLocalityByFilterAsyncWithHttpInfo(int? numRows, int? pageIndex, string filter = null, Guid? countryId = null, Guid? localityTypeId = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LocalityDeleteSystemReferenceAsync(Guid id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LocalityDeleteSystemReferenceAsyncWithHttpInfo(Guid id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LocalitySaveSystemReferenceAsync(Guid id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LocalitySaveSystemReferenceAsyncWithHttpInfo(Guid id);

        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LocalityApi : ILocalityApi
    {
        private Iatec.Adems.PeopleManagement.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LocalityApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LocalityApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Iatec.Adems.PeopleManagement.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LocalityApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LocalityApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Iatec.Adems.PeopleManagement.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Iatec.Adems.PeopleManagement.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId"></param>
        /// <param name="zipCode"> (optional)</param>
        /// <returns>ZipPostalCodeAddressLiteModel</returns>
        public ZipPostalCodeAddressLiteModel GetAddressByZipPostalCode(Guid? countryId, string zipCode = null)
        {
            ApiResponse<ZipPostalCodeAddressLiteModel> localVarResponse = GetAddressByZipPostalCodeWithHttpInfo(countryId, zipCode);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId"></param>
        /// <param name="zipCode"> (optional)</param>
        /// <returns>ApiResponse of ZipPostalCodeAddressLiteModel</returns>
        public ApiResponse<ZipPostalCodeAddressLiteModel> GetAddressByZipPostalCodeWithHttpInfo(Guid? countryId, string zipCode = null)
        {
            // verify the required parameter 'countryId' is set
            if (countryId == null)
                throw new ApiException(400, "Missing required parameter 'countryId' when calling LocalityApi->GetAddressByZipPostalCode");

            var localVarPath = "/locality/addressByZipPostalCode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (zipCode != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "zipCode", zipCode)); // query parameter
            if (countryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "countryId", countryId)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAddressByZipPostalCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ZipPostalCodeAddressLiteModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ZipPostalCodeAddressLiteModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ZipPostalCodeAddressLiteModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId"></param>
        /// <param name="zipCode"> (optional)</param>
        /// <returns>Task of ZipPostalCodeAddressLiteModel</returns>
        public async System.Threading.Tasks.Task<ZipPostalCodeAddressLiteModel> GetAddressByZipPostalCodeAsync(Guid? countryId, string zipCode = null)
        {
            ApiResponse<ZipPostalCodeAddressLiteModel> localVarResponse = await GetAddressByZipPostalCodeAsyncWithHttpInfo(countryId, zipCode);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId"></param>
        /// <param name="zipCode"> (optional)</param>
        /// <returns>Task of ApiResponse (ZipPostalCodeAddressLiteModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ZipPostalCodeAddressLiteModel>> GetAddressByZipPostalCodeAsyncWithHttpInfo(Guid? countryId, string zipCode = null)
        {
            // verify the required parameter 'countryId' is set
            if (countryId == null)
                throw new ApiException(400, "Missing required parameter 'countryId' when calling LocalityApi->GetAddressByZipPostalCode");

            var localVarPath = "/locality/addressByZipPostalCode";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (zipCode != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "zipCode", zipCode)); // query parameter
            if (countryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "countryId", countryId)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAddressByZipPostalCode", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ZipPostalCodeAddressLiteModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ZipPostalCodeAddressLiteModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(ZipPostalCodeAddressLiteModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="divisionType"></param>
        /// <param name="countryId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="parentId"> (optional)</param>
        /// <returns>List&lt;LocalityLiteSearchModel&gt;</returns>
        public List<LocalityLiteSearchModel> GetListByDivisionTypeAndCountry(PoliticalDivisionTypeModel divisionType, Guid? countryId, string filter = null, Guid? parentId = null)
        {
            ApiResponse<List<LocalityLiteSearchModel>> localVarResponse = GetListByDivisionTypeAndCountryWithHttpInfo(divisionType, countryId, filter, parentId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="divisionType"></param>
        /// <param name="countryId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="parentId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;LocalityLiteSearchModel&gt;</returns>
        public ApiResponse<List<LocalityLiteSearchModel>> GetListByDivisionTypeAndCountryWithHttpInfo(PoliticalDivisionTypeModel divisionType, Guid? countryId, string filter = null, Guid? parentId = null)
        {
            // verify the required parameter 'divisionType' is set
            if (divisionType == null)
                throw new ApiException(400, "Missing required parameter 'divisionType' when calling LocalityApi->GetListByDivisionTypeAndCountry");
            // verify the required parameter 'countryId' is set
            if (countryId == null)
                throw new ApiException(400, "Missing required parameter 'countryId' when calling LocalityApi->GetListByDivisionTypeAndCountry");

            var localVarPath = "/locality/byDivisionTypeAndCountry";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (countryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "countryId", countryId)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "parentId", parentId)); // query parameter
            if (divisionType != null && divisionType.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(divisionType); // http body (model) parameter
            }
            else
            {
                localVarPostBody = divisionType; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListByDivisionTypeAndCountry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LocalityLiteSearchModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LocalityLiteSearchModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LocalityLiteSearchModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="divisionType"></param>
        /// <param name="countryId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="parentId"> (optional)</param>
        /// <returns>Task of List&lt;LocalityLiteSearchModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<LocalityLiteSearchModel>> GetListByDivisionTypeAndCountryAsync(PoliticalDivisionTypeModel divisionType, Guid? countryId, string filter = null, Guid? parentId = null)
        {
            ApiResponse<List<LocalityLiteSearchModel>> localVarResponse = await GetListByDivisionTypeAndCountryAsyncWithHttpInfo(divisionType, countryId, filter, parentId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="divisionType"></param>
        /// <param name="countryId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="parentId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LocalityLiteSearchModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LocalityLiteSearchModel>>> GetListByDivisionTypeAndCountryAsyncWithHttpInfo(PoliticalDivisionTypeModel divisionType, Guid? countryId, string filter = null, Guid? parentId = null)
        {
            // verify the required parameter 'divisionType' is set
            if (divisionType == null)
                throw new ApiException(400, "Missing required parameter 'divisionType' when calling LocalityApi->GetListByDivisionTypeAndCountry");
            // verify the required parameter 'countryId' is set
            if (countryId == null)
                throw new ApiException(400, "Missing required parameter 'countryId' when calling LocalityApi->GetListByDivisionTypeAndCountry");

            var localVarPath = "/locality/byDivisionTypeAndCountry";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (countryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "countryId", countryId)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "parentId", parentId)); // query parameter
            if (divisionType != null && divisionType.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(divisionType); // http body (model) parameter
            }
            else
            {
                localVarPostBody = divisionType; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListByDivisionTypeAndCountry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LocalityLiteSearchModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LocalityLiteSearchModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LocalityLiteSearchModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localityTypeId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="parentId"> (optional)</param>
        /// <returns>List&lt;LocalityLiteSearchModel&gt;</returns>
        public List<LocalityLiteSearchModel> GetListByTypeAndParent(Guid? localityTypeId, string filter = null, Guid? parentId = null)
        {
            ApiResponse<List<LocalityLiteSearchModel>> localVarResponse = GetListByTypeAndParentWithHttpInfo(localityTypeId, filter, parentId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localityTypeId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="parentId"> (optional)</param>
        /// <returns>ApiResponse of List&lt;LocalityLiteSearchModel&gt;</returns>
        public ApiResponse<List<LocalityLiteSearchModel>> GetListByTypeAndParentWithHttpInfo(Guid? localityTypeId, string filter = null, Guid? parentId = null)
        {
            // verify the required parameter 'localityTypeId' is set
            if (localityTypeId == null)
                throw new ApiException(400, "Missing required parameter 'localityTypeId' when calling LocalityApi->GetListByTypeAndParent");

            var localVarPath = "/locality/byTypeAndParent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (localityTypeId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "localityTypeId", localityTypeId)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "parentId", parentId)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListByTypeAndParent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LocalityLiteSearchModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LocalityLiteSearchModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LocalityLiteSearchModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localityTypeId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="parentId"> (optional)</param>
        /// <returns>Task of List&lt;LocalityLiteSearchModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<LocalityLiteSearchModel>> GetListByTypeAndParentAsync(Guid? localityTypeId, string filter = null, Guid? parentId = null)
        {
            ApiResponse<List<LocalityLiteSearchModel>> localVarResponse = await GetListByTypeAndParentAsyncWithHttpInfo(localityTypeId, filter, parentId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="localityTypeId"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="parentId"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LocalityLiteSearchModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LocalityLiteSearchModel>>> GetListByTypeAndParentAsyncWithHttpInfo(Guid? localityTypeId, string filter = null, Guid? parentId = null)
        {
            // verify the required parameter 'localityTypeId' is set
            if (localityTypeId == null)
                throw new ApiException(400, "Missing required parameter 'localityTypeId' when calling LocalityApi->GetListByTypeAndParent");

            var localVarPath = "/locality/byTypeAndParent";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (localityTypeId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "localityTypeId", localityTypeId)); // query parameter
            if (parentId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "parentId", parentId)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListByTypeAndParent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LocalityLiteSearchModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LocalityLiteSearchModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LocalityLiteSearchModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>List&lt;LocalityLiteModel&gt;</returns>
        public List<LocalityLiteModel> GetListLocalityByIdList(List<Guid> idList = null)
        {
            ApiResponse<List<LocalityLiteModel>> localVarResponse = GetListLocalityByIdListWithHttpInfo(idList);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>ApiResponse of List&lt;LocalityLiteModel&gt;</returns>
        public ApiResponse<List<LocalityLiteModel>> GetListLocalityByIdListWithHttpInfo(List<Guid> idList = null)
        {
            var localVarPath = "/locality/byIdList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "idList", idList)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListLocalityByIdList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LocalityLiteModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LocalityLiteModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LocalityLiteModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>Task of List&lt;LocalityLiteModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<LocalityLiteModel>> GetListLocalityByIdListAsync(List<Guid> idList = null)
        {
            ApiResponse<List<LocalityLiteModel>> localVarResponse = await GetListLocalityByIdListAsyncWithHttpInfo(idList);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LocalityLiteModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LocalityLiteModel>>> GetListLocalityByIdListAsyncWithHttpInfo(List<Guid> idList = null)
        {
            var localVarPath = "/locality/byIdList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "idList", idList)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListLocalityByIdList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LocalityLiteModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LocalityLiteModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LocalityLiteModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameList"> (optional)</param>
        /// <returns>List&lt;LocalityLiteModel&gt;</returns>
        public List<LocalityLiteModel> GetListLocalityByNameList(List<string> nameList = null)
        {
            ApiResponse<List<LocalityLiteModel>> localVarResponse = GetListLocalityByNameListWithHttpInfo(nameList);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameList"> (optional)</param>
        /// <returns>ApiResponse of List&lt;LocalityLiteModel&gt;</returns>
        public ApiResponse<List<LocalityLiteModel>> GetListLocalityByNameListWithHttpInfo(List<string> nameList = null)
        {
            var localVarPath = "/locality/byNameList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nameList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "nameList", nameList)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListLocalityByNameList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LocalityLiteModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LocalityLiteModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LocalityLiteModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameList"> (optional)</param>
        /// <returns>Task of List&lt;LocalityLiteModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<LocalityLiteModel>> GetListLocalityByNameListAsync(List<string> nameList = null)
        {
            ApiResponse<List<LocalityLiteModel>> localVarResponse = await GetListLocalityByNameListAsyncWithHttpInfo(nameList);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="nameList"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;LocalityLiteModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LocalityLiteModel>>> GetListLocalityByNameListAsyncWithHttpInfo(List<string> nameList = null)
        {
            var localVarPath = "/locality/byNameList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (nameList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "nameList", nameList)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListLocalityByNameList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LocalityLiteModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LocalityLiteModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LocalityLiteModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>LocalityLiteModel</returns>
        public LocalityLiteModel GetLocalityById(Guid id)
        {
            ApiResponse<LocalityLiteModel> localVarResponse = GetLocalityByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of LocalityLiteModel</returns>
        public ApiResponse<LocalityLiteModel> GetLocalityByIdWithHttpInfo(Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == default(Guid))
                throw new ApiException(400, "Missing required parameter 'id' when calling LocalityApi->GetLocalityById");

            var localVarPath = "/locality/byId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != default(Guid)) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLocalityById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LocalityLiteModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LocalityLiteModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LocalityLiteModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of LocalityLiteModel</returns>
        public async System.Threading.Tasks.Task<LocalityLiteModel> GetLocalityByIdAsync(Guid id)
        {
            ApiResponse<LocalityLiteModel> localVarResponse = await GetLocalityByIdAsyncWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (LocalityLiteModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LocalityLiteModel>> GetLocalityByIdAsyncWithHttpInfo(Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == default(Guid))
                throw new ApiException(400, "Missing required parameter 'id' when calling LocalityApi->GetLocalityById");

            var localVarPath = "/locality/byId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != default(Guid)) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLocalityById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LocalityLiteModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LocalityLiteModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(LocalityLiteModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId"></param>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>PagedLocalityLiteSearchModel</returns>
        public PagedLocalityLiteSearchModel GetPageCityByFilterAndCountry(Guid? countryId, int? numRows, int? pageIndex, string filter = null)
        {
            ApiResponse<PagedLocalityLiteSearchModel> localVarResponse = GetPageCityByFilterAndCountryWithHttpInfo(countryId, numRows, pageIndex, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId"></param>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of PagedLocalityLiteSearchModel</returns>
        public ApiResponse<PagedLocalityLiteSearchModel> GetPageCityByFilterAndCountryWithHttpInfo(Guid? countryId, int? numRows, int? pageIndex, string filter = null)
        {
            // verify the required parameter 'countryId' is set
            if (countryId == null)
                throw new ApiException(400, "Missing required parameter 'countryId' when calling LocalityApi->GetPageCityByFilterAndCountry");
            // verify the required parameter 'numRows' is set
            if (numRows == null)
                throw new ApiException(400, "Missing required parameter 'numRows' when calling LocalityApi->GetPageCityByFilterAndCountry");
            // verify the required parameter 'pageIndex' is set
            if (pageIndex == null)
                throw new ApiException(400, "Missing required parameter 'pageIndex' when calling LocalityApi->GetPageCityByFilterAndCountry");

            var localVarPath = "/locality/pageCityByFilterAndCountry";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (countryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "countryId", countryId)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (numRows != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "numRows", numRows)); // query parameter
            if (pageIndex != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageIndex", pageIndex)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageCityByFilterAndCountry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedLocalityLiteSearchModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedLocalityLiteSearchModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedLocalityLiteSearchModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId"></param>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of PagedLocalityLiteSearchModel</returns>
        public async System.Threading.Tasks.Task<PagedLocalityLiteSearchModel> GetPageCityByFilterAndCountryAsync(Guid? countryId, int? numRows, int? pageIndex, string filter = null)
        {
            ApiResponse<PagedLocalityLiteSearchModel> localVarResponse = await GetPageCityByFilterAndCountryAsyncWithHttpInfo(countryId, numRows, pageIndex, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId"></param>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (PagedLocalityLiteSearchModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedLocalityLiteSearchModel>> GetPageCityByFilterAndCountryAsyncWithHttpInfo(Guid? countryId, int? numRows, int? pageIndex, string filter = null)
        {
            // verify the required parameter 'countryId' is set
            if (countryId == null)
                throw new ApiException(400, "Missing required parameter 'countryId' when calling LocalityApi->GetPageCityByFilterAndCountry");
            // verify the required parameter 'numRows' is set
            if (numRows == null)
                throw new ApiException(400, "Missing required parameter 'numRows' when calling LocalityApi->GetPageCityByFilterAndCountry");
            // verify the required parameter 'pageIndex' is set
            if (pageIndex == null)
                throw new ApiException(400, "Missing required parameter 'pageIndex' when calling LocalityApi->GetPageCityByFilterAndCountry");

            var localVarPath = "/locality/pageCityByFilterAndCountry";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (countryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "countryId", countryId)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (numRows != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "numRows", numRows)); // query parameter
            if (pageIndex != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageIndex", pageIndex)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageCityByFilterAndCountry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedLocalityLiteSearchModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedLocalityLiteSearchModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedLocalityLiteSearchModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId"></param>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>PagedLocalityLiteSearchModel</returns>
        public PagedLocalityLiteSearchModel GetPageHasAddressByFilterAndCountry(Guid? countryId, int? numRows, int? pageIndex, string filter = null)
        {
            ApiResponse<PagedLocalityLiteSearchModel> localVarResponse = GetPageHasAddressByFilterAndCountryWithHttpInfo(countryId, numRows, pageIndex, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId"></param>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>ApiResponse of PagedLocalityLiteSearchModel</returns>
        public ApiResponse<PagedLocalityLiteSearchModel> GetPageHasAddressByFilterAndCountryWithHttpInfo(Guid? countryId, int? numRows, int? pageIndex, string filter = null)
        {
            // verify the required parameter 'countryId' is set
            if (countryId == null)
                throw new ApiException(400, "Missing required parameter 'countryId' when calling LocalityApi->GetPageHasAddressByFilterAndCountry");
            // verify the required parameter 'numRows' is set
            if (numRows == null)
                throw new ApiException(400, "Missing required parameter 'numRows' when calling LocalityApi->GetPageHasAddressByFilterAndCountry");
            // verify the required parameter 'pageIndex' is set
            if (pageIndex == null)
                throw new ApiException(400, "Missing required parameter 'pageIndex' when calling LocalityApi->GetPageHasAddressByFilterAndCountry");

            var localVarPath = "/locality/pageHasAddressByFilterAndCountry";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (countryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "countryId", countryId)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (numRows != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "numRows", numRows)); // query parameter
            if (pageIndex != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageIndex", pageIndex)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageHasAddressByFilterAndCountry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedLocalityLiteSearchModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedLocalityLiteSearchModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedLocalityLiteSearchModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId"></param>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of PagedLocalityLiteSearchModel</returns>
        public async System.Threading.Tasks.Task<PagedLocalityLiteSearchModel> GetPageHasAddressByFilterAndCountryAsync(Guid? countryId, int? numRows, int? pageIndex, string filter = null)
        {
            ApiResponse<PagedLocalityLiteSearchModel> localVarResponse = await GetPageHasAddressByFilterAndCountryAsyncWithHttpInfo(countryId, numRows, pageIndex, filter);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="countryId"></param>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <returns>Task of ApiResponse (PagedLocalityLiteSearchModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedLocalityLiteSearchModel>> GetPageHasAddressByFilterAndCountryAsyncWithHttpInfo(Guid? countryId, int? numRows, int? pageIndex, string filter = null)
        {
            // verify the required parameter 'countryId' is set
            if (countryId == null)
                throw new ApiException(400, "Missing required parameter 'countryId' when calling LocalityApi->GetPageHasAddressByFilterAndCountry");
            // verify the required parameter 'numRows' is set
            if (numRows == null)
                throw new ApiException(400, "Missing required parameter 'numRows' when calling LocalityApi->GetPageHasAddressByFilterAndCountry");
            // verify the required parameter 'pageIndex' is set
            if (pageIndex == null)
                throw new ApiException(400, "Missing required parameter 'pageIndex' when calling LocalityApi->GetPageHasAddressByFilterAndCountry");

            var localVarPath = "/locality/pageHasAddressByFilterAndCountry";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (countryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "countryId", countryId)); // query parameter
            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (numRows != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "numRows", numRows)); // query parameter
            if (pageIndex != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageIndex", pageIndex)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageHasAddressByFilterAndCountry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedLocalityLiteSearchModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedLocalityLiteSearchModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedLocalityLiteSearchModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="countryId"> (optional)</param>
        /// <param name="localityTypeId"> (optional)</param>
        /// <returns>PagedLocalityLiteModel</returns>
        public PagedLocalityLiteModel GetPageLocalityByFilter(int? numRows, int? pageIndex, string filter = null, Guid? countryId = null, Guid? localityTypeId = null)
        {
            ApiResponse<PagedLocalityLiteModel> localVarResponse = GetPageLocalityByFilterWithHttpInfo(numRows, pageIndex, filter, countryId, localityTypeId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="countryId"> (optional)</param>
        /// <param name="localityTypeId"> (optional)</param>
        /// <returns>ApiResponse of PagedLocalityLiteModel</returns>
        public ApiResponse<PagedLocalityLiteModel> GetPageLocalityByFilterWithHttpInfo(int? numRows, int? pageIndex, string filter = null, Guid? countryId = null, Guid? localityTypeId = null)
        {
            // verify the required parameter 'numRows' is set
            if (numRows == null)
                throw new ApiException(400, "Missing required parameter 'numRows' when calling LocalityApi->GetPageLocalityByFilter");
            // verify the required parameter 'pageIndex' is set
            if (pageIndex == null)
                throw new ApiException(400, "Missing required parameter 'pageIndex' when calling LocalityApi->GetPageLocalityByFilter");

            var localVarPath = "/locality/pageByFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (countryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "countryId", countryId)); // query parameter
            if (localityTypeId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "localityTypeId", localityTypeId)); // query parameter
            if (numRows != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "numRows", numRows)); // query parameter
            if (pageIndex != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageIndex", pageIndex)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageLocalityByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedLocalityLiteModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedLocalityLiteModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedLocalityLiteModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="countryId"> (optional)</param>
        /// <param name="localityTypeId"> (optional)</param>
        /// <returns>Task of PagedLocalityLiteModel</returns>
        public async System.Threading.Tasks.Task<PagedLocalityLiteModel> GetPageLocalityByFilterAsync(int? numRows, int? pageIndex, string filter = null, Guid? countryId = null, Guid? localityTypeId = null)
        {
            ApiResponse<PagedLocalityLiteModel> localVarResponse = await GetPageLocalityByFilterAsyncWithHttpInfo(numRows, pageIndex, filter, countryId, localityTypeId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="filter"> (optional)</param>
        /// <param name="countryId"> (optional)</param>
        /// <param name="localityTypeId"> (optional)</param>
        /// <returns>Task of ApiResponse (PagedLocalityLiteModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedLocalityLiteModel>> GetPageLocalityByFilterAsyncWithHttpInfo(int? numRows, int? pageIndex, string filter = null, Guid? countryId = null, Guid? localityTypeId = null)
        {
            // verify the required parameter 'numRows' is set
            if (numRows == null)
                throw new ApiException(400, "Missing required parameter 'numRows' when calling LocalityApi->GetPageLocalityByFilter");
            // verify the required parameter 'pageIndex' is set
            if (pageIndex == null)
                throw new ApiException(400, "Missing required parameter 'pageIndex' when calling LocalityApi->GetPageLocalityByFilter");

            var localVarPath = "/locality/pageByFilter";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (countryId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "countryId", countryId)); // query parameter
            if (localityTypeId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "localityTypeId", localityTypeId)); // query parameter
            if (numRows != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "numRows", numRows)); // query parameter
            if (pageIndex != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageIndex", pageIndex)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageLocalityByFilter", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedLocalityLiteModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedLocalityLiteModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedLocalityLiteModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void LocalityDeleteSystemReference(Guid id)
        {
            LocalityDeleteSystemReferenceWithHttpInfo(id);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LocalityDeleteSystemReferenceWithHttpInfo(Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == default(Guid))
                throw new ApiException(400, "Missing required parameter 'id' when calling LocalityApi->LocalityDeleteSystemReference");

            var localVarPath = "/locality/systemReference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != default(Guid)) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LocalityDeleteSystemReference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LocalityDeleteSystemReferenceAsync(Guid id)
        {
            await LocalityDeleteSystemReferenceAsyncWithHttpInfo(id);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LocalityDeleteSystemReferenceAsyncWithHttpInfo(Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == default(Guid))
                throw new ApiException(400, "Missing required parameter 'id' when calling LocalityApi->LocalityDeleteSystemReference");

            var localVarPath = "/locality/systemReference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != default(Guid)) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LocalityDeleteSystemReference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void LocalitySaveSystemReference(Guid id)
        {
            LocalitySaveSystemReferenceWithHttpInfo(id);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LocalitySaveSystemReferenceWithHttpInfo(Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == default(Guid))
                throw new ApiException(400, "Missing required parameter 'id' when calling LocalityApi->LocalitySaveSystemReference");

            var localVarPath = "/locality/systemReference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != default(Guid)) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LocalitySaveSystemReference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LocalitySaveSystemReferenceAsync(Guid id)
        {
            await LocalitySaveSystemReferenceAsyncWithHttpInfo(id);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LocalitySaveSystemReferenceAsyncWithHttpInfo(Guid id)
        {
            // verify the required parameter 'id' is set
            if (id == default(Guid))
                throw new ApiException(400, "Missing required parameter 'id' when calling LocalityApi->LocalitySaveSystemReference");

            var localVarPath = "/locality/systemReference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != default(Guid)) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("LocalitySaveSystemReference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }
    }
}
/*
 * People Management API - BRA
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Iatec.Adems.PeopleManagement.Client.Model;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace Iatec.Adems.PeopleManagement.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INaturalPersonAllergyApi : IApiAccessor
    {
        #region Synchronous Operations

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>List&lt;NaturalPersonAllergyLiteModel&gt;</returns>
        List<NaturalPersonAllergyLiteModel> GetListNaturalPersonAllergyByNaturalPerson(Guid? naturalPersonId);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>ApiResponse of List&lt;NaturalPersonAllergyLiteModel&gt;</returns>
        ApiResponse<List<NaturalPersonAllergyLiteModel>> GetListNaturalPersonAllergyByNaturalPersonWithHttpInfo(Guid? naturalPersonId);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>List&lt;NaturalPersonAllergyLiteModel&gt;</returns>
        List<NaturalPersonAllergyLiteModel> GetListNaturalPersonAllergyByNaturalPersonIdList(List<Guid> naturalPersonIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>ApiResponse of List&lt;NaturalPersonAllergyLiteModel&gt;</returns>
        ApiResponse<List<NaturalPersonAllergyLiteModel>> GetListNaturalPersonAllergyByNaturalPersonIdListWithHttpInfo(List<Guid> naturalPersonIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allergyTypeId"></param>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>List&lt;NaturalPersonAllergyLiteModel&gt;</returns>
        List<NaturalPersonAllergyLiteModel> GetListNaturalPersonAllergyByTypeAndNaturalPersonIdList(Guid? allergyTypeId, List<Guid> naturalPersonIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allergyTypeId"></param>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>ApiResponse of List&lt;NaturalPersonAllergyLiteModel&gt;</returns>
        ApiResponse<List<NaturalPersonAllergyLiteModel>> GetListNaturalPersonAllergyByTypeAndNaturalPersonIdListWithHttpInfo(Guid? allergyTypeId, List<Guid> naturalPersonIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>NaturalPersonAllergyLiteModel</returns>
        NaturalPersonAllergyLiteModel GetNaturalPersonAllergyById(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of NaturalPersonAllergyLiteModel</returns>
        ApiResponse<NaturalPersonAllergyLiteModel> GetNaturalPersonAllergyByIdWithHttpInfo(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void NaturalPersonAllergyDeleteNaturalPerson(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> NaturalPersonAllergyDeleteNaturalPersonWithHttpInfo(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonAllergy"> (optional)</param>
        /// <returns>NaturalPersonAllergyLiteModel</returns>
        NaturalPersonAllergyLiteModel SaveNaturalPersonAllergy(NaturalPersonAllergyLiteModel naturalPersonAllergy = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonAllergy"> (optional)</param>
        /// <returns>ApiResponse of NaturalPersonAllergyLiteModel</returns>
        ApiResponse<NaturalPersonAllergyLiteModel> SaveNaturalPersonAllergyWithHttpInfo(NaturalPersonAllergyLiteModel naturalPersonAllergy = null);

        #endregion Synchronous Operations

        #region Asynchronous Operations

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>Task of List&lt;NaturalPersonAllergyLiteModel&gt;</returns>
        System.Threading.Tasks.Task<List<NaturalPersonAllergyLiteModel>> GetListNaturalPersonAllergyByNaturalPersonAsync(Guid? naturalPersonId);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>Task of ApiResponse (List&lt;NaturalPersonAllergyLiteModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NaturalPersonAllergyLiteModel>>> GetListNaturalPersonAllergyByNaturalPersonAsyncWithHttpInfo(Guid? naturalPersonId);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>Task of List&lt;NaturalPersonAllergyLiteModel&gt;</returns>
        System.Threading.Tasks.Task<List<NaturalPersonAllergyLiteModel>> GetListNaturalPersonAllergyByNaturalPersonIdListAsync(List<Guid> naturalPersonIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;NaturalPersonAllergyLiteModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NaturalPersonAllergyLiteModel>>> GetListNaturalPersonAllergyByNaturalPersonIdListAsyncWithHttpInfo(List<Guid> naturalPersonIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allergyTypeId"></param>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>Task of List&lt;NaturalPersonAllergyLiteModel&gt;</returns>
        System.Threading.Tasks.Task<List<NaturalPersonAllergyLiteModel>> GetListNaturalPersonAllergyByTypeAndNaturalPersonIdListAsync(Guid? allergyTypeId, List<Guid> naturalPersonIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allergyTypeId"></param>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;NaturalPersonAllergyLiteModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NaturalPersonAllergyLiteModel>>> GetListNaturalPersonAllergyByTypeAndNaturalPersonIdListAsyncWithHttpInfo(Guid? allergyTypeId, List<Guid> naturalPersonIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of NaturalPersonAllergyLiteModel</returns>
        System.Threading.Tasks.Task<NaturalPersonAllergyLiteModel> GetNaturalPersonAllergyByIdAsync(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (NaturalPersonAllergyLiteModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<NaturalPersonAllergyLiteModel>> GetNaturalPersonAllergyByIdAsyncWithHttpInfo(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task NaturalPersonAllergyDeleteNaturalPersonAsync(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> NaturalPersonAllergyDeleteNaturalPersonAsyncWithHttpInfo(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonAllergy"> (optional)</param>
        /// <returns>Task of NaturalPersonAllergyLiteModel</returns>
        System.Threading.Tasks.Task<NaturalPersonAllergyLiteModel> SaveNaturalPersonAllergyAsync(NaturalPersonAllergyLiteModel naturalPersonAllergy = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonAllergy"> (optional)</param>
        /// <returns>Task of ApiResponse (NaturalPersonAllergyLiteModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<NaturalPersonAllergyLiteModel>> SaveNaturalPersonAllergyAsyncWithHttpInfo(NaturalPersonAllergyLiteModel naturalPersonAllergy = null);

        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NaturalPersonAllergyApi : INaturalPersonAllergyApi
    {
        private Iatec.Adems.PeopleManagement.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NaturalPersonAllergyApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NaturalPersonAllergyApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Iatec.Adems.PeopleManagement.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NaturalPersonAllergyApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NaturalPersonAllergyApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Iatec.Adems.PeopleManagement.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Iatec.Adems.PeopleManagement.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>List&lt;NaturalPersonAllergyLiteModel&gt;</returns>
        public List<NaturalPersonAllergyLiteModel> GetListNaturalPersonAllergyByNaturalPerson(Guid? naturalPersonId)
        {
            ApiResponse<List<NaturalPersonAllergyLiteModel>> localVarResponse = GetListNaturalPersonAllergyByNaturalPersonWithHttpInfo(naturalPersonId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>ApiResponse of List&lt;NaturalPersonAllergyLiteModel&gt;</returns>
        public ApiResponse<List<NaturalPersonAllergyLiteModel>> GetListNaturalPersonAllergyByNaturalPersonWithHttpInfo(Guid? naturalPersonId)
        {
            // verify the required parameter 'naturalPersonId' is set
            if (naturalPersonId == null)
                throw new ApiException(400, "Missing required parameter 'naturalPersonId' when calling NaturalPersonAllergyApi->GetListNaturalPersonAllergyByNaturalPerson");

            var localVarPath = "/naturalPersonAllergy/byNaturalPerson";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (naturalPersonId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "naturalPersonId", naturalPersonId)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListNaturalPersonAllergyByNaturalPerson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NaturalPersonAllergyLiteModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<NaturalPersonAllergyLiteModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NaturalPersonAllergyLiteModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>Task of List&lt;NaturalPersonAllergyLiteModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<NaturalPersonAllergyLiteModel>> GetListNaturalPersonAllergyByNaturalPersonAsync(Guid? naturalPersonId)
        {
            ApiResponse<List<NaturalPersonAllergyLiteModel>> localVarResponse = await GetListNaturalPersonAllergyByNaturalPersonAsyncWithHttpInfo(naturalPersonId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>Task of ApiResponse (List&lt;NaturalPersonAllergyLiteModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NaturalPersonAllergyLiteModel>>> GetListNaturalPersonAllergyByNaturalPersonAsyncWithHttpInfo(Guid? naturalPersonId)
        {
            // verify the required parameter 'naturalPersonId' is set
            if (naturalPersonId == null)
                throw new ApiException(400, "Missing required parameter 'naturalPersonId' when calling NaturalPersonAllergyApi->GetListNaturalPersonAllergyByNaturalPerson");

            var localVarPath = "/naturalPersonAllergy/byNaturalPerson";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (naturalPersonId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "naturalPersonId", naturalPersonId)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListNaturalPersonAllergyByNaturalPerson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NaturalPersonAllergyLiteModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<NaturalPersonAllergyLiteModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NaturalPersonAllergyLiteModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>List&lt;NaturalPersonAllergyLiteModel&gt;</returns>
        public List<NaturalPersonAllergyLiteModel> GetListNaturalPersonAllergyByNaturalPersonIdList(List<Guid> naturalPersonIdList = null)
        {
            ApiResponse<List<NaturalPersonAllergyLiteModel>> localVarResponse = GetListNaturalPersonAllergyByNaturalPersonIdListWithHttpInfo(naturalPersonIdList);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>ApiResponse of List&lt;NaturalPersonAllergyLiteModel&gt;</returns>
        public ApiResponse<List<NaturalPersonAllergyLiteModel>> GetListNaturalPersonAllergyByNaturalPersonIdListWithHttpInfo(List<Guid> naturalPersonIdList = null)
        {
            var localVarPath = "/naturalPersonAllergy/byNaturalPersonIdList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (naturalPersonIdList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "naturalPersonIdList", naturalPersonIdList)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListNaturalPersonAllergyByNaturalPersonIdList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NaturalPersonAllergyLiteModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<NaturalPersonAllergyLiteModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NaturalPersonAllergyLiteModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>Task of List&lt;NaturalPersonAllergyLiteModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<NaturalPersonAllergyLiteModel>> GetListNaturalPersonAllergyByNaturalPersonIdListAsync(List<Guid> naturalPersonIdList = null)
        {
            ApiResponse<List<NaturalPersonAllergyLiteModel>> localVarResponse = await GetListNaturalPersonAllergyByNaturalPersonIdListAsyncWithHttpInfo(naturalPersonIdList);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;NaturalPersonAllergyLiteModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NaturalPersonAllergyLiteModel>>> GetListNaturalPersonAllergyByNaturalPersonIdListAsyncWithHttpInfo(List<Guid> naturalPersonIdList = null)
        {
            var localVarPath = "/naturalPersonAllergy/byNaturalPersonIdList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (naturalPersonIdList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "naturalPersonIdList", naturalPersonIdList)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListNaturalPersonAllergyByNaturalPersonIdList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NaturalPersonAllergyLiteModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<NaturalPersonAllergyLiteModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NaturalPersonAllergyLiteModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allergyTypeId"></param>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>List&lt;NaturalPersonAllergyLiteModel&gt;</returns>
        public List<NaturalPersonAllergyLiteModel> GetListNaturalPersonAllergyByTypeAndNaturalPersonIdList(Guid? allergyTypeId, List<Guid> naturalPersonIdList = null)
        {
            ApiResponse<List<NaturalPersonAllergyLiteModel>> localVarResponse = GetListNaturalPersonAllergyByTypeAndNaturalPersonIdListWithHttpInfo(allergyTypeId, naturalPersonIdList);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allergyTypeId"></param>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>ApiResponse of List&lt;NaturalPersonAllergyLiteModel&gt;</returns>
        public ApiResponse<List<NaturalPersonAllergyLiteModel>> GetListNaturalPersonAllergyByTypeAndNaturalPersonIdListWithHttpInfo(Guid? allergyTypeId, List<Guid> naturalPersonIdList = null)
        {
            // verify the required parameter 'allergyTypeId' is set
            if (allergyTypeId == null)
                throw new ApiException(400, "Missing required parameter 'allergyTypeId' when calling NaturalPersonAllergyApi->GetListNaturalPersonAllergyByTypeAndNaturalPersonIdList");

            var localVarPath = "/naturalPersonAllergy/byTypeAndNaturalPersonIdList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (allergyTypeId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "allergyTypeId", allergyTypeId)); // query parameter
            if (naturalPersonIdList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "naturalPersonIdList", naturalPersonIdList)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListNaturalPersonAllergyByTypeAndNaturalPersonIdList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NaturalPersonAllergyLiteModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<NaturalPersonAllergyLiteModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NaturalPersonAllergyLiteModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allergyTypeId"></param>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>Task of List&lt;NaturalPersonAllergyLiteModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<NaturalPersonAllergyLiteModel>> GetListNaturalPersonAllergyByTypeAndNaturalPersonIdListAsync(Guid? allergyTypeId, List<Guid> naturalPersonIdList = null)
        {
            ApiResponse<List<NaturalPersonAllergyLiteModel>> localVarResponse = await GetListNaturalPersonAllergyByTypeAndNaturalPersonIdListAsyncWithHttpInfo(allergyTypeId, naturalPersonIdList);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="allergyTypeId"></param>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;NaturalPersonAllergyLiteModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NaturalPersonAllergyLiteModel>>> GetListNaturalPersonAllergyByTypeAndNaturalPersonIdListAsyncWithHttpInfo(Guid? allergyTypeId, List<Guid> naturalPersonIdList = null)
        {
            // verify the required parameter 'allergyTypeId' is set
            if (allergyTypeId == null)
                throw new ApiException(400, "Missing required parameter 'allergyTypeId' when calling NaturalPersonAllergyApi->GetListNaturalPersonAllergyByTypeAndNaturalPersonIdList");

            var localVarPath = "/naturalPersonAllergy/byTypeAndNaturalPersonIdList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (allergyTypeId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "allergyTypeId", allergyTypeId)); // query parameter
            if (naturalPersonIdList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "naturalPersonIdList", naturalPersonIdList)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListNaturalPersonAllergyByTypeAndNaturalPersonIdList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NaturalPersonAllergyLiteModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<NaturalPersonAllergyLiteModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NaturalPersonAllergyLiteModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>NaturalPersonAllergyLiteModel</returns>
        public NaturalPersonAllergyLiteModel GetNaturalPersonAllergyById(Guid? id)
        {
            ApiResponse<NaturalPersonAllergyLiteModel> localVarResponse = GetNaturalPersonAllergyByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of NaturalPersonAllergyLiteModel</returns>
        public ApiResponse<NaturalPersonAllergyLiteModel> GetNaturalPersonAllergyByIdWithHttpInfo(Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling NaturalPersonAllergyApi->GetNaturalPersonAllergyById");

            var localVarPath = "/naturalPersonAllergy/byId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNaturalPersonAllergyById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NaturalPersonAllergyLiteModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NaturalPersonAllergyLiteModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(NaturalPersonAllergyLiteModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of NaturalPersonAllergyLiteModel</returns>
        public async System.Threading.Tasks.Task<NaturalPersonAllergyLiteModel> GetNaturalPersonAllergyByIdAsync(Guid? id)
        {
            ApiResponse<NaturalPersonAllergyLiteModel> localVarResponse = await GetNaturalPersonAllergyByIdAsyncWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (NaturalPersonAllergyLiteModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NaturalPersonAllergyLiteModel>> GetNaturalPersonAllergyByIdAsyncWithHttpInfo(Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling NaturalPersonAllergyApi->GetNaturalPersonAllergyById");

            var localVarPath = "/naturalPersonAllergy/byId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNaturalPersonAllergyById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NaturalPersonAllergyLiteModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NaturalPersonAllergyLiteModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(NaturalPersonAllergyLiteModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void NaturalPersonAllergyDeleteNaturalPerson(Guid? id)
        {
            NaturalPersonAllergyDeleteNaturalPersonWithHttpInfo(id);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> NaturalPersonAllergyDeleteNaturalPersonWithHttpInfo(Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling NaturalPersonAllergyApi->NaturalPersonAllergyDeleteNaturalPerson");

            var localVarPath = "/naturalPersonAllergy/naturalPerson";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NaturalPersonAllergyDeleteNaturalPerson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task NaturalPersonAllergyDeleteNaturalPersonAsync(Guid? id)
        {
            await NaturalPersonAllergyDeleteNaturalPersonAsyncWithHttpInfo(id);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> NaturalPersonAllergyDeleteNaturalPersonAsyncWithHttpInfo(Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling NaturalPersonAllergyApi->NaturalPersonAllergyDeleteNaturalPerson");

            var localVarPath = "/naturalPersonAllergy/naturalPerson";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NaturalPersonAllergyDeleteNaturalPerson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonAllergy"> (optional)</param>
        /// <returns>NaturalPersonAllergyLiteModel</returns>
        public NaturalPersonAllergyLiteModel SaveNaturalPersonAllergy(NaturalPersonAllergyLiteModel naturalPersonAllergy = null)
        {
            ApiResponse<NaturalPersonAllergyLiteModel> localVarResponse = SaveNaturalPersonAllergyWithHttpInfo(naturalPersonAllergy);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonAllergy"> (optional)</param>
        /// <returns>ApiResponse of NaturalPersonAllergyLiteModel</returns>
        public ApiResponse<NaturalPersonAllergyLiteModel> SaveNaturalPersonAllergyWithHttpInfo(NaturalPersonAllergyLiteModel naturalPersonAllergy = null)
        {
            var localVarPath = "/naturalPersonAllergy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (naturalPersonAllergy != null && naturalPersonAllergy.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(naturalPersonAllergy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = naturalPersonAllergy; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveNaturalPersonAllergy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NaturalPersonAllergyLiteModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NaturalPersonAllergyLiteModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(NaturalPersonAllergyLiteModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonAllergy"> (optional)</param>
        /// <returns>Task of NaturalPersonAllergyLiteModel</returns>
        public async System.Threading.Tasks.Task<NaturalPersonAllergyLiteModel> SaveNaturalPersonAllergyAsync(NaturalPersonAllergyLiteModel naturalPersonAllergy = null)
        {
            ApiResponse<NaturalPersonAllergyLiteModel> localVarResponse = await SaveNaturalPersonAllergyAsyncWithHttpInfo(naturalPersonAllergy);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonAllergy"> (optional)</param>
        /// <returns>Task of ApiResponse (NaturalPersonAllergyLiteModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NaturalPersonAllergyLiteModel>> SaveNaturalPersonAllergyAsyncWithHttpInfo(NaturalPersonAllergyLiteModel naturalPersonAllergy = null)
        {
            var localVarPath = "/naturalPersonAllergy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (naturalPersonAllergy != null && naturalPersonAllergy.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(naturalPersonAllergy); // http body (model) parameter
            }
            else
            {
                localVarPostBody = naturalPersonAllergy; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveNaturalPersonAllergy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NaturalPersonAllergyLiteModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NaturalPersonAllergyLiteModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(NaturalPersonAllergyLiteModel)));
        }
    }
}
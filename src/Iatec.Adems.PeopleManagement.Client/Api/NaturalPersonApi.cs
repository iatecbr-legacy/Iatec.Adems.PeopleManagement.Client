/*
 * People Management API - BRA
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Iatec.Adems.PeopleManagement.Client.Model;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace Iatec.Adems.PeopleManagement.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INaturalPersonApi : IApiAccessor
    {
        #region Synchronous Operations

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId"></param>
        /// <param name="docNumber"> (optional)</param>
        /// <returns>NaturalPersonLiteExternalModel</returns>
        NaturalPersonLiteExternalModel GetByDocument(Guid? documentTypeId, string docNumber = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId"></param>
        /// <param name="docNumber"> (optional)</param>
        /// <returns>ApiResponse of NaturalPersonLiteExternalModel</returns>
        ApiResponse<NaturalPersonLiteExternalModel> GetByDocumentWithHttpInfo(Guid? documentTypeId, string docNumber = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>NaturalPersonLiteExternalModel</returns>
        NaturalPersonLiteExternalModel GetByIdForExternal(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of NaturalPersonLiteExternalModel</returns>
        ApiResponse<NaturalPersonLiteExternalModel> GetByIdForExternalWithHttpInfo(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifierDocumentNumber"> (optional)</param>
        /// <returns>NaturalPersonLiteExternalModel</returns>
        NaturalPersonLiteExternalModel GetByIdentifierDocumentNumberLiteExternal(string identifierDocumentNumber = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifierDocumentNumber"> (optional)</param>
        /// <returns>ApiResponse of NaturalPersonLiteExternalModel</returns>
        ApiResponse<NaturalPersonLiteExternalModel> GetByIdentifierDocumentNumberLiteExternalWithHttpInfo(string identifierDocumentNumber = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName"> (optional)</param>
        /// <returns>NaturalPersonLiteExternalModel</returns>
        NaturalPersonLiteExternalModel GetByUserName(string userName = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName"> (optional)</param>
        /// <returns>ApiResponse of NaturalPersonLiteExternalModel</returns>
        ApiResponse<NaturalPersonLiteExternalModel> GetByUserNameWithHttpInfo(string userName = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basicPropertyList"> (optional)</param>
        /// <returns>List&lt;NaturalPersonLiteExternalModel&gt;</returns>
        List<NaturalPersonLiteExternalModel> GetListByBasicPropertyList(List<NPBasicPropertyModel> basicPropertyList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basicPropertyList"> (optional)</param>
        /// <returns>ApiResponse of List&lt;NaturalPersonLiteExternalModel&gt;</returns>
        ApiResponse<List<NaturalPersonLiteExternalModel>> GetListByBasicPropertyListWithHttpInfo(List<NPBasicPropertyModel> basicPropertyList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId"></param>
        /// <param name="docNumber"> (optional)</param>
        /// <returns>List&lt;NaturalPersonLiteExternalModel&gt;</returns>
        List<NaturalPersonLiteExternalModel> GetListByDocument(Guid? documentTypeId, string docNumber = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId"></param>
        /// <param name="docNumber"> (optional)</param>
        /// <returns>ApiResponse of List&lt;NaturalPersonLiteExternalModel&gt;</returns>
        ApiResponse<List<NaturalPersonLiteExternalModel>> GetListByDocumentWithHttpInfo(Guid? documentTypeId, string docNumber = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>List&lt;NaturalPersonLiteExternalModel&gt;</returns>
        List<NaturalPersonLiteExternalModel> GetListByIdListForExternal(List<Guid> idList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>ApiResponse of List&lt;NaturalPersonLiteExternalModel&gt;</returns>
        ApiResponse<List<NaturalPersonLiteExternalModel>> GetListByIdListForExternalWithHttpInfo(List<Guid> idList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"></param>
        /// <returns>List&lt;NaturalPersonLiteExternalModel&gt;</returns>
        List<NaturalPersonLiteExternalModel> GetListByLastUpdate(string lastUpdate);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"></param>
        /// <returns>ApiResponse of List&lt;NaturalPersonLiteExternalModel&gt;</returns>
        ApiResponse<List<NaturalPersonLiteExternalModel>> GetListByLastUpdateWithHttpInfo(string lastUpdate);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentNumberList"> (optional)</param>
        /// <param name="documentTypeIdList"> (optional)</param>
        /// <returns>List&lt;NaturalPersonLiteExternalModel&gt;</returns>
        List<NaturalPersonLiteExternalModel> GetListNaturalPersonByDocumentNumberList(List<string> documentNumberList = null, List<Guid> documentTypeIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentNumberList"> (optional)</param>
        /// <param name="documentTypeIdList"> (optional)</param>
        /// <returns>ApiResponse of List&lt;NaturalPersonLiteExternalModel&gt;</returns>
        ApiResponse<List<NaturalPersonLiteExternalModel>> GetListNaturalPersonByDocumentNumberListWithHttpInfo(List<string> documentNumberList = null, List<Guid> documentTypeIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;NaturalPersonSystemUpdateLiteModel&gt;</returns>
        List<NaturalPersonSystemUpdateLiteModel> GetListNaturalPersonLastSystemUpdate();

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;NaturalPersonSystemUpdateLiteModel&gt;</returns>
        ApiResponse<List<NaturalPersonSystemUpdateLiteModel>> GetListNaturalPersonLastSystemUpdateWithHttpInfo();

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="birthDate"> (optional)</param>
        /// <param name="gender"> (optional)</param>
        /// <param name="documentTypeId"> (optional)</param>
        /// <param name="documentNumber"> (optional)</param>
        /// <param name="parentName"> (optional)</param>
        /// <returns>PagedNaturalPersonLiteExternalModel</returns>
        PagedNaturalPersonLiteExternalModel GetPageActiveByFilterForExternal(int? numRows, int? pageIndex, string name = null, string birthDate = null, GenderModel gender = null, Guid? documentTypeId = null, string documentNumber = null, string parentName = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="birthDate"> (optional)</param>
        /// <param name="gender"> (optional)</param>
        /// <param name="documentTypeId"> (optional)</param>
        /// <param name="documentNumber"> (optional)</param>
        /// <param name="parentName"> (optional)</param>
        /// <returns>ApiResponse of PagedNaturalPersonLiteExternalModel</returns>
        ApiResponse<PagedNaturalPersonLiteExternalModel> GetPageActiveByFilterForExternalWithHttpInfo(int? numRows, int? pageIndex, string name = null, string birthDate = null, GenderModel gender = null, Guid? documentTypeId = null, string documentNumber = null, string parentName = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="birthDate"></param>
        /// <param name="gender"></param>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="firstName"> (optional)</param>
        /// <param name="middleName"> (optional)</param>
        /// <param name="lastName"> (optional)</param>
        /// <param name="motherName"> (optional)</param>
        /// <param name="identifierDocumentNumber"> (optional)</param>
        /// <returns>PagedNaturalPersonLiteExternalModel</returns>
        PagedNaturalPersonLiteExternalModel GetPageActiveByFilterForExternal2(string birthDate, GenderModel gender, int? numRows, int? pageIndex, string firstName = null, string middleName = null, string lastName = null, string motherName = null, string identifierDocumentNumber = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="birthDate"></param>
        /// <param name="gender"></param>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="firstName"> (optional)</param>
        /// <param name="middleName"> (optional)</param>
        /// <param name="lastName"> (optional)</param>
        /// <param name="motherName"> (optional)</param>
        /// <param name="identifierDocumentNumber"> (optional)</param>
        /// <returns>ApiResponse of PagedNaturalPersonLiteExternalModel</returns>
        ApiResponse<PagedNaturalPersonLiteExternalModel> GetPageActiveByFilterForExternal2WithHttpInfo(string birthDate, GenderModel gender, int? numRows, int? pageIndex, string firstName = null, string middleName = null, string lastName = null, string motherName = null, string identifierDocumentNumber = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <returns>PagedNaturalPersonLiteExternalModel</returns>
        PagedNaturalPersonLiteExternalModel GetPageSimilarActiveById(Guid? naturalPersonId, int? numRows, int? pageIndex);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <returns>ApiResponse of PagedNaturalPersonLiteExternalModel</returns>
        ApiResponse<PagedNaturalPersonLiteExternalModel> GetPageSimilarActiveByIdWithHttpInfo(Guid? naturalPersonId, int? numRows, int? pageIndex);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="birthDate"></param>
        /// <param name="gender"></param>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="firstName"> (optional)</param>
        /// <param name="middleName"> (optional)</param>
        /// <param name="lastName"> (optional)</param>
        /// <param name="motherName"> (optional)</param>
        /// <param name="identifierDocumentNumber"> (optional)</param>
        /// <returns>PagedNaturalPersonLiteExternalModel</returns>
        PagedNaturalPersonLiteExternalModel GetPageSimilarActiveForExternal(string birthDate, GenderModel gender, int? numRows, int? pageIndex, string firstName = null, string middleName = null, string lastName = null, string motherName = null, string identifierDocumentNumber = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="birthDate"></param>
        /// <param name="gender"></param>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="firstName"> (optional)</param>
        /// <param name="middleName"> (optional)</param>
        /// <param name="lastName"> (optional)</param>
        /// <param name="motherName"> (optional)</param>
        /// <param name="identifierDocumentNumber"> (optional)</param>
        /// <returns>ApiResponse of PagedNaturalPersonLiteExternalModel</returns>
        ApiResponse<PagedNaturalPersonLiteExternalModel> GetPageSimilarActiveForExternalWithHttpInfo(string birthDate, GenderModel gender, int? numRows, int? pageIndex, string firstName = null, string middleName = null, string lastName = null, string motherName = null, string identifierDocumentNumber = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="birthDate"></param>
        /// <param name="fullName"> (optional)</param>
        /// <param name="motherName"> (optional)</param>
        /// <returns>NaturalPersonLiteExternalModel</returns>
        NaturalPersonLiteExternalModel GetSimilarLiteExternal(string birthDate, string fullName = null, string motherName = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="birthDate"></param>
        /// <param name="fullName"> (optional)</param>
        /// <param name="motherName"> (optional)</param>
        /// <returns>ApiResponse of NaturalPersonLiteExternalModel</returns>
        ApiResponse<NaturalPersonLiteExternalModel> GetSimilarLiteExternalWithHttpInfo(string birthDate, string fullName = null, string motherName = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns></returns>
        void NaturalPersonDeleteNaturalPerson(List<Guid> naturalPersonIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> NaturalPersonDeleteNaturalPersonWithHttpInfo(List<Guid> naturalPersonIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns></returns>
        void NaturalPersonSaveSystemReference(List<Guid> naturalPersonIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> NaturalPersonSaveSystemReferenceWithHttpInfo(List<Guid> naturalPersonIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns></returns>
        void NaturalPersonUpdateNotice(List<Guid> naturalPersonIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> NaturalPersonUpdateNoticeWithHttpInfo(List<Guid> naturalPersonIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPerson"> (optional)</param>
        /// <returns>NaturalPersonLiteExternalModel</returns>
        NaturalPersonLiteExternalModel SaveForExternal(NaturalPersonLiteExternalModel naturalPerson = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPerson"> (optional)</param>
        /// <returns>ApiResponse of NaturalPersonLiteExternalModel</returns>
        ApiResponse<NaturalPersonLiteExternalModel> SaveForExternalWithHttpInfo(NaturalPersonLiteExternalModel naturalPerson = null);

        #endregion Synchronous Operations

        #region Asynchronous Operations

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId"></param>
        /// <param name="docNumber"> (optional)</param>
        /// <returns>Task of NaturalPersonLiteExternalModel</returns>
        System.Threading.Tasks.Task<NaturalPersonLiteExternalModel> GetByDocumentAsync(Guid? documentTypeId, string docNumber = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId"></param>
        /// <param name="docNumber"> (optional)</param>
        /// <returns>Task of ApiResponse (NaturalPersonLiteExternalModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<NaturalPersonLiteExternalModel>> GetByDocumentAsyncWithHttpInfo(Guid? documentTypeId, string docNumber = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of NaturalPersonLiteExternalModel</returns>
        System.Threading.Tasks.Task<NaturalPersonLiteExternalModel> GetByIdForExternalAsync(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (NaturalPersonLiteExternalModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<NaturalPersonLiteExternalModel>> GetByIdForExternalAsyncWithHttpInfo(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifierDocumentNumber"> (optional)</param>
        /// <returns>Task of NaturalPersonLiteExternalModel</returns>
        System.Threading.Tasks.Task<NaturalPersonLiteExternalModel> GetByIdentifierDocumentNumberLiteExternalAsync(string identifierDocumentNumber = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifierDocumentNumber"> (optional)</param>
        /// <returns>Task of ApiResponse (NaturalPersonLiteExternalModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<NaturalPersonLiteExternalModel>> GetByIdentifierDocumentNumberLiteExternalAsyncWithHttpInfo(string identifierDocumentNumber = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName"> (optional)</param>
        /// <returns>Task of NaturalPersonLiteExternalModel</returns>
        System.Threading.Tasks.Task<NaturalPersonLiteExternalModel> GetByUserNameAsync(string userName = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName"> (optional)</param>
        /// <returns>Task of ApiResponse (NaturalPersonLiteExternalModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<NaturalPersonLiteExternalModel>> GetByUserNameAsyncWithHttpInfo(string userName = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basicPropertyList"> (optional)</param>
        /// <returns>Task of List&lt;NaturalPersonLiteExternalModel&gt;</returns>
        System.Threading.Tasks.Task<List<NaturalPersonLiteExternalModel>> GetListByBasicPropertyListAsync(List<NPBasicPropertyModel> basicPropertyList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basicPropertyList"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;NaturalPersonLiteExternalModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NaturalPersonLiteExternalModel>>> GetListByBasicPropertyListAsyncWithHttpInfo(List<NPBasicPropertyModel> basicPropertyList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId"></param>
        /// <param name="docNumber"> (optional)</param>
        /// <returns>Task of List&lt;NaturalPersonLiteExternalModel&gt;</returns>
        System.Threading.Tasks.Task<List<NaturalPersonLiteExternalModel>> GetListByDocumentAsync(Guid? documentTypeId, string docNumber = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId"></param>
        /// <param name="docNumber"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;NaturalPersonLiteExternalModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NaturalPersonLiteExternalModel>>> GetListByDocumentAsyncWithHttpInfo(Guid? documentTypeId, string docNumber = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>Task of List&lt;NaturalPersonLiteExternalModel&gt;</returns>
        System.Threading.Tasks.Task<List<NaturalPersonLiteExternalModel>> GetListByIdListForExternalAsync(List<Guid> idList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;NaturalPersonLiteExternalModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NaturalPersonLiteExternalModel>>> GetListByIdListForExternalAsyncWithHttpInfo(List<Guid> idList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"></param>
        /// <returns>Task of List&lt;NaturalPersonLiteExternalModel&gt;</returns>
        System.Threading.Tasks.Task<List<NaturalPersonLiteExternalModel>> GetListByLastUpdateAsync(string lastUpdate);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"></param>
        /// <returns>Task of ApiResponse (List&lt;NaturalPersonLiteExternalModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NaturalPersonLiteExternalModel>>> GetListByLastUpdateAsyncWithHttpInfo(string lastUpdate);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentNumberList"> (optional)</param>
        /// <param name="documentTypeIdList"> (optional)</param>
        /// <returns>Task of List&lt;NaturalPersonLiteExternalModel&gt;</returns>
        System.Threading.Tasks.Task<List<NaturalPersonLiteExternalModel>> GetListNaturalPersonByDocumentNumberListAsync(List<string> documentNumberList = null, List<Guid> documentTypeIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentNumberList"> (optional)</param>
        /// <param name="documentTypeIdList"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;NaturalPersonLiteExternalModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NaturalPersonLiteExternalModel>>> GetListNaturalPersonByDocumentNumberListAsyncWithHttpInfo(List<string> documentNumberList = null, List<Guid> documentTypeIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;NaturalPersonSystemUpdateLiteModel&gt;</returns>
        System.Threading.Tasks.Task<List<NaturalPersonSystemUpdateLiteModel>> GetListNaturalPersonLastSystemUpdateAsync();

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;NaturalPersonSystemUpdateLiteModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NaturalPersonSystemUpdateLiteModel>>> GetListNaturalPersonLastSystemUpdateAsyncWithHttpInfo();

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="birthDate"> (optional)</param>
        /// <param name="gender"> (optional)</param>
        /// <param name="documentTypeId"> (optional)</param>
        /// <param name="documentNumber"> (optional)</param>
        /// <param name="parentName"> (optional)</param>
        /// <returns>Task of PagedNaturalPersonLiteExternalModel</returns>
        System.Threading.Tasks.Task<PagedNaturalPersonLiteExternalModel> GetPageActiveByFilterForExternalAsync(int? numRows, int? pageIndex, string name = null, string birthDate = null, GenderModel gender = null, Guid? documentTypeId = null, string documentNumber = null, string parentName = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="birthDate"> (optional)</param>
        /// <param name="gender"> (optional)</param>
        /// <param name="documentTypeId"> (optional)</param>
        /// <param name="documentNumber"> (optional)</param>
        /// <param name="parentName"> (optional)</param>
        /// <returns>Task of ApiResponse (PagedNaturalPersonLiteExternalModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedNaturalPersonLiteExternalModel>> GetPageActiveByFilterForExternalAsyncWithHttpInfo(int? numRows, int? pageIndex, string name = null, string birthDate = null, GenderModel gender = null, Guid? documentTypeId = null, string documentNumber = null, string parentName = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="birthDate"></param>
        /// <param name="gender"></param>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="firstName"> (optional)</param>
        /// <param name="middleName"> (optional)</param>
        /// <param name="lastName"> (optional)</param>
        /// <param name="motherName"> (optional)</param>
        /// <param name="identifierDocumentNumber"> (optional)</param>
        /// <returns>Task of PagedNaturalPersonLiteExternalModel</returns>
        System.Threading.Tasks.Task<PagedNaturalPersonLiteExternalModel> GetPageActiveByFilterForExternal2Async(string birthDate, GenderModel gender, int? numRows, int? pageIndex, string firstName = null, string middleName = null, string lastName = null, string motherName = null, string identifierDocumentNumber = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="birthDate"></param>
        /// <param name="gender"></param>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="firstName"> (optional)</param>
        /// <param name="middleName"> (optional)</param>
        /// <param name="lastName"> (optional)</param>
        /// <param name="motherName"> (optional)</param>
        /// <param name="identifierDocumentNumber"> (optional)</param>
        /// <returns>Task of ApiResponse (PagedNaturalPersonLiteExternalModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedNaturalPersonLiteExternalModel>> GetPageActiveByFilterForExternal2AsyncWithHttpInfo(string birthDate, GenderModel gender, int? numRows, int? pageIndex, string firstName = null, string middleName = null, string lastName = null, string motherName = null, string identifierDocumentNumber = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <returns>Task of PagedNaturalPersonLiteExternalModel</returns>
        System.Threading.Tasks.Task<PagedNaturalPersonLiteExternalModel> GetPageSimilarActiveByIdAsync(Guid? naturalPersonId, int? numRows, int? pageIndex);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <returns>Task of ApiResponse (PagedNaturalPersonLiteExternalModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedNaturalPersonLiteExternalModel>> GetPageSimilarActiveByIdAsyncWithHttpInfo(Guid? naturalPersonId, int? numRows, int? pageIndex);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="birthDate"></param>
        /// <param name="gender"></param>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="firstName"> (optional)</param>
        /// <param name="middleName"> (optional)</param>
        /// <param name="lastName"> (optional)</param>
        /// <param name="motherName"> (optional)</param>
        /// <param name="identifierDocumentNumber"> (optional)</param>
        /// <returns>Task of PagedNaturalPersonLiteExternalModel</returns>
        System.Threading.Tasks.Task<PagedNaturalPersonLiteExternalModel> GetPageSimilarActiveForExternalAsync(string birthDate, GenderModel gender, int? numRows, int? pageIndex, string firstName = null, string middleName = null, string lastName = null, string motherName = null, string identifierDocumentNumber = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="birthDate"></param>
        /// <param name="gender"></param>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="firstName"> (optional)</param>
        /// <param name="middleName"> (optional)</param>
        /// <param name="lastName"> (optional)</param>
        /// <param name="motherName"> (optional)</param>
        /// <param name="identifierDocumentNumber"> (optional)</param>
        /// <returns>Task of ApiResponse (PagedNaturalPersonLiteExternalModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<PagedNaturalPersonLiteExternalModel>> GetPageSimilarActiveForExternalAsyncWithHttpInfo(string birthDate, GenderModel gender, int? numRows, int? pageIndex, string firstName = null, string middleName = null, string lastName = null, string motherName = null, string identifierDocumentNumber = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="birthDate"></param>
        /// <param name="fullName"> (optional)</param>
        /// <param name="motherName"> (optional)</param>
        /// <returns>Task of NaturalPersonLiteExternalModel</returns>
        System.Threading.Tasks.Task<NaturalPersonLiteExternalModel> GetSimilarLiteExternalAsync(string birthDate, string fullName = null, string motherName = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="birthDate"></param>
        /// <param name="fullName"> (optional)</param>
        /// <param name="motherName"> (optional)</param>
        /// <returns>Task of ApiResponse (NaturalPersonLiteExternalModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<NaturalPersonLiteExternalModel>> GetSimilarLiteExternalAsyncWithHttpInfo(string birthDate, string fullName = null, string motherName = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task NaturalPersonDeleteNaturalPersonAsync(List<Guid> naturalPersonIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> NaturalPersonDeleteNaturalPersonAsyncWithHttpInfo(List<Guid> naturalPersonIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task NaturalPersonSaveSystemReferenceAsync(List<Guid> naturalPersonIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> NaturalPersonSaveSystemReferenceAsyncWithHttpInfo(List<Guid> naturalPersonIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task NaturalPersonUpdateNoticeAsync(List<Guid> naturalPersonIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> NaturalPersonUpdateNoticeAsyncWithHttpInfo(List<Guid> naturalPersonIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPerson"> (optional)</param>
        /// <returns>Task of NaturalPersonLiteExternalModel</returns>
        System.Threading.Tasks.Task<NaturalPersonLiteExternalModel> SaveForExternalAsync(NaturalPersonLiteExternalModel naturalPerson = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPerson"> (optional)</param>
        /// <returns>Task of ApiResponse (NaturalPersonLiteExternalModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<NaturalPersonLiteExternalModel>> SaveForExternalAsyncWithHttpInfo(NaturalPersonLiteExternalModel naturalPerson = null);

        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NaturalPersonApi : INaturalPersonApi
    {
        private Iatec.Adems.PeopleManagement.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NaturalPersonApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NaturalPersonApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Iatec.Adems.PeopleManagement.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NaturalPersonApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NaturalPersonApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Iatec.Adems.PeopleManagement.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Iatec.Adems.PeopleManagement.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId"></param>
        /// <param name="docNumber"> (optional)</param>
        /// <returns>NaturalPersonLiteExternalModel</returns>
        public NaturalPersonLiteExternalModel GetByDocument(Guid? documentTypeId, string docNumber = null)
        {
            ApiResponse<NaturalPersonLiteExternalModel> localVarResponse = GetByDocumentWithHttpInfo(documentTypeId, docNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId"></param>
        /// <param name="docNumber"> (optional)</param>
        /// <returns>ApiResponse of NaturalPersonLiteExternalModel</returns>
        public ApiResponse<NaturalPersonLiteExternalModel> GetByDocumentWithHttpInfo(Guid? documentTypeId, string docNumber = null)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling NaturalPersonApi->GetByDocument");

            var localVarPath = "/naturalPerson/byDocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "documentTypeId", documentTypeId)); // query parameter
            if (docNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "docNumber", docNumber)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetByDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NaturalPersonLiteExternalModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NaturalPersonLiteExternalModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(NaturalPersonLiteExternalModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId"></param>
        /// <param name="docNumber"> (optional)</param>
        /// <returns>Task of NaturalPersonLiteExternalModel</returns>
        public async System.Threading.Tasks.Task<NaturalPersonLiteExternalModel> GetByDocumentAsync(Guid? documentTypeId, string docNumber = null)
        {
            ApiResponse<NaturalPersonLiteExternalModel> localVarResponse = await GetByDocumentAsyncWithHttpInfo(documentTypeId, docNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId"></param>
        /// <param name="docNumber"> (optional)</param>
        /// <returns>Task of ApiResponse (NaturalPersonLiteExternalModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NaturalPersonLiteExternalModel>> GetByDocumentAsyncWithHttpInfo(Guid? documentTypeId, string docNumber = null)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling NaturalPersonApi->GetByDocument");

            var localVarPath = "/naturalPerson/byDocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "documentTypeId", documentTypeId)); // query parameter
            if (docNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "docNumber", docNumber)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetByDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NaturalPersonLiteExternalModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NaturalPersonLiteExternalModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(NaturalPersonLiteExternalModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>NaturalPersonLiteExternalModel</returns>
        public NaturalPersonLiteExternalModel GetByIdForExternal(Guid? id)
        {
            ApiResponse<NaturalPersonLiteExternalModel> localVarResponse = GetByIdForExternalWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of NaturalPersonLiteExternalModel</returns>
        public ApiResponse<NaturalPersonLiteExternalModel> GetByIdForExternalWithHttpInfo(Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling NaturalPersonApi->GetByIdForExternal");

            var localVarPath = "/naturalPerson/byIdForExternal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetByIdForExternal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NaturalPersonLiteExternalModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NaturalPersonLiteExternalModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(NaturalPersonLiteExternalModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of NaturalPersonLiteExternalModel</returns>
        public async System.Threading.Tasks.Task<NaturalPersonLiteExternalModel> GetByIdForExternalAsync(Guid? id)
        {
            ApiResponse<NaturalPersonLiteExternalModel> localVarResponse = await GetByIdForExternalAsyncWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (NaturalPersonLiteExternalModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NaturalPersonLiteExternalModel>> GetByIdForExternalAsyncWithHttpInfo(Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling NaturalPersonApi->GetByIdForExternal");

            var localVarPath = "/naturalPerson/byIdForExternal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetByIdForExternal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NaturalPersonLiteExternalModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NaturalPersonLiteExternalModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(NaturalPersonLiteExternalModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifierDocumentNumber"> (optional)</param>
        /// <returns>NaturalPersonLiteExternalModel</returns>
        public NaturalPersonLiteExternalModel GetByIdentifierDocumentNumberLiteExternal(string identifierDocumentNumber = null)
        {
            ApiResponse<NaturalPersonLiteExternalModel> localVarResponse = GetByIdentifierDocumentNumberLiteExternalWithHttpInfo(identifierDocumentNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifierDocumentNumber"> (optional)</param>
        /// <returns>ApiResponse of NaturalPersonLiteExternalModel</returns>
        public ApiResponse<NaturalPersonLiteExternalModel> GetByIdentifierDocumentNumberLiteExternalWithHttpInfo(string identifierDocumentNumber = null)
        {
            var localVarPath = "/naturalPerson/byIdentifierDocumentNumberLiteExternal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identifierDocumentNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "identifierDocumentNumber", identifierDocumentNumber)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetByIdentifierDocumentNumberLiteExternal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NaturalPersonLiteExternalModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NaturalPersonLiteExternalModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(NaturalPersonLiteExternalModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifierDocumentNumber"> (optional)</param>
        /// <returns>Task of NaturalPersonLiteExternalModel</returns>
        public async System.Threading.Tasks.Task<NaturalPersonLiteExternalModel> GetByIdentifierDocumentNumberLiteExternalAsync(string identifierDocumentNumber = null)
        {
            ApiResponse<NaturalPersonLiteExternalModel> localVarResponse = await GetByIdentifierDocumentNumberLiteExternalAsyncWithHttpInfo(identifierDocumentNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifierDocumentNumber"> (optional)</param>
        /// <returns>Task of ApiResponse (NaturalPersonLiteExternalModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NaturalPersonLiteExternalModel>> GetByIdentifierDocumentNumberLiteExternalAsyncWithHttpInfo(string identifierDocumentNumber = null)
        {
            var localVarPath = "/naturalPerson/byIdentifierDocumentNumberLiteExternal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identifierDocumentNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "identifierDocumentNumber", identifierDocumentNumber)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetByIdentifierDocumentNumberLiteExternal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NaturalPersonLiteExternalModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NaturalPersonLiteExternalModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(NaturalPersonLiteExternalModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName"> (optional)</param>
        /// <returns>NaturalPersonLiteExternalModel</returns>
        public NaturalPersonLiteExternalModel GetByUserName(string userName = null)
        {
            ApiResponse<NaturalPersonLiteExternalModel> localVarResponse = GetByUserNameWithHttpInfo(userName);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName"> (optional)</param>
        /// <returns>ApiResponse of NaturalPersonLiteExternalModel</returns>
        public ApiResponse<NaturalPersonLiteExternalModel> GetByUserNameWithHttpInfo(string userName = null)
        {
            var localVarPath = "/naturalPerson/byUserName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "userName", userName)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetByUserName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NaturalPersonLiteExternalModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NaturalPersonLiteExternalModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(NaturalPersonLiteExternalModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName"> (optional)</param>
        /// <returns>Task of NaturalPersonLiteExternalModel</returns>
        public async System.Threading.Tasks.Task<NaturalPersonLiteExternalModel> GetByUserNameAsync(string userName = null)
        {
            ApiResponse<NaturalPersonLiteExternalModel> localVarResponse = await GetByUserNameAsyncWithHttpInfo(userName);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userName"> (optional)</param>
        /// <returns>Task of ApiResponse (NaturalPersonLiteExternalModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NaturalPersonLiteExternalModel>> GetByUserNameAsyncWithHttpInfo(string userName = null)
        {
            var localVarPath = "/naturalPerson/byUserName";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (userName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "userName", userName)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetByUserName", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NaturalPersonLiteExternalModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NaturalPersonLiteExternalModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(NaturalPersonLiteExternalModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basicPropertyList"> (optional)</param>
        /// <returns>List&lt;NaturalPersonLiteExternalModel&gt;</returns>
        [Obsolete("Will be removed soon")]
        public List<NaturalPersonLiteExternalModel> GetListByBasicPropertyList(List<NPBasicPropertyModel> basicPropertyList = null)
        {
            ApiResponse<List<NaturalPersonLiteExternalModel>> localVarResponse = GetListByBasicPropertyListWithHttpInfo(basicPropertyList);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basicPropertyList"> (optional)</param>
        /// <returns>ApiResponse of List&lt;NaturalPersonLiteExternalModel&gt;</returns>
        public ApiResponse<List<NaturalPersonLiteExternalModel>> GetListByBasicPropertyListWithHttpInfo(List<NPBasicPropertyModel> basicPropertyList = null)
        {
            var localVarPath = "/naturalPerson/byBasicPropertyList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (basicPropertyList != null && basicPropertyList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(basicPropertyList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = basicPropertyList; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListByBasicPropertyList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NaturalPersonLiteExternalModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<NaturalPersonLiteExternalModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NaturalPersonLiteExternalModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basicPropertyList"> (optional)</param>
        /// <returns>Task of List&lt;NaturalPersonLiteExternalModel&gt;</returns>
        [Obsolete("Will be removed soon")]
        public async System.Threading.Tasks.Task<List<NaturalPersonLiteExternalModel>> GetListByBasicPropertyListAsync(List<NPBasicPropertyModel> basicPropertyList = null)
        {
            ApiResponse<List<NaturalPersonLiteExternalModel>> localVarResponse = await GetListByBasicPropertyListAsyncWithHttpInfo(basicPropertyList);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="basicPropertyList"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;NaturalPersonLiteExternalModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NaturalPersonLiteExternalModel>>> GetListByBasicPropertyListAsyncWithHttpInfo(List<NPBasicPropertyModel> basicPropertyList = null)
        {
            var localVarPath = "/naturalPerson/byBasicPropertyList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (basicPropertyList != null && basicPropertyList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(basicPropertyList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = basicPropertyList; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListByBasicPropertyList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NaturalPersonLiteExternalModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<NaturalPersonLiteExternalModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NaturalPersonLiteExternalModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId"></param>
        /// <param name="docNumber"> (optional)</param>
        /// <returns>List&lt;NaturalPersonLiteExternalModel&gt;</returns>
        public List<NaturalPersonLiteExternalModel> GetListByDocument(Guid? documentTypeId, string docNumber = null)
        {
            ApiResponse<List<NaturalPersonLiteExternalModel>> localVarResponse = GetListByDocumentWithHttpInfo(documentTypeId, docNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId"></param>
        /// <param name="docNumber"> (optional)</param>
        /// <returns>ApiResponse of List&lt;NaturalPersonLiteExternalModel&gt;</returns>
        public ApiResponse<List<NaturalPersonLiteExternalModel>> GetListByDocumentWithHttpInfo(Guid? documentTypeId, string docNumber = null)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling NaturalPersonApi->GetListByDocument");

            var localVarPath = "/naturalPerson/byDocument/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "documentTypeId", documentTypeId)); // query parameter
            if (docNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "docNumber", docNumber)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListByDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NaturalPersonLiteExternalModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<NaturalPersonLiteExternalModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NaturalPersonLiteExternalModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId"></param>
        /// <param name="docNumber"> (optional)</param>
        /// <returns>Task of List&lt;NaturalPersonLiteExternalModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<NaturalPersonLiteExternalModel>> GetListByDocumentAsync(Guid? documentTypeId, string docNumber = null)
        {
            ApiResponse<List<NaturalPersonLiteExternalModel>> localVarResponse = await GetListByDocumentAsyncWithHttpInfo(documentTypeId, docNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId"></param>
        /// <param name="docNumber"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;NaturalPersonLiteExternalModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NaturalPersonLiteExternalModel>>> GetListByDocumentAsyncWithHttpInfo(Guid? documentTypeId, string docNumber = null)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling NaturalPersonApi->GetListByDocument");

            var localVarPath = "/naturalPerson/byDocument/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "documentTypeId", documentTypeId)); // query parameter
            if (docNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "docNumber", docNumber)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListByDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NaturalPersonLiteExternalModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<NaturalPersonLiteExternalModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NaturalPersonLiteExternalModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>List&lt;NaturalPersonLiteExternalModel&gt;</returns>
        public List<NaturalPersonLiteExternalModel> GetListByIdListForExternal(List<Guid> idList = null)
        {
            ApiResponse<List<NaturalPersonLiteExternalModel>> localVarResponse = GetListByIdListForExternalWithHttpInfo(idList);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>ApiResponse of List&lt;NaturalPersonLiteExternalModel&gt;</returns>
        public ApiResponse<List<NaturalPersonLiteExternalModel>> GetListByIdListForExternalWithHttpInfo(List<Guid> idList = null)
        {
            var localVarPath = "/naturalPerson/byIdListForExternal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            if (idList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "idList", idList)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListByIdListForExternal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NaturalPersonLiteExternalModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<NaturalPersonLiteExternalModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NaturalPersonLiteExternalModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>Task of List&lt;NaturalPersonLiteExternalModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<NaturalPersonLiteExternalModel>> GetListByIdListForExternalAsync(List<Guid> idList = null)
        {
            ApiResponse<List<NaturalPersonLiteExternalModel>> localVarResponse = await GetListByIdListForExternalAsyncWithHttpInfo(idList);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idList"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;NaturalPersonLiteExternalModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NaturalPersonLiteExternalModel>>> GetListByIdListForExternalAsyncWithHttpInfo(List<Guid> idList = null)
        {
            var localVarPath = "/naturalPerson/byIdListForExternal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            if (idList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "idList", idList)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListByIdListForExternal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NaturalPersonLiteExternalModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<NaturalPersonLiteExternalModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NaturalPersonLiteExternalModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"></param>
        /// <returns>List&lt;NaturalPersonLiteExternalModel&gt;</returns>
        public List<NaturalPersonLiteExternalModel> GetListByLastUpdate(string lastUpdate)
        {
            ApiResponse<List<NaturalPersonLiteExternalModel>> localVarResponse = GetListByLastUpdateWithHttpInfo(lastUpdate);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"></param>
        /// <returns>ApiResponse of List&lt;NaturalPersonLiteExternalModel&gt;</returns>
        public ApiResponse<List<NaturalPersonLiteExternalModel>> GetListByLastUpdateWithHttpInfo(string lastUpdate)
        {
            // verify the required parameter 'lastUpdate' is set
            if (lastUpdate == null)
                throw new ApiException(400, "Missing required parameter 'lastUpdate' when calling NaturalPersonApi->GetListByLastUpdate");

            var localVarPath = "/naturalPerson/byLastUpdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lastUpdate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "lastUpdate", lastUpdate)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListByLastUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NaturalPersonLiteExternalModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<NaturalPersonLiteExternalModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NaturalPersonLiteExternalModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"></param>
        /// <returns>Task of List&lt;NaturalPersonLiteExternalModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<NaturalPersonLiteExternalModel>> GetListByLastUpdateAsync(string lastUpdate)
        {
            ApiResponse<List<NaturalPersonLiteExternalModel>> localVarResponse = await GetListByLastUpdateAsyncWithHttpInfo(lastUpdate);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lastUpdate"></param>
        /// <returns>Task of ApiResponse (List&lt;NaturalPersonLiteExternalModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NaturalPersonLiteExternalModel>>> GetListByLastUpdateAsyncWithHttpInfo(string lastUpdate)
        {
            // verify the required parameter 'lastUpdate' is set
            if (lastUpdate == null)
                throw new ApiException(400, "Missing required parameter 'lastUpdate' when calling NaturalPersonApi->GetListByLastUpdate");

            var localVarPath = "/naturalPerson/byLastUpdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lastUpdate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "lastUpdate", lastUpdate)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListByLastUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NaturalPersonLiteExternalModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<NaturalPersonLiteExternalModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NaturalPersonLiteExternalModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentNumberList"> (optional)</param>
        /// <param name="documentTypeIdList"> (optional)</param>
        /// <returns>List&lt;NaturalPersonLiteExternalModel&gt;</returns>
        public List<NaturalPersonLiteExternalModel> GetListNaturalPersonByDocumentNumberList(List<string> documentNumberList = null, List<Guid> documentTypeIdList = null)
        {
            ApiResponse<List<NaturalPersonLiteExternalModel>> localVarResponse = GetListNaturalPersonByDocumentNumberListWithHttpInfo(documentNumberList, documentTypeIdList);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentNumberList"> (optional)</param>
        /// <param name="documentTypeIdList"> (optional)</param>
        /// <returns>ApiResponse of List&lt;NaturalPersonLiteExternalModel&gt;</returns>
        public ApiResponse<List<NaturalPersonLiteExternalModel>> GetListNaturalPersonByDocumentNumberListWithHttpInfo(List<string> documentNumberList = null, List<Guid> documentTypeIdList = null)
        {
            var localVarPath = "/naturalPerson/byDocumentNumberList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentNumberList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "documentNumberList", documentNumberList)); // query parameter
            if (documentTypeIdList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "documentTypeIdList", documentTypeIdList)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListNaturalPersonByDocumentNumberList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NaturalPersonLiteExternalModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<NaturalPersonLiteExternalModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NaturalPersonLiteExternalModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentNumberList"> (optional)</param>
        /// <param name="documentTypeIdList"> (optional)</param>
        /// <returns>Task of List&lt;NaturalPersonLiteExternalModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<NaturalPersonLiteExternalModel>> GetListNaturalPersonByDocumentNumberListAsync(List<string> documentNumberList = null, List<Guid> documentTypeIdList = null)
        {
            ApiResponse<List<NaturalPersonLiteExternalModel>> localVarResponse = await GetListNaturalPersonByDocumentNumberListAsyncWithHttpInfo(documentNumberList, documentTypeIdList);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentNumberList"> (optional)</param>
        /// <param name="documentTypeIdList"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;NaturalPersonLiteExternalModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NaturalPersonLiteExternalModel>>> GetListNaturalPersonByDocumentNumberListAsyncWithHttpInfo(List<string> documentNumberList = null, List<Guid> documentTypeIdList = null)
        {
            var localVarPath = "/naturalPerson/byDocumentNumberList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentNumberList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("csv", "documentNumberList", documentNumberList)); // query parameter
            if (documentTypeIdList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "documentTypeIdList", documentTypeIdList)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListNaturalPersonByDocumentNumberList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NaturalPersonLiteExternalModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<NaturalPersonLiteExternalModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NaturalPersonLiteExternalModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;NaturalPersonSystemUpdateLiteModel&gt;</returns>
        public List<NaturalPersonSystemUpdateLiteModel> GetListNaturalPersonLastSystemUpdate()
        {
            ApiResponse<List<NaturalPersonSystemUpdateLiteModel>> localVarResponse = GetListNaturalPersonLastSystemUpdateWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;NaturalPersonSystemUpdateLiteModel&gt;</returns>
        public ApiResponse<List<NaturalPersonSystemUpdateLiteModel>> GetListNaturalPersonLastSystemUpdateWithHttpInfo()
        {
            var localVarPath = "/naturalPerson/lastSystemUpdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListNaturalPersonLastSystemUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NaturalPersonSystemUpdateLiteModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<NaturalPersonSystemUpdateLiteModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NaturalPersonSystemUpdateLiteModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;NaturalPersonSystemUpdateLiteModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<NaturalPersonSystemUpdateLiteModel>> GetListNaturalPersonLastSystemUpdateAsync()
        {
            ApiResponse<List<NaturalPersonSystemUpdateLiteModel>> localVarResponse = await GetListNaturalPersonLastSystemUpdateAsyncWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;NaturalPersonSystemUpdateLiteModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NaturalPersonSystemUpdateLiteModel>>> GetListNaturalPersonLastSystemUpdateAsyncWithHttpInfo()
        {
            var localVarPath = "/naturalPerson/lastSystemUpdate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListNaturalPersonLastSystemUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NaturalPersonSystemUpdateLiteModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<NaturalPersonSystemUpdateLiteModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NaturalPersonSystemUpdateLiteModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="birthDate"> (optional)</param>
        /// <param name="gender"> (optional)</param>
        /// <param name="documentTypeId"> (optional)</param>
        /// <param name="documentNumber"> (optional)</param>
        /// <param name="parentName"> (optional)</param>
        /// <returns>PagedNaturalPersonLiteExternalModel</returns>
        public PagedNaturalPersonLiteExternalModel GetPageActiveByFilterForExternal(int? numRows, int? pageIndex, string name = null, string birthDate = null, GenderModel gender = null, Guid? documentTypeId = null, string documentNumber = null, string parentName = null)
        {
            ApiResponse<PagedNaturalPersonLiteExternalModel> localVarResponse = GetPageActiveByFilterForExternalWithHttpInfo(numRows, pageIndex, name, birthDate, gender, documentTypeId, documentNumber, parentName);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="birthDate"> (optional)</param>
        /// <param name="gender"> (optional)</param>
        /// <param name="documentTypeId"> (optional)</param>
        /// <param name="documentNumber"> (optional)</param>
        /// <param name="parentName"> (optional)</param>
        /// <returns>ApiResponse of PagedNaturalPersonLiteExternalModel</returns>
        public ApiResponse<PagedNaturalPersonLiteExternalModel> GetPageActiveByFilterForExternalWithHttpInfo(int? numRows, int? pageIndex, string name = null, string birthDate = null, GenderModel gender = null, Guid? documentTypeId = null, string documentNumber = null, string parentName = null)
        {
            // verify the required parameter 'numRows' is set
            if (numRows == null)
                throw new ApiException(400, "Missing required parameter 'numRows' when calling NaturalPersonApi->GetPageActiveByFilterForExternal");
            // verify the required parameter 'pageIndex' is set
            if (pageIndex == null)
                throw new ApiException(400, "Missing required parameter 'pageIndex' when calling NaturalPersonApi->GetPageActiveByFilterForExternal");

            var localVarPath = "/naturalPerson/pageActiveByFilterForExternal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (birthDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "birthDate", birthDate)); // query parameter
            if (documentTypeId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "documentTypeId", documentTypeId)); // query parameter
            if (documentNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "documentNumber", documentNumber)); // query parameter
            if (parentName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "parentName", parentName)); // query parameter
            if (numRows != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "numRows", numRows)); // query parameter
            if (pageIndex != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageIndex", pageIndex)); // query parameter
            if (gender != null && gender.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(gender); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gender; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageActiveByFilterForExternal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedNaturalPersonLiteExternalModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedNaturalPersonLiteExternalModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedNaturalPersonLiteExternalModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="birthDate"> (optional)</param>
        /// <param name="gender"> (optional)</param>
        /// <param name="documentTypeId"> (optional)</param>
        /// <param name="documentNumber"> (optional)</param>
        /// <param name="parentName"> (optional)</param>
        /// <returns>Task of PagedNaturalPersonLiteExternalModel</returns>
        public async System.Threading.Tasks.Task<PagedNaturalPersonLiteExternalModel> GetPageActiveByFilterForExternalAsync(int? numRows, int? pageIndex, string name = null, string birthDate = null, GenderModel gender = null, Guid? documentTypeId = null, string documentNumber = null, string parentName = null)
        {
            ApiResponse<PagedNaturalPersonLiteExternalModel> localVarResponse = await GetPageActiveByFilterForExternalAsyncWithHttpInfo(numRows, pageIndex, name, birthDate, gender, documentTypeId, documentNumber, parentName);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="name"> (optional)</param>
        /// <param name="birthDate"> (optional)</param>
        /// <param name="gender"> (optional)</param>
        /// <param name="documentTypeId"> (optional)</param>
        /// <param name="documentNumber"> (optional)</param>
        /// <param name="parentName"> (optional)</param>
        /// <returns>Task of ApiResponse (PagedNaturalPersonLiteExternalModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedNaturalPersonLiteExternalModel>> GetPageActiveByFilterForExternalAsyncWithHttpInfo(int? numRows, int? pageIndex, string name = null, string birthDate = null, GenderModel gender = null, Guid? documentTypeId = null, string documentNumber = null, string parentName = null)
        {
            // verify the required parameter 'numRows' is set
            if (numRows == null)
                throw new ApiException(400, "Missing required parameter 'numRows' when calling NaturalPersonApi->GetPageActiveByFilterForExternal");
            // verify the required parameter 'pageIndex' is set
            if (pageIndex == null)
                throw new ApiException(400, "Missing required parameter 'pageIndex' when calling NaturalPersonApi->GetPageActiveByFilterForExternal");

            var localVarPath = "/naturalPerson/pageActiveByFilterForExternal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "name", name)); // query parameter
            if (birthDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "birthDate", birthDate)); // query parameter
            if (documentTypeId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "documentTypeId", documentTypeId)); // query parameter
            if (documentNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "documentNumber", documentNumber)); // query parameter
            if (parentName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "parentName", parentName)); // query parameter
            if (numRows != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "numRows", numRows)); // query parameter
            if (pageIndex != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageIndex", pageIndex)); // query parameter
            if (gender != null && gender.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(gender); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gender; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageActiveByFilterForExternal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedNaturalPersonLiteExternalModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedNaturalPersonLiteExternalModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedNaturalPersonLiteExternalModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="birthDate"></param>
        /// <param name="gender"></param>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="firstName"> (optional)</param>
        /// <param name="middleName"> (optional)</param>
        /// <param name="lastName"> (optional)</param>
        /// <param name="motherName"> (optional)</param>
        /// <param name="identifierDocumentNumber"> (optional)</param>
        /// <returns>PagedNaturalPersonLiteExternalModel</returns>
        public PagedNaturalPersonLiteExternalModel GetPageActiveByFilterForExternal2(string birthDate, GenderModel gender, int? numRows, int? pageIndex, string firstName = null, string middleName = null, string lastName = null, string motherName = null, string identifierDocumentNumber = null)
        {
            ApiResponse<PagedNaturalPersonLiteExternalModel> localVarResponse = GetPageActiveByFilterForExternal2WithHttpInfo(birthDate, gender, numRows, pageIndex, firstName, middleName, lastName, motherName, identifierDocumentNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="birthDate"></param>
        /// <param name="gender"></param>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="firstName"> (optional)</param>
        /// <param name="middleName"> (optional)</param>
        /// <param name="lastName"> (optional)</param>
        /// <param name="motherName"> (optional)</param>
        /// <param name="identifierDocumentNumber"> (optional)</param>
        /// <returns>ApiResponse of PagedNaturalPersonLiteExternalModel</returns>
        public ApiResponse<PagedNaturalPersonLiteExternalModel> GetPageActiveByFilterForExternal2WithHttpInfo(string birthDate, GenderModel gender, int? numRows, int? pageIndex, string firstName = null, string middleName = null, string lastName = null, string motherName = null, string identifierDocumentNumber = null)
        {
            // verify the required parameter 'birthDate' is set
            if (birthDate == null)
                throw new ApiException(400, "Missing required parameter 'birthDate' when calling NaturalPersonApi->GetPageActiveByFilterForExternal2");
            // verify the required parameter 'gender' is set
            if (gender == null)
                throw new ApiException(400, "Missing required parameter 'gender' when calling NaturalPersonApi->GetPageActiveByFilterForExternal2");
            // verify the required parameter 'numRows' is set
            if (numRows == null)
                throw new ApiException(400, "Missing required parameter 'numRows' when calling NaturalPersonApi->GetPageActiveByFilterForExternal2");
            // verify the required parameter 'pageIndex' is set
            if (pageIndex == null)
                throw new ApiException(400, "Missing required parameter 'pageIndex' when calling NaturalPersonApi->GetPageActiveByFilterForExternal2");

            var localVarPath = "/naturalPerson/pageActiveByFilterForExternal2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (firstName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "firstName", firstName)); // query parameter
            if (middleName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "middleName", middleName)); // query parameter
            if (lastName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "lastName", lastName)); // query parameter
            if (birthDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "birthDate", birthDate)); // query parameter
            if (motherName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "motherName", motherName)); // query parameter
            if (identifierDocumentNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "identifierDocumentNumber", identifierDocumentNumber)); // query parameter
            if (numRows != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "numRows", numRows)); // query parameter
            if (pageIndex != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageIndex", pageIndex)); // query parameter
            if (gender != null && gender.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(gender); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gender; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageActiveByFilterForExternal2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedNaturalPersonLiteExternalModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedNaturalPersonLiteExternalModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedNaturalPersonLiteExternalModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="birthDate"></param>
        /// <param name="gender"></param>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="firstName"> (optional)</param>
        /// <param name="middleName"> (optional)</param>
        /// <param name="lastName"> (optional)</param>
        /// <param name="motherName"> (optional)</param>
        /// <param name="identifierDocumentNumber"> (optional)</param>
        /// <returns>Task of PagedNaturalPersonLiteExternalModel</returns>
        public async System.Threading.Tasks.Task<PagedNaturalPersonLiteExternalModel> GetPageActiveByFilterForExternal2Async(string birthDate, GenderModel gender, int? numRows, int? pageIndex, string firstName = null, string middleName = null, string lastName = null, string motherName = null, string identifierDocumentNumber = null)
        {
            ApiResponse<PagedNaturalPersonLiteExternalModel> localVarResponse = await GetPageActiveByFilterForExternal2AsyncWithHttpInfo(birthDate, gender, numRows, pageIndex, firstName, middleName, lastName, motherName, identifierDocumentNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="birthDate"></param>
        /// <param name="gender"></param>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="firstName"> (optional)</param>
        /// <param name="middleName"> (optional)</param>
        /// <param name="lastName"> (optional)</param>
        /// <param name="motherName"> (optional)</param>
        /// <param name="identifierDocumentNumber"> (optional)</param>
        /// <returns>Task of ApiResponse (PagedNaturalPersonLiteExternalModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedNaturalPersonLiteExternalModel>> GetPageActiveByFilterForExternal2AsyncWithHttpInfo(string birthDate, GenderModel gender, int? numRows, int? pageIndex, string firstName = null, string middleName = null, string lastName = null, string motherName = null, string identifierDocumentNumber = null)
        {
            // verify the required parameter 'birthDate' is set
            if (birthDate == null)
                throw new ApiException(400, "Missing required parameter 'birthDate' when calling NaturalPersonApi->GetPageActiveByFilterForExternal2");
            // verify the required parameter 'gender' is set
            if (gender == null)
                throw new ApiException(400, "Missing required parameter 'gender' when calling NaturalPersonApi->GetPageActiveByFilterForExternal2");
            // verify the required parameter 'numRows' is set
            if (numRows == null)
                throw new ApiException(400, "Missing required parameter 'numRows' when calling NaturalPersonApi->GetPageActiveByFilterForExternal2");
            // verify the required parameter 'pageIndex' is set
            if (pageIndex == null)
                throw new ApiException(400, "Missing required parameter 'pageIndex' when calling NaturalPersonApi->GetPageActiveByFilterForExternal2");

            var localVarPath = "/naturalPerson/pageActiveByFilterForExternal2";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (firstName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "firstName", firstName)); // query parameter
            if (middleName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "middleName", middleName)); // query parameter
            if (lastName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "lastName", lastName)); // query parameter
            if (birthDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "birthDate", birthDate)); // query parameter
            if (motherName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "motherName", motherName)); // query parameter
            if (identifierDocumentNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "identifierDocumentNumber", identifierDocumentNumber)); // query parameter
            if (numRows != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "numRows", numRows)); // query parameter
            if (pageIndex != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageIndex", pageIndex)); // query parameter
            if (gender != null && gender.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(gender); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gender; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageActiveByFilterForExternal2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedNaturalPersonLiteExternalModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedNaturalPersonLiteExternalModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedNaturalPersonLiteExternalModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <returns>PagedNaturalPersonLiteExternalModel</returns>
        public PagedNaturalPersonLiteExternalModel GetPageSimilarActiveById(Guid? naturalPersonId, int? numRows, int? pageIndex)
        {
            ApiResponse<PagedNaturalPersonLiteExternalModel> localVarResponse = GetPageSimilarActiveByIdWithHttpInfo(naturalPersonId, numRows, pageIndex);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <returns>ApiResponse of PagedNaturalPersonLiteExternalModel</returns>
        public ApiResponse<PagedNaturalPersonLiteExternalModel> GetPageSimilarActiveByIdWithHttpInfo(Guid? naturalPersonId, int? numRows, int? pageIndex)
        {
            // verify the required parameter 'naturalPersonId' is set
            if (naturalPersonId == null)
                throw new ApiException(400, "Missing required parameter 'naturalPersonId' when calling NaturalPersonApi->GetPageSimilarActiveById");
            // verify the required parameter 'numRows' is set
            if (numRows == null)
                throw new ApiException(400, "Missing required parameter 'numRows' when calling NaturalPersonApi->GetPageSimilarActiveById");
            // verify the required parameter 'pageIndex' is set
            if (pageIndex == null)
                throw new ApiException(400, "Missing required parameter 'pageIndex' when calling NaturalPersonApi->GetPageSimilarActiveById");

            var localVarPath = "/naturalPerson/pageSimilarActiveById";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (naturalPersonId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "naturalPersonId", naturalPersonId)); // query parameter
            if (numRows != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "numRows", numRows)); // query parameter
            if (pageIndex != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageIndex", pageIndex)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageSimilarActiveById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedNaturalPersonLiteExternalModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedNaturalPersonLiteExternalModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedNaturalPersonLiteExternalModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <returns>Task of PagedNaturalPersonLiteExternalModel</returns>
        public async System.Threading.Tasks.Task<PagedNaturalPersonLiteExternalModel> GetPageSimilarActiveByIdAsync(Guid? naturalPersonId, int? numRows, int? pageIndex)
        {
            ApiResponse<PagedNaturalPersonLiteExternalModel> localVarResponse = await GetPageSimilarActiveByIdAsyncWithHttpInfo(naturalPersonId, numRows, pageIndex);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <returns>Task of ApiResponse (PagedNaturalPersonLiteExternalModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedNaturalPersonLiteExternalModel>> GetPageSimilarActiveByIdAsyncWithHttpInfo(Guid? naturalPersonId, int? numRows, int? pageIndex)
        {
            // verify the required parameter 'naturalPersonId' is set
            if (naturalPersonId == null)
                throw new ApiException(400, "Missing required parameter 'naturalPersonId' when calling NaturalPersonApi->GetPageSimilarActiveById");
            // verify the required parameter 'numRows' is set
            if (numRows == null)
                throw new ApiException(400, "Missing required parameter 'numRows' when calling NaturalPersonApi->GetPageSimilarActiveById");
            // verify the required parameter 'pageIndex' is set
            if (pageIndex == null)
                throw new ApiException(400, "Missing required parameter 'pageIndex' when calling NaturalPersonApi->GetPageSimilarActiveById");

            var localVarPath = "/naturalPerson/pageSimilarActiveById";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (naturalPersonId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "naturalPersonId", naturalPersonId)); // query parameter
            if (numRows != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "numRows", numRows)); // query parameter
            if (pageIndex != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageIndex", pageIndex)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageSimilarActiveById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedNaturalPersonLiteExternalModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedNaturalPersonLiteExternalModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedNaturalPersonLiteExternalModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="birthDate"></param>
        /// <param name="gender"></param>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="firstName"> (optional)</param>
        /// <param name="middleName"> (optional)</param>
        /// <param name="lastName"> (optional)</param>
        /// <param name="motherName"> (optional)</param>
        /// <param name="identifierDocumentNumber"> (optional)</param>
        /// <returns>PagedNaturalPersonLiteExternalModel</returns>
        public PagedNaturalPersonLiteExternalModel GetPageSimilarActiveForExternal(string birthDate, GenderModel gender, int? numRows, int? pageIndex, string firstName = null, string middleName = null, string lastName = null, string motherName = null, string identifierDocumentNumber = null)
        {
            ApiResponse<PagedNaturalPersonLiteExternalModel> localVarResponse = GetPageSimilarActiveForExternalWithHttpInfo(birthDate, gender, numRows, pageIndex, firstName, middleName, lastName, motherName, identifierDocumentNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="birthDate"></param>
        /// <param name="gender"></param>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="firstName"> (optional)</param>
        /// <param name="middleName"> (optional)</param>
        /// <param name="lastName"> (optional)</param>
        /// <param name="motherName"> (optional)</param>
        /// <param name="identifierDocumentNumber"> (optional)</param>
        /// <returns>ApiResponse of PagedNaturalPersonLiteExternalModel</returns>
        public ApiResponse<PagedNaturalPersonLiteExternalModel> GetPageSimilarActiveForExternalWithHttpInfo(string birthDate, GenderModel gender, int? numRows, int? pageIndex, string firstName = null, string middleName = null, string lastName = null, string motherName = null, string identifierDocumentNumber = null)
        {
            // verify the required parameter 'birthDate' is set
            if (birthDate == null)
                throw new ApiException(400, "Missing required parameter 'birthDate' when calling NaturalPersonApi->GetPageSimilarActiveForExternal");
            // verify the required parameter 'gender' is set
            if (gender == null)
                throw new ApiException(400, "Missing required parameter 'gender' when calling NaturalPersonApi->GetPageSimilarActiveForExternal");
            // verify the required parameter 'numRows' is set
            if (numRows == null)
                throw new ApiException(400, "Missing required parameter 'numRows' when calling NaturalPersonApi->GetPageSimilarActiveForExternal");
            // verify the required parameter 'pageIndex' is set
            if (pageIndex == null)
                throw new ApiException(400, "Missing required parameter 'pageIndex' when calling NaturalPersonApi->GetPageSimilarActiveForExternal");

            var localVarPath = "/naturalPerson/pageSimilarActiveForExternal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (firstName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "firstName", firstName)); // query parameter
            if (middleName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "middleName", middleName)); // query parameter
            if (lastName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "lastName", lastName)); // query parameter
            if (birthDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "birthDate", birthDate)); // query parameter
            if (motherName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "motherName", motherName)); // query parameter
            if (identifierDocumentNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "identifierDocumentNumber", identifierDocumentNumber)); // query parameter
            if (numRows != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "numRows", numRows)); // query parameter
            if (pageIndex != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageIndex", pageIndex)); // query parameter
            if (gender != null && gender.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(gender); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gender; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageSimilarActiveForExternal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedNaturalPersonLiteExternalModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedNaturalPersonLiteExternalModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedNaturalPersonLiteExternalModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="birthDate"></param>
        /// <param name="gender"></param>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="firstName"> (optional)</param>
        /// <param name="middleName"> (optional)</param>
        /// <param name="lastName"> (optional)</param>
        /// <param name="motherName"> (optional)</param>
        /// <param name="identifierDocumentNumber"> (optional)</param>
        /// <returns>Task of PagedNaturalPersonLiteExternalModel</returns>
        public async System.Threading.Tasks.Task<PagedNaturalPersonLiteExternalModel> GetPageSimilarActiveForExternalAsync(string birthDate, GenderModel gender, int? numRows, int? pageIndex, string firstName = null, string middleName = null, string lastName = null, string motherName = null, string identifierDocumentNumber = null)
        {
            ApiResponse<PagedNaturalPersonLiteExternalModel> localVarResponse = await GetPageSimilarActiveForExternalAsyncWithHttpInfo(birthDate, gender, numRows, pageIndex, firstName, middleName, lastName, motherName, identifierDocumentNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="birthDate"></param>
        /// <param name="gender"></param>
        /// <param name="numRows"></param>
        /// <param name="pageIndex"></param>
        /// <param name="firstName"> (optional)</param>
        /// <param name="middleName"> (optional)</param>
        /// <param name="lastName"> (optional)</param>
        /// <param name="motherName"> (optional)</param>
        /// <param name="identifierDocumentNumber"> (optional)</param>
        /// <returns>Task of ApiResponse (PagedNaturalPersonLiteExternalModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PagedNaturalPersonLiteExternalModel>> GetPageSimilarActiveForExternalAsyncWithHttpInfo(string birthDate, GenderModel gender, int? numRows, int? pageIndex, string firstName = null, string middleName = null, string lastName = null, string motherName = null, string identifierDocumentNumber = null)
        {
            // verify the required parameter 'birthDate' is set
            if (birthDate == null)
                throw new ApiException(400, "Missing required parameter 'birthDate' when calling NaturalPersonApi->GetPageSimilarActiveForExternal");
            // verify the required parameter 'gender' is set
            if (gender == null)
                throw new ApiException(400, "Missing required parameter 'gender' when calling NaturalPersonApi->GetPageSimilarActiveForExternal");
            // verify the required parameter 'numRows' is set
            if (numRows == null)
                throw new ApiException(400, "Missing required parameter 'numRows' when calling NaturalPersonApi->GetPageSimilarActiveForExternal");
            // verify the required parameter 'pageIndex' is set
            if (pageIndex == null)
                throw new ApiException(400, "Missing required parameter 'pageIndex' when calling NaturalPersonApi->GetPageSimilarActiveForExternal");

            var localVarPath = "/naturalPerson/pageSimilarActiveForExternal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (firstName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "firstName", firstName)); // query parameter
            if (middleName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "middleName", middleName)); // query parameter
            if (lastName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "lastName", lastName)); // query parameter
            if (birthDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "birthDate", birthDate)); // query parameter
            if (motherName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "motherName", motherName)); // query parameter
            if (identifierDocumentNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "identifierDocumentNumber", identifierDocumentNumber)); // query parameter
            if (numRows != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "numRows", numRows)); // query parameter
            if (pageIndex != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "pageIndex", pageIndex)); // query parameter
            if (gender != null && gender.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(gender); // http body (model) parameter
            }
            else
            {
                localVarPostBody = gender; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPageSimilarActiveForExternal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PagedNaturalPersonLiteExternalModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PagedNaturalPersonLiteExternalModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PagedNaturalPersonLiteExternalModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="birthDate"></param>
        /// <param name="fullName"> (optional)</param>
        /// <param name="motherName"> (optional)</param>
        /// <returns>NaturalPersonLiteExternalModel</returns>
        public NaturalPersonLiteExternalModel GetSimilarLiteExternal(string birthDate, string fullName = null, string motherName = null)
        {
            ApiResponse<NaturalPersonLiteExternalModel> localVarResponse = GetSimilarLiteExternalWithHttpInfo(birthDate, fullName, motherName);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="birthDate"></param>
        /// <param name="fullName"> (optional)</param>
        /// <param name="motherName"> (optional)</param>
        /// <returns>ApiResponse of NaturalPersonLiteExternalModel</returns>
        public ApiResponse<NaturalPersonLiteExternalModel> GetSimilarLiteExternalWithHttpInfo(string birthDate, string fullName = null, string motherName = null)
        {
            // verify the required parameter 'birthDate' is set
            if (birthDate == null)
                throw new ApiException(400, "Missing required parameter 'birthDate' when calling NaturalPersonApi->GetSimilarLiteExternal");

            var localVarPath = "/naturalPerson/similarLiteExternal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fullName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fullName", fullName)); // query parameter
            if (birthDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "birthDate", birthDate)); // query parameter
            if (motherName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "motherName", motherName)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSimilarLiteExternal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NaturalPersonLiteExternalModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NaturalPersonLiteExternalModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(NaturalPersonLiteExternalModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="birthDate"></param>
        /// <param name="fullName"> (optional)</param>
        /// <param name="motherName"> (optional)</param>
        /// <returns>Task of NaturalPersonLiteExternalModel</returns>
        public async System.Threading.Tasks.Task<NaturalPersonLiteExternalModel> GetSimilarLiteExternalAsync(string birthDate, string fullName = null, string motherName = null)
        {
            ApiResponse<NaturalPersonLiteExternalModel> localVarResponse = await GetSimilarLiteExternalAsyncWithHttpInfo(birthDate, fullName, motherName);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="birthDate"></param>
        /// <param name="fullName"> (optional)</param>
        /// <param name="motherName"> (optional)</param>
        /// <returns>Task of ApiResponse (NaturalPersonLiteExternalModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NaturalPersonLiteExternalModel>> GetSimilarLiteExternalAsyncWithHttpInfo(string birthDate, string fullName = null, string motherName = null)
        {
            // verify the required parameter 'birthDate' is set
            if (birthDate == null)
                throw new ApiException(400, "Missing required parameter 'birthDate' when calling NaturalPersonApi->GetSimilarLiteExternal");

            var localVarPath = "/naturalPerson/similarLiteExternal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fullName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "fullName", fullName)); // query parameter
            if (birthDate != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "birthDate", birthDate)); // query parameter
            if (motherName != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "motherName", motherName)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSimilarLiteExternal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NaturalPersonLiteExternalModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NaturalPersonLiteExternalModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(NaturalPersonLiteExternalModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns></returns>
        public void NaturalPersonDeleteNaturalPerson(List<Guid> naturalPersonIdList = null)
        {
            NaturalPersonDeleteNaturalPersonWithHttpInfo(naturalPersonIdList);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> NaturalPersonDeleteNaturalPersonWithHttpInfo(List<Guid> naturalPersonIdList = null)
        {
            var localVarPath = "/naturalPerson";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (naturalPersonIdList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "naturalPersonIdList", naturalPersonIdList)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NaturalPersonDeleteNaturalPerson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task NaturalPersonDeleteNaturalPersonAsync(List<Guid> naturalPersonIdList = null)
        {
            await NaturalPersonDeleteNaturalPersonAsyncWithHttpInfo(naturalPersonIdList);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> NaturalPersonDeleteNaturalPersonAsyncWithHttpInfo(List<Guid> naturalPersonIdList = null)
        {
            var localVarPath = "/naturalPerson";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (naturalPersonIdList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "naturalPersonIdList", naturalPersonIdList)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NaturalPersonDeleteNaturalPerson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns></returns>
        public void NaturalPersonSaveSystemReference(List<Guid> naturalPersonIdList = null)
        {
            NaturalPersonSaveSystemReferenceWithHttpInfo(naturalPersonIdList);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> NaturalPersonSaveSystemReferenceWithHttpInfo(List<Guid> naturalPersonIdList = null)
        {
            var localVarPath = "/naturalPerson/systemReference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            //if (naturalPersonIdList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "naturalPersonIdList", naturalPersonIdList)); // query parameter
            if (naturalPersonIdList != null && naturalPersonIdList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(naturalPersonIdList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = naturalPersonIdList; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NaturalPersonSaveSystemReference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task NaturalPersonSaveSystemReferenceAsync(List<Guid> naturalPersonIdList = null)
        {
            await NaturalPersonSaveSystemReferenceAsyncWithHttpInfo(naturalPersonIdList);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> NaturalPersonSaveSystemReferenceAsyncWithHttpInfo(List<Guid> naturalPersonIdList = null)
        {
            var localVarPath = "/naturalPerson/systemReference";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            //if (naturalPersonIdList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "naturalPersonIdList", naturalPersonIdList)); // query parameter
            if (naturalPersonIdList != null && naturalPersonIdList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(naturalPersonIdList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = naturalPersonIdList; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NaturalPersonSaveSystemReference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns></returns>
        public void NaturalPersonUpdateNotice(List<Guid> naturalPersonIdList = null)
        {
            NaturalPersonUpdateNoticeWithHttpInfo(naturalPersonIdList);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> NaturalPersonUpdateNoticeWithHttpInfo(List<Guid> naturalPersonIdList = null)
        {
            var localVarPath = "/naturalPerson/notice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            //if (naturalPersonIdList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "naturalPersonIdList", naturalPersonIdList)); // query parameter

            if (naturalPersonIdList != null && naturalPersonIdList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(naturalPersonIdList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = naturalPersonIdList; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NaturalPersonUpdateNotice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task NaturalPersonUpdateNoticeAsync(List<Guid> naturalPersonIdList = null)
        {
            await NaturalPersonUpdateNoticeAsyncWithHttpInfo(naturalPersonIdList);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> NaturalPersonUpdateNoticeAsyncWithHttpInfo(List<Guid> naturalPersonIdList = null)
        {
            var localVarPath = "/naturalPerson/notice";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            //if (naturalPersonIdList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "naturalPersonIdList", naturalPersonIdList)); // query parameter

            if (naturalPersonIdList != null && naturalPersonIdList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(naturalPersonIdList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = naturalPersonIdList; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NaturalPersonUpdateNotice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPerson"> (optional)</param>
        /// <returns>NaturalPersonLiteExternalModel</returns>
        public NaturalPersonLiteExternalModel SaveForExternal(NaturalPersonLiteExternalModel naturalPerson = null)
        {
            ApiResponse<NaturalPersonLiteExternalModel> localVarResponse = SaveForExternalWithHttpInfo(naturalPerson);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPerson"> (optional)</param>
        /// <returns>ApiResponse of NaturalPersonLiteExternalModel</returns>
        public ApiResponse<NaturalPersonLiteExternalModel> SaveForExternalWithHttpInfo(NaturalPersonLiteExternalModel naturalPerson = null)
        {
            var localVarPath = "/naturalPerson/forExternal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (naturalPerson != null && naturalPerson.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(naturalPerson); // http body (model) parameter
            }
            else
            {
                localVarPostBody = naturalPerson; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveForExternal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NaturalPersonLiteExternalModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NaturalPersonLiteExternalModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(NaturalPersonLiteExternalModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPerson"> (optional)</param>
        /// <returns>Task of NaturalPersonLiteExternalModel</returns>
        public async System.Threading.Tasks.Task<NaturalPersonLiteExternalModel> SaveForExternalAsync(NaturalPersonLiteExternalModel naturalPerson = null)
        {
            ApiResponse<NaturalPersonLiteExternalModel> localVarResponse = await SaveForExternalAsyncWithHttpInfo(naturalPerson);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPerson"> (optional)</param>
        /// <returns>Task of ApiResponse (NaturalPersonLiteExternalModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NaturalPersonLiteExternalModel>> SaveForExternalAsyncWithHttpInfo(NaturalPersonLiteExternalModel naturalPerson = null)
        {
            var localVarPath = "/naturalPerson/forExternal";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (naturalPerson != null && naturalPerson.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(naturalPerson); // http body (model) parameter
            }
            else
            {
                localVarPostBody = naturalPerson; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveForExternal", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NaturalPersonLiteExternalModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NaturalPersonLiteExternalModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(NaturalPersonLiteExternalModel)));
        }
    }
}
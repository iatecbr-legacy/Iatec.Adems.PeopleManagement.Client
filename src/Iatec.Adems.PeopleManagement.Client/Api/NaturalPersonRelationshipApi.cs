/*
 * People Management API - BRA
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Iatec.Adems.PeopleManagement.Client.Model;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace Iatec.Adems.PeopleManagement.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INaturalPersonRelationshipApi : IApiAccessor
    {
        #region Synchronous Operations

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeleteNaturalPersonRelationship(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteNaturalPersonRelationshipWithHttpInfo(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>List&lt;NaturalPersonRelationshipLiteModel&gt;</returns>
        List<NaturalPersonRelationshipLiteModel> GetByNaturalPerson(Guid? naturalPersonId);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>ApiResponse of List&lt;NaturalPersonRelationshipLiteModel&gt;</returns>
        ApiResponse<List<NaturalPersonRelationshipLiteModel>> GetByNaturalPersonWithHttpInfo(Guid? naturalPersonId);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>List&lt;NaturalPersonRelationshipLiteModel&gt;</returns>
        List<NaturalPersonRelationshipLiteModel> GetByNaturalPersonIdList(List<Guid> naturalPersonIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>ApiResponse of List&lt;NaturalPersonRelationshipLiteModel&gt;</returns>
        ApiResponse<List<NaturalPersonRelationshipLiteModel>> GetByNaturalPersonIdListWithHttpInfo(List<Guid> naturalPersonIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relationship"></param>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>List&lt;NaturalPersonRelationshipLiteModel&gt;</returns>
        List<NaturalPersonRelationshipLiteModel> GetListByRelationshipAndNaturalPersonIdList(RelationshipModel relationship, List<Guid> naturalPersonIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relationship"></param>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>ApiResponse of List&lt;NaturalPersonRelationshipLiteModel&gt;</returns>
        ApiResponse<List<NaturalPersonRelationshipLiteModel>> GetListByRelationshipAndNaturalPersonIdListWithHttpInfo(RelationshipModel relationship, List<Guid> naturalPersonIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>List&lt;DictionaryEntityLiteModel&gt;</returns>
        List<DictionaryEntityLiteModel> GetListChildren(Guid? naturalPersonId);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>ApiResponse of List&lt;DictionaryEntityLiteModel&gt;</returns>
        ApiResponse<List<DictionaryEntityLiteModel>> GetListChildrenWithHttpInfo(Guid? naturalPersonId);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>List&lt;NaturalPersonRelationshipLiteModel&gt;</returns>
        List<NaturalPersonRelationshipLiteModel> GetListLivesWithByNaturalPersonIdList(List<Guid> naturalPersonIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>ApiResponse of List&lt;NaturalPersonRelationshipLiteModel&gt;</returns>
        ApiResponse<List<NaturalPersonRelationshipLiteModel>> GetListLivesWithByNaturalPersonIdListWithHttpInfo(List<Guid> naturalPersonIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>List&lt;DictionaryEntityLiteModel&gt;</returns>
        List<DictionaryEntityLiteModel> GetListSiblingsByNaturalPerson(Guid? naturalPersonId);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>ApiResponse of List&lt;DictionaryEntityLiteModel&gt;</returns>
        ApiResponse<List<DictionaryEntityLiteModel>> GetListSiblingsByNaturalPersonWithHttpInfo(Guid? naturalPersonId);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>NaturalPersonRelationshipLiteModel</returns>
        NaturalPersonRelationshipLiteModel GetNaturalPersonRelationshipById(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of NaturalPersonRelationshipLiteModel</returns>
        ApiResponse<NaturalPersonRelationshipLiteModel> GetNaturalPersonRelationshipByIdWithHttpInfo(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonRelationship"> (optional)</param>
        /// <returns>NaturalPersonRelationshipLiteModel</returns>
        NaturalPersonRelationshipLiteModel SaveNaturalPersonRelationship(NaturalPersonRelationshipLiteModel naturalPersonRelationship = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonRelationship"> (optional)</param>
        /// <returns>ApiResponse of NaturalPersonRelationshipLiteModel</returns>
        ApiResponse<NaturalPersonRelationshipLiteModel> SaveNaturalPersonRelationshipWithHttpInfo(NaturalPersonRelationshipLiteModel naturalPersonRelationship = null);

        #endregion Synchronous Operations

        #region Asynchronous Operations

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteNaturalPersonRelationshipAsync(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteNaturalPersonRelationshipAsyncWithHttpInfo(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>Task of List&lt;NaturalPersonRelationshipLiteModel&gt;</returns>
        System.Threading.Tasks.Task<List<NaturalPersonRelationshipLiteModel>> GetByNaturalPersonAsync(Guid? naturalPersonId);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>Task of ApiResponse (List&lt;NaturalPersonRelationshipLiteModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NaturalPersonRelationshipLiteModel>>> GetByNaturalPersonAsyncWithHttpInfo(Guid? naturalPersonId);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>Task of List&lt;NaturalPersonRelationshipLiteModel&gt;</returns>
        System.Threading.Tasks.Task<List<NaturalPersonRelationshipLiteModel>> GetByNaturalPersonIdListAsync(List<Guid> naturalPersonIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;NaturalPersonRelationshipLiteModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NaturalPersonRelationshipLiteModel>>> GetByNaturalPersonIdListAsyncWithHttpInfo(List<Guid> naturalPersonIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relationship"></param>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>Task of List&lt;NaturalPersonRelationshipLiteModel&gt;</returns>
        System.Threading.Tasks.Task<List<NaturalPersonRelationshipLiteModel>> GetListByRelationshipAndNaturalPersonIdListAsync(RelationshipModel relationship, List<Guid> naturalPersonIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relationship"></param>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;NaturalPersonRelationshipLiteModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NaturalPersonRelationshipLiteModel>>> GetListByRelationshipAndNaturalPersonIdListAsyncWithHttpInfo(RelationshipModel relationship, List<Guid> naturalPersonIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>Task of List&lt;DictionaryEntityLiteModel&gt;</returns>
        System.Threading.Tasks.Task<List<DictionaryEntityLiteModel>> GetListChildrenAsync(Guid? naturalPersonId);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>Task of ApiResponse (List&lt;DictionaryEntityLiteModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DictionaryEntityLiteModel>>> GetListChildrenAsyncWithHttpInfo(Guid? naturalPersonId);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>Task of List&lt;NaturalPersonRelationshipLiteModel&gt;</returns>
        System.Threading.Tasks.Task<List<NaturalPersonRelationshipLiteModel>> GetListLivesWithByNaturalPersonIdListAsync(List<Guid> naturalPersonIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;NaturalPersonRelationshipLiteModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<NaturalPersonRelationshipLiteModel>>> GetListLivesWithByNaturalPersonIdListAsyncWithHttpInfo(List<Guid> naturalPersonIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>Task of List&lt;DictionaryEntityLiteModel&gt;</returns>
        System.Threading.Tasks.Task<List<DictionaryEntityLiteModel>> GetListSiblingsByNaturalPersonAsync(Guid? naturalPersonId);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>Task of ApiResponse (List&lt;DictionaryEntityLiteModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<DictionaryEntityLiteModel>>> GetListSiblingsByNaturalPersonAsyncWithHttpInfo(Guid? naturalPersonId);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of NaturalPersonRelationshipLiteModel</returns>
        System.Threading.Tasks.Task<NaturalPersonRelationshipLiteModel> GetNaturalPersonRelationshipByIdAsync(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (NaturalPersonRelationshipLiteModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<NaturalPersonRelationshipLiteModel>> GetNaturalPersonRelationshipByIdAsyncWithHttpInfo(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonRelationship"> (optional)</param>
        /// <returns>Task of NaturalPersonRelationshipLiteModel</returns>
        System.Threading.Tasks.Task<NaturalPersonRelationshipLiteModel> SaveNaturalPersonRelationshipAsync(NaturalPersonRelationshipLiteModel naturalPersonRelationship = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonRelationship"> (optional)</param>
        /// <returns>Task of ApiResponse (NaturalPersonRelationshipLiteModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<NaturalPersonRelationshipLiteModel>> SaveNaturalPersonRelationshipAsyncWithHttpInfo(NaturalPersonRelationshipLiteModel naturalPersonRelationship = null);

        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NaturalPersonRelationshipApi : INaturalPersonRelationshipApi
    {
        private Iatec.Adems.PeopleManagement.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NaturalPersonRelationshipApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NaturalPersonRelationshipApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Iatec.Adems.PeopleManagement.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NaturalPersonRelationshipApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NaturalPersonRelationshipApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Iatec.Adems.PeopleManagement.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Iatec.Adems.PeopleManagement.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeleteNaturalPersonRelationship(Guid? id)
        {
            DeleteNaturalPersonRelationshipWithHttpInfo(id);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteNaturalPersonRelationshipWithHttpInfo(Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling NaturalPersonRelationshipApi->DeleteNaturalPersonRelationship");

            var localVarPath = "/naturalPersonRelationship";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNaturalPersonRelationship", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteNaturalPersonRelationshipAsync(Guid? id)
        {
            await DeleteNaturalPersonRelationshipAsyncWithHttpInfo(id);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteNaturalPersonRelationshipAsyncWithHttpInfo(Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling NaturalPersonRelationshipApi->DeleteNaturalPersonRelationship");

            var localVarPath = "/naturalPersonRelationship";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNaturalPersonRelationship", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>List&lt;NaturalPersonRelationshipLiteModel&gt;</returns>
        public List<NaturalPersonRelationshipLiteModel> GetByNaturalPerson(Guid? naturalPersonId)
        {
            ApiResponse<List<NaturalPersonRelationshipLiteModel>> localVarResponse = GetByNaturalPersonWithHttpInfo(naturalPersonId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>ApiResponse of List&lt;NaturalPersonRelationshipLiteModel&gt;</returns>
        public ApiResponse<List<NaturalPersonRelationshipLiteModel>> GetByNaturalPersonWithHttpInfo(Guid? naturalPersonId)
        {
            // verify the required parameter 'naturalPersonId' is set
            if (naturalPersonId == null)
                throw new ApiException(400, "Missing required parameter 'naturalPersonId' when calling NaturalPersonRelationshipApi->GetByNaturalPerson");

            var localVarPath = "/naturalPersonRelationship/byNaturalPerson";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (naturalPersonId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "naturalPersonId", naturalPersonId)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetByNaturalPerson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NaturalPersonRelationshipLiteModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<NaturalPersonRelationshipLiteModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NaturalPersonRelationshipLiteModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>Task of List&lt;NaturalPersonRelationshipLiteModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<NaturalPersonRelationshipLiteModel>> GetByNaturalPersonAsync(Guid? naturalPersonId)
        {
            ApiResponse<List<NaturalPersonRelationshipLiteModel>> localVarResponse = await GetByNaturalPersonAsyncWithHttpInfo(naturalPersonId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>Task of ApiResponse (List&lt;NaturalPersonRelationshipLiteModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NaturalPersonRelationshipLiteModel>>> GetByNaturalPersonAsyncWithHttpInfo(Guid? naturalPersonId)
        {
            // verify the required parameter 'naturalPersonId' is set
            if (naturalPersonId == null)
                throw new ApiException(400, "Missing required parameter 'naturalPersonId' when calling NaturalPersonRelationshipApi->GetByNaturalPerson");

            var localVarPath = "/naturalPersonRelationship/byNaturalPerson";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (naturalPersonId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "naturalPersonId", naturalPersonId)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetByNaturalPerson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NaturalPersonRelationshipLiteModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<NaturalPersonRelationshipLiteModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NaturalPersonRelationshipLiteModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>List&lt;NaturalPersonRelationshipLiteModel&gt;</returns>
        public List<NaturalPersonRelationshipLiteModel> GetByNaturalPersonIdList(List<Guid> naturalPersonIdList = null)
        {
            ApiResponse<List<NaturalPersonRelationshipLiteModel>> localVarResponse = GetByNaturalPersonIdListWithHttpInfo(naturalPersonIdList);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>ApiResponse of List&lt;NaturalPersonRelationshipLiteModel&gt;</returns>
        public ApiResponse<List<NaturalPersonRelationshipLiteModel>> GetByNaturalPersonIdListWithHttpInfo(List<Guid> naturalPersonIdList = null)
        {
            var localVarPath = "/naturalPersonRelationship/byNaturalPersonIdList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            //if (naturalPersonIdList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "naturalPersonIdList", naturalPersonIdList)); // query parameter
            if (naturalPersonIdList != null && naturalPersonIdList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(naturalPersonIdList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = naturalPersonIdList; // byte array
            }
            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetByNaturalPersonIdList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NaturalPersonRelationshipLiteModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<NaturalPersonRelationshipLiteModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NaturalPersonRelationshipLiteModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>Task of List&lt;NaturalPersonRelationshipLiteModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<NaturalPersonRelationshipLiteModel>> GetByNaturalPersonIdListAsync(List<Guid> naturalPersonIdList = null)
        {
            ApiResponse<List<NaturalPersonRelationshipLiteModel>> localVarResponse = await GetByNaturalPersonIdListAsyncWithHttpInfo(naturalPersonIdList);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;NaturalPersonRelationshipLiteModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NaturalPersonRelationshipLiteModel>>> GetByNaturalPersonIdListAsyncWithHttpInfo(List<Guid> naturalPersonIdList = null)
        {
            var localVarPath = "/naturalPersonRelationship/byNaturalPersonIdList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            //if (naturalPersonIdList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "naturalPersonIdList", naturalPersonIdList)); // query parameter
            if (naturalPersonIdList != null && naturalPersonIdList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(naturalPersonIdList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = naturalPersonIdList; // byte array
            }
            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetByNaturalPersonIdList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NaturalPersonRelationshipLiteModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<NaturalPersonRelationshipLiteModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NaturalPersonRelationshipLiteModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relationship"></param>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>List&lt;NaturalPersonRelationshipLiteModel&gt;</returns>
        public List<NaturalPersonRelationshipLiteModel> GetListByRelationshipAndNaturalPersonIdList(RelationshipModel relationship, List<Guid> naturalPersonIdList = null)
        {
            ApiResponse<List<NaturalPersonRelationshipLiteModel>> localVarResponse = GetListByRelationshipAndNaturalPersonIdListWithHttpInfo(relationship, naturalPersonIdList);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relationship"></param>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>ApiResponse of List&lt;NaturalPersonRelationshipLiteModel&gt;</returns>
        public ApiResponse<List<NaturalPersonRelationshipLiteModel>> GetListByRelationshipAndNaturalPersonIdListWithHttpInfo(RelationshipModel relationship, List<Guid> naturalPersonIdList = null)
        {
            // verify the required parameter 'relationship' is set
            if (relationship == null)
                throw new ApiException(400, "Missing required parameter 'relationship' when calling NaturalPersonRelationshipApi->GetListByRelationshipAndNaturalPersonIdList");

            var localVarPath = "/naturalPersonRelationship/byRelationshipAndNaturalPersonIdList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            //if (naturalPersonIdList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "naturalPersonIdList", naturalPersonIdList)); // query parameter
            if (naturalPersonIdList != null && naturalPersonIdList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(naturalPersonIdList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = naturalPersonIdList; // byte array
            }
            if (relationship != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "relationship", relationship)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListByRelationshipAndNaturalPersonIdList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NaturalPersonRelationshipLiteModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<NaturalPersonRelationshipLiteModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NaturalPersonRelationshipLiteModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relationship"></param>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>Task of List&lt;NaturalPersonRelationshipLiteModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<NaturalPersonRelationshipLiteModel>> GetListByRelationshipAndNaturalPersonIdListAsync(RelationshipModel relationship, List<Guid> naturalPersonIdList = null)
        {
            ApiResponse<List<NaturalPersonRelationshipLiteModel>> localVarResponse = await GetListByRelationshipAndNaturalPersonIdListAsyncWithHttpInfo(relationship, naturalPersonIdList);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="relationship"></param>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;NaturalPersonRelationshipLiteModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NaturalPersonRelationshipLiteModel>>> GetListByRelationshipAndNaturalPersonIdListAsyncWithHttpInfo(RelationshipModel relationship, List<Guid> naturalPersonIdList = null)
        {
            // verify the required parameter 'relationship' is set
            if (relationship == null)
                throw new ApiException(400, "Missing required parameter 'relationship' when calling NaturalPersonRelationshipApi->GetListByRelationshipAndNaturalPersonIdList");

            var localVarPath = "/naturalPersonRelationship/byRelationshipAndNaturalPersonIdList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            //if (naturalPersonIdList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "naturalPersonIdList", naturalPersonIdList)); // query parameter
            if (naturalPersonIdList != null && naturalPersonIdList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(naturalPersonIdList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = naturalPersonIdList; // byte array
            }
            if (relationship != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "relationship", relationship)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListByRelationshipAndNaturalPersonIdList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NaturalPersonRelationshipLiteModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<NaturalPersonRelationshipLiteModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NaturalPersonRelationshipLiteModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>List&lt;DictionaryEntityLiteModel&gt;</returns>
        public List<DictionaryEntityLiteModel> GetListChildren(Guid? naturalPersonId)
        {
            ApiResponse<List<DictionaryEntityLiteModel>> localVarResponse = GetListChildrenWithHttpInfo(naturalPersonId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>ApiResponse of List&lt;DictionaryEntityLiteModel&gt;</returns>
        public ApiResponse<List<DictionaryEntityLiteModel>> GetListChildrenWithHttpInfo(Guid? naturalPersonId)
        {
            // verify the required parameter 'naturalPersonId' is set
            if (naturalPersonId == null)
                throw new ApiException(400, "Missing required parameter 'naturalPersonId' when calling NaturalPersonRelationshipApi->GetListChildren");

            var localVarPath = "/naturalPersonRelationship/children";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (naturalPersonId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "naturalPersonId", naturalPersonId)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListChildren", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DictionaryEntityLiteModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DictionaryEntityLiteModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DictionaryEntityLiteModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>Task of List&lt;DictionaryEntityLiteModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<DictionaryEntityLiteModel>> GetListChildrenAsync(Guid? naturalPersonId)
        {
            ApiResponse<List<DictionaryEntityLiteModel>> localVarResponse = await GetListChildrenAsyncWithHttpInfo(naturalPersonId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>Task of ApiResponse (List&lt;DictionaryEntityLiteModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DictionaryEntityLiteModel>>> GetListChildrenAsyncWithHttpInfo(Guid? naturalPersonId)
        {
            // verify the required parameter 'naturalPersonId' is set
            if (naturalPersonId == null)
                throw new ApiException(400, "Missing required parameter 'naturalPersonId' when calling NaturalPersonRelationshipApi->GetListChildren");

            var localVarPath = "/naturalPersonRelationship/children";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (naturalPersonId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "naturalPersonId", naturalPersonId)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListChildren", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DictionaryEntityLiteModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DictionaryEntityLiteModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DictionaryEntityLiteModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>List&lt;NaturalPersonRelationshipLiteModel&gt;</returns>
        public List<NaturalPersonRelationshipLiteModel> GetListLivesWithByNaturalPersonIdList(List<Guid> naturalPersonIdList = null)
        {
            ApiResponse<List<NaturalPersonRelationshipLiteModel>> localVarResponse = GetListLivesWithByNaturalPersonIdListWithHttpInfo(naturalPersonIdList);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>ApiResponse of List&lt;NaturalPersonRelationshipLiteModel&gt;</returns>
        public ApiResponse<List<NaturalPersonRelationshipLiteModel>> GetListLivesWithByNaturalPersonIdListWithHttpInfo(List<Guid> naturalPersonIdList = null)
        {
            var localVarPath = "/naturalPersonRelationship/livesWithByNaturalPersonIdList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            //if (naturalPersonIdList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "naturalPersonIdList", naturalPersonIdList)); // query parameter
            if (naturalPersonIdList != null && naturalPersonIdList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(naturalPersonIdList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = naturalPersonIdList; // byte array
            }
            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListLivesWithByNaturalPersonIdList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NaturalPersonRelationshipLiteModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<NaturalPersonRelationshipLiteModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NaturalPersonRelationshipLiteModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>Task of List&lt;NaturalPersonRelationshipLiteModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<NaturalPersonRelationshipLiteModel>> GetListLivesWithByNaturalPersonIdListAsync(List<Guid> naturalPersonIdList = null)
        {
            ApiResponse<List<NaturalPersonRelationshipLiteModel>> localVarResponse = await GetListLivesWithByNaturalPersonIdListAsyncWithHttpInfo(naturalPersonIdList);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonIdList"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;NaturalPersonRelationshipLiteModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<NaturalPersonRelationshipLiteModel>>> GetListLivesWithByNaturalPersonIdListAsyncWithHttpInfo(List<Guid> naturalPersonIdList = null)
        {
            var localVarPath = "/naturalPersonRelationship/livesWithByNaturalPersonIdList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            //if (naturalPersonIdList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "naturalPersonIdList", naturalPersonIdList)); // query parameter
            if (naturalPersonIdList != null && naturalPersonIdList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(naturalPersonIdList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = naturalPersonIdList; // byte array
            }
            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListLivesWithByNaturalPersonIdList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<NaturalPersonRelationshipLiteModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<NaturalPersonRelationshipLiteModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<NaturalPersonRelationshipLiteModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>List&lt;DictionaryEntityLiteModel&gt;</returns>
        public List<DictionaryEntityLiteModel> GetListSiblingsByNaturalPerson(Guid? naturalPersonId)
        {
            ApiResponse<List<DictionaryEntityLiteModel>> localVarResponse = GetListSiblingsByNaturalPersonWithHttpInfo(naturalPersonId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>ApiResponse of List&lt;DictionaryEntityLiteModel&gt;</returns>
        public ApiResponse<List<DictionaryEntityLiteModel>> GetListSiblingsByNaturalPersonWithHttpInfo(Guid? naturalPersonId)
        {
            // verify the required parameter 'naturalPersonId' is set
            if (naturalPersonId == null)
                throw new ApiException(400, "Missing required parameter 'naturalPersonId' when calling NaturalPersonRelationshipApi->GetListSiblingsByNaturalPerson");

            var localVarPath = "/naturalPersonRelationship/siblingsByNaturalPerson";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (naturalPersonId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "naturalPersonId", naturalPersonId)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListSiblingsByNaturalPerson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DictionaryEntityLiteModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DictionaryEntityLiteModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DictionaryEntityLiteModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>Task of List&lt;DictionaryEntityLiteModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<DictionaryEntityLiteModel>> GetListSiblingsByNaturalPersonAsync(Guid? naturalPersonId)
        {
            ApiResponse<List<DictionaryEntityLiteModel>> localVarResponse = await GetListSiblingsByNaturalPersonAsyncWithHttpInfo(naturalPersonId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>Task of ApiResponse (List&lt;DictionaryEntityLiteModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<DictionaryEntityLiteModel>>> GetListSiblingsByNaturalPersonAsyncWithHttpInfo(Guid? naturalPersonId)
        {
            // verify the required parameter 'naturalPersonId' is set
            if (naturalPersonId == null)
                throw new ApiException(400, "Missing required parameter 'naturalPersonId' when calling NaturalPersonRelationshipApi->GetListSiblingsByNaturalPerson");

            var localVarPath = "/naturalPersonRelationship/siblingsByNaturalPerson";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (naturalPersonId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "naturalPersonId", naturalPersonId)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListSiblingsByNaturalPerson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<DictionaryEntityLiteModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<DictionaryEntityLiteModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<DictionaryEntityLiteModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>NaturalPersonRelationshipLiteModel</returns>
        public NaturalPersonRelationshipLiteModel GetNaturalPersonRelationshipById(Guid? id)
        {
            ApiResponse<NaturalPersonRelationshipLiteModel> localVarResponse = GetNaturalPersonRelationshipByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of NaturalPersonRelationshipLiteModel</returns>
        public ApiResponse<NaturalPersonRelationshipLiteModel> GetNaturalPersonRelationshipByIdWithHttpInfo(Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling NaturalPersonRelationshipApi->GetNaturalPersonRelationshipById");

            var localVarPath = "/naturalPersonRelationship/byId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNaturalPersonRelationshipById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NaturalPersonRelationshipLiteModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NaturalPersonRelationshipLiteModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(NaturalPersonRelationshipLiteModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of NaturalPersonRelationshipLiteModel</returns>
        public async System.Threading.Tasks.Task<NaturalPersonRelationshipLiteModel> GetNaturalPersonRelationshipByIdAsync(Guid? id)
        {
            ApiResponse<NaturalPersonRelationshipLiteModel> localVarResponse = await GetNaturalPersonRelationshipByIdAsyncWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (NaturalPersonRelationshipLiteModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NaturalPersonRelationshipLiteModel>> GetNaturalPersonRelationshipByIdAsyncWithHttpInfo(Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling NaturalPersonRelationshipApi->GetNaturalPersonRelationshipById");

            var localVarPath = "/naturalPersonRelationship/byId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetNaturalPersonRelationshipById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NaturalPersonRelationshipLiteModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NaturalPersonRelationshipLiteModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(NaturalPersonRelationshipLiteModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonRelationship"> (optional)</param>
        /// <returns>NaturalPersonRelationshipLiteModel</returns>
        public NaturalPersonRelationshipLiteModel SaveNaturalPersonRelationship(NaturalPersonRelationshipLiteModel naturalPersonRelationship = null)
        {
            ApiResponse<NaturalPersonRelationshipLiteModel> localVarResponse = SaveNaturalPersonRelationshipWithHttpInfo(naturalPersonRelationship);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonRelationship"> (optional)</param>
        /// <returns>ApiResponse of NaturalPersonRelationshipLiteModel</returns>
        public ApiResponse<NaturalPersonRelationshipLiteModel> SaveNaturalPersonRelationshipWithHttpInfo(NaturalPersonRelationshipLiteModel naturalPersonRelationship = null)
        {
            var localVarPath = "/naturalPersonRelationship";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (naturalPersonRelationship != null && naturalPersonRelationship.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(naturalPersonRelationship); // http body (model) parameter
            }
            else
            {
                localVarPostBody = naturalPersonRelationship; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveNaturalPersonRelationship", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NaturalPersonRelationshipLiteModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NaturalPersonRelationshipLiteModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(NaturalPersonRelationshipLiteModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonRelationship"> (optional)</param>
        /// <returns>Task of NaturalPersonRelationshipLiteModel</returns>
        public async System.Threading.Tasks.Task<NaturalPersonRelationshipLiteModel> SaveNaturalPersonRelationshipAsync(NaturalPersonRelationshipLiteModel naturalPersonRelationship = null)
        {
            ApiResponse<NaturalPersonRelationshipLiteModel> localVarResponse = await SaveNaturalPersonRelationshipAsyncWithHttpInfo(naturalPersonRelationship);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonRelationship"> (optional)</param>
        /// <returns>Task of ApiResponse (NaturalPersonRelationshipLiteModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<NaturalPersonRelationshipLiteModel>> SaveNaturalPersonRelationshipAsyncWithHttpInfo(NaturalPersonRelationshipLiteModel naturalPersonRelationship = null)
        {
            var localVarPath = "/naturalPersonRelationship";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (naturalPersonRelationship != null && naturalPersonRelationship.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(naturalPersonRelationship); // http body (model) parameter
            }
            else
            {
                localVarPostBody = naturalPersonRelationship; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SaveNaturalPersonRelationship", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<NaturalPersonRelationshipLiteModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (NaturalPersonRelationshipLiteModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(NaturalPersonRelationshipLiteModel)));
        }
    }
}
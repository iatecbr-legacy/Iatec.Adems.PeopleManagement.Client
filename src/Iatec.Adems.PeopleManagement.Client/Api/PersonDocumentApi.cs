/*
 * People Management API - BRA
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Iatec.Adems.PeopleManagement.Client.Model;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;

namespace Iatec.Adems.PeopleManagement.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPersonDocumentApi : IApiAccessor
    {
        #region Synchronous Operations

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        void DeletePersonDocument(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeletePersonDocumentWithHttpInfo(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId"></param>
        /// <returns>List&lt;PersonDocumentLiteModel&gt;</returns>
        List<PersonDocumentLiteModel> GetListPersonDocumentByPerson(Guid? personId);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId"></param>
        /// <returns>ApiResponse of List&lt;PersonDocumentLiteModel&gt;</returns>
        ApiResponse<List<PersonDocumentLiteModel>> GetListPersonDocumentByPersonWithHttpInfo(Guid? personId);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personIdList"> (optional)</param>
        /// <returns>List&lt;PersonDocumentLiteModel&gt;</returns>
        List<PersonDocumentLiteModel> GetListPersonDocumentByPersonIdList(List<Guid> personIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personIdList"> (optional)</param>
        /// <returns>ApiResponse of List&lt;PersonDocumentLiteModel&gt;</returns>
        ApiResponse<List<PersonDocumentLiteModel>> GetListPersonDocumentByPersonIdListWithHttpInfo(List<Guid> personIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId"></param>
        /// <param name="personIdList"> (optional)</param>
        /// <returns>List&lt;PersonDocumentLiteModel&gt;</returns>
        List<PersonDocumentLiteModel> GetListPersonDocumentByTypeAndPersonIdList(Guid? documentTypeId, List<Guid> personIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId"></param>
        /// <param name="personIdList"> (optional)</param>
        /// <returns>ApiResponse of List&lt;PersonDocumentLiteModel&gt;</returns>
        ApiResponse<List<PersonDocumentLiteModel>> GetListPersonDocumentByTypeAndPersonIdListWithHttpInfo(Guid? documentTypeId, List<Guid> personIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>PersonDocumentLiteModel</returns>
        PersonDocumentLiteModel GetPersonDocumentById(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of PersonDocumentLiteModel</returns>
        ApiResponse<PersonDocumentLiteModel> GetPersonDocumentByIdWithHttpInfo(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personDocument"> (optional)</param>
        /// <returns>PersonDocumentLiteModel</returns>
        PersonDocumentLiteModel SavePersonDocument(PersonDocumentLiteModel personDocument = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personDocument"> (optional)</param>
        /// <returns>ApiResponse of PersonDocumentLiteModel</returns>
        ApiResponse<PersonDocumentLiteModel> SavePersonDocumentWithHttpInfo(PersonDocumentLiteModel personDocument = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personDocumentList"> (optional)</param>
        /// <returns>List&lt;PersonDocumentLiteModel&gt;</returns>
        List<PersonDocumentLiteModel> SavePersonDocumentList(List<PersonDocumentLiteModel> personDocumentList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personDocumentList"> (optional)</param>
        /// <returns>ApiResponse of List&lt;PersonDocumentLiteModel&gt;</returns>
        ApiResponse<List<PersonDocumentLiteModel>> SavePersonDocumentListWithHttpInfo(List<PersonDocumentLiteModel> personDocumentList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId"></param>
        /// <param name="docNumber"> (optional)</param>
        /// <returns>bool</returns>
        bool ValidateDocNumber(Guid? typeId, string docNumber = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId"></param>
        /// <param name="docNumber"> (optional)</param>
        /// <returns>ApiResponse of bool</returns>
        ApiResponse<bool> ValidateDocNumberWithHttpInfo(Guid? typeId, string docNumber = null);

        #endregion Synchronous Operations

        #region Asynchronous Operations

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeletePersonDocumentAsync(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeletePersonDocumentAsyncWithHttpInfo(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId"></param>
        /// <returns>Task of List&lt;PersonDocumentLiteModel&gt;</returns>
        System.Threading.Tasks.Task<List<PersonDocumentLiteModel>> GetListPersonDocumentByPersonAsync(Guid? personId);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId"></param>
        /// <returns>Task of ApiResponse (List&lt;PersonDocumentLiteModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PersonDocumentLiteModel>>> GetListPersonDocumentByPersonAsyncWithHttpInfo(Guid? personId);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personIdList"> (optional)</param>
        /// <returns>Task of List&lt;PersonDocumentLiteModel&gt;</returns>
        System.Threading.Tasks.Task<List<PersonDocumentLiteModel>> GetListPersonDocumentByPersonIdListAsync(List<Guid> personIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personIdList"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PersonDocumentLiteModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PersonDocumentLiteModel>>> GetListPersonDocumentByPersonIdListAsyncWithHttpInfo(List<Guid> personIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId"></param>
        /// <param name="personIdList"> (optional)</param>
        /// <returns>Task of List&lt;PersonDocumentLiteModel&gt;</returns>
        System.Threading.Tasks.Task<List<PersonDocumentLiteModel>> GetListPersonDocumentByTypeAndPersonIdListAsync(Guid? documentTypeId, List<Guid> personIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId"></param>
        /// <param name="personIdList"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PersonDocumentLiteModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PersonDocumentLiteModel>>> GetListPersonDocumentByTypeAndPersonIdListAsyncWithHttpInfo(Guid? documentTypeId, List<Guid> personIdList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of PersonDocumentLiteModel</returns>
        System.Threading.Tasks.Task<PersonDocumentLiteModel> GetPersonDocumentByIdAsync(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (PersonDocumentLiteModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonDocumentLiteModel>> GetPersonDocumentByIdAsyncWithHttpInfo(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personDocument"> (optional)</param>
        /// <returns>Task of PersonDocumentLiteModel</returns>
        System.Threading.Tasks.Task<PersonDocumentLiteModel> SavePersonDocumentAsync(PersonDocumentLiteModel personDocument = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personDocument"> (optional)</param>
        /// <returns>Task of ApiResponse (PersonDocumentLiteModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<PersonDocumentLiteModel>> SavePersonDocumentAsyncWithHttpInfo(PersonDocumentLiteModel personDocument = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personDocumentList"> (optional)</param>
        /// <returns>Task of List&lt;PersonDocumentLiteModel&gt;</returns>
        System.Threading.Tasks.Task<List<PersonDocumentLiteModel>> SavePersonDocumentListAsync(List<PersonDocumentLiteModel> personDocumentList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personDocumentList"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PersonDocumentLiteModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PersonDocumentLiteModel>>> SavePersonDocumentListAsyncWithHttpInfo(List<PersonDocumentLiteModel> personDocumentList = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId"></param>
        /// <param name="docNumber"> (optional)</param>
        /// <returns>Task of bool</returns>
        System.Threading.Tasks.Task<bool> ValidateDocNumberAsync(Guid? typeId, string docNumber = null);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId"></param>
        /// <param name="docNumber"> (optional)</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        System.Threading.Tasks.Task<ApiResponse<bool>> ValidateDocNumberAsyncWithHttpInfo(Guid? typeId, string docNumber = null);

        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PersonDocumentApi : IPersonDocumentApi
    {
        private Iatec.Adems.PeopleManagement.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonDocumentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PersonDocumentApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Iatec.Adems.PeopleManagement.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonDocumentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PersonDocumentApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Iatec.Adems.PeopleManagement.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Iatec.Adems.PeopleManagement.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns></returns>
        public void DeletePersonDocument(Guid? id)
        {
            DeletePersonDocumentWithHttpInfo(id);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeletePersonDocumentWithHttpInfo(Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PersonDocumentApi->DeletePersonDocument");

            var localVarPath = "/personDocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePersonDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeletePersonDocumentAsync(Guid? id)
        {
            await DeletePersonDocumentAsyncWithHttpInfo(id);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeletePersonDocumentAsyncWithHttpInfo(Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PersonDocumentApi->DeletePersonDocument");

            var localVarPath = "/personDocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePersonDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId"></param>
        /// <returns>List&lt;PersonDocumentLiteModel&gt;</returns>
        public List<PersonDocumentLiteModel> GetListPersonDocumentByPerson(Guid? personId)
        {
            ApiResponse<List<PersonDocumentLiteModel>> localVarResponse = GetListPersonDocumentByPersonWithHttpInfo(personId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId"></param>
        /// <returns>ApiResponse of List&lt;PersonDocumentLiteModel&gt;</returns>
        public ApiResponse<List<PersonDocumentLiteModel>> GetListPersonDocumentByPersonWithHttpInfo(Guid? personId)
        {
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling PersonDocumentApi->GetListPersonDocumentByPerson");

            var localVarPath = "/personDocument/byPerson";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "personId", personId)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListPersonDocumentByPerson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PersonDocumentLiteModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PersonDocumentLiteModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PersonDocumentLiteModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId"></param>
        /// <returns>Task of List&lt;PersonDocumentLiteModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<PersonDocumentLiteModel>> GetListPersonDocumentByPersonAsync(Guid? personId)
        {
            ApiResponse<List<PersonDocumentLiteModel>> localVarResponse = await GetListPersonDocumentByPersonAsyncWithHttpInfo(personId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personId"></param>
        /// <returns>Task of ApiResponse (List&lt;PersonDocumentLiteModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PersonDocumentLiteModel>>> GetListPersonDocumentByPersonAsyncWithHttpInfo(Guid? personId)
        {
            // verify the required parameter 'personId' is set
            if (personId == null)
                throw new ApiException(400, "Missing required parameter 'personId' when calling PersonDocumentApi->GetListPersonDocumentByPerson");

            var localVarPath = "/personDocument/byPerson";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "personId", personId)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListPersonDocumentByPerson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PersonDocumentLiteModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PersonDocumentLiteModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PersonDocumentLiteModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personIdList"> (optional)</param>
        /// <returns>List&lt;PersonDocumentLiteModel&gt;</returns>
        public List<PersonDocumentLiteModel> GetListPersonDocumentByPersonIdList(List<Guid> personIdList = null)
        {
            ApiResponse<List<PersonDocumentLiteModel>> localVarResponse = GetListPersonDocumentByPersonIdListWithHttpInfo(personIdList);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personIdList"> (optional)</param>
        /// <returns>ApiResponse of List&lt;PersonDocumentLiteModel&gt;</returns>
        public ApiResponse<List<PersonDocumentLiteModel>> GetListPersonDocumentByPersonIdListWithHttpInfo(List<Guid> personIdList = null)
        {
            var localVarPath = "/personDocument/byPersonIdList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personIdList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "personIdList", personIdList)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListPersonDocumentByPersonIdList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PersonDocumentLiteModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PersonDocumentLiteModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PersonDocumentLiteModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personIdList"> (optional)</param>
        /// <returns>Task of List&lt;PersonDocumentLiteModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<PersonDocumentLiteModel>> GetListPersonDocumentByPersonIdListAsync(List<Guid> personIdList = null)
        {
            ApiResponse<List<PersonDocumentLiteModel>> localVarResponse = await GetListPersonDocumentByPersonIdListAsyncWithHttpInfo(personIdList);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personIdList"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PersonDocumentLiteModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PersonDocumentLiteModel>>> GetListPersonDocumentByPersonIdListAsyncWithHttpInfo(List<Guid> personIdList = null)
        {
            var localVarPath = "/personDocument/byPersonIdList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personIdList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "personIdList", personIdList)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListPersonDocumentByPersonIdList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PersonDocumentLiteModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PersonDocumentLiteModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PersonDocumentLiteModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId"></param>
        /// <param name="personIdList"> (optional)</param>
        /// <returns>List&lt;PersonDocumentLiteModel&gt;</returns>
        public List<PersonDocumentLiteModel> GetListPersonDocumentByTypeAndPersonIdList(Guid? documentTypeId, List<Guid> personIdList = null)
        {
            ApiResponse<List<PersonDocumentLiteModel>> localVarResponse = GetListPersonDocumentByTypeAndPersonIdListWithHttpInfo(documentTypeId, personIdList);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId"></param>
        /// <param name="personIdList"> (optional)</param>
        /// <returns>ApiResponse of List&lt;PersonDocumentLiteModel&gt;</returns>
        public ApiResponse<List<PersonDocumentLiteModel>> GetListPersonDocumentByTypeAndPersonIdListWithHttpInfo(Guid? documentTypeId, List<Guid> personIdList = null)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling PersonDocumentApi->GetListPersonDocumentByTypeAndPersonIdList");

            var localVarPath = "/personDocument/byTypeAndPersonIdList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "documentTypeId", documentTypeId)); // query parameter
            if (personIdList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "personIdList", personIdList)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListPersonDocumentByTypeAndPersonIdList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PersonDocumentLiteModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PersonDocumentLiteModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PersonDocumentLiteModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId"></param>
        /// <param name="personIdList"> (optional)</param>
        /// <returns>Task of List&lt;PersonDocumentLiteModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<PersonDocumentLiteModel>> GetListPersonDocumentByTypeAndPersonIdListAsync(Guid? documentTypeId, List<Guid> personIdList = null)
        {
            ApiResponse<List<PersonDocumentLiteModel>> localVarResponse = await GetListPersonDocumentByTypeAndPersonIdListAsyncWithHttpInfo(documentTypeId, personIdList);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId"></param>
        /// <param name="personIdList"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PersonDocumentLiteModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PersonDocumentLiteModel>>> GetListPersonDocumentByTypeAndPersonIdListAsyncWithHttpInfo(Guid? documentTypeId, List<Guid> personIdList = null)
        {
            // verify the required parameter 'documentTypeId' is set
            if (documentTypeId == null)
                throw new ApiException(400, "Missing required parameter 'documentTypeId' when calling PersonDocumentApi->GetListPersonDocumentByTypeAndPersonIdList");

            var localVarPath = "/personDocument/byTypeAndPersonIdList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentTypeId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "documentTypeId", documentTypeId)); // query parameter
            if (personIdList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "personIdList", personIdList)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListPersonDocumentByTypeAndPersonIdList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PersonDocumentLiteModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PersonDocumentLiteModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PersonDocumentLiteModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>PersonDocumentLiteModel</returns>
        public PersonDocumentLiteModel GetPersonDocumentById(Guid? id)
        {
            ApiResponse<PersonDocumentLiteModel> localVarResponse = GetPersonDocumentByIdWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of PersonDocumentLiteModel</returns>
        public ApiResponse<PersonDocumentLiteModel> GetPersonDocumentByIdWithHttpInfo(Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PersonDocumentApi->GetPersonDocumentById");

            var localVarPath = "/personDocument/byId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPersonDocumentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PersonDocumentLiteModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PersonDocumentLiteModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PersonDocumentLiteModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of PersonDocumentLiteModel</returns>
        public async System.Threading.Tasks.Task<PersonDocumentLiteModel> GetPersonDocumentByIdAsync(Guid? id)
        {
            ApiResponse<PersonDocumentLiteModel> localVarResponse = await GetPersonDocumentByIdAsyncWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (PersonDocumentLiteModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PersonDocumentLiteModel>> GetPersonDocumentByIdAsyncWithHttpInfo(Guid? id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling PersonDocumentApi->GetPersonDocumentById");

            var localVarPath = "/personDocument/byId";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "id", id)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPersonDocumentById", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PersonDocumentLiteModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PersonDocumentLiteModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PersonDocumentLiteModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personDocument"> (optional)</param>
        /// <returns>PersonDocumentLiteModel</returns>
        public PersonDocumentLiteModel SavePersonDocument(PersonDocumentLiteModel personDocument = null)
        {
            ApiResponse<PersonDocumentLiteModel> localVarResponse = SavePersonDocumentWithHttpInfo(personDocument);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personDocument"> (optional)</param>
        /// <returns>ApiResponse of PersonDocumentLiteModel</returns>
        public ApiResponse<PersonDocumentLiteModel> SavePersonDocumentWithHttpInfo(PersonDocumentLiteModel personDocument = null)
        {
            var localVarPath = "/personDocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personDocument != null && personDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(personDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = personDocument; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SavePersonDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PersonDocumentLiteModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PersonDocumentLiteModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PersonDocumentLiteModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personDocument"> (optional)</param>
        /// <returns>Task of PersonDocumentLiteModel</returns>
        public async System.Threading.Tasks.Task<PersonDocumentLiteModel> SavePersonDocumentAsync(PersonDocumentLiteModel personDocument = null)
        {
            ApiResponse<PersonDocumentLiteModel> localVarResponse = await SavePersonDocumentAsyncWithHttpInfo(personDocument);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personDocument"> (optional)</param>
        /// <returns>Task of ApiResponse (PersonDocumentLiteModel)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PersonDocumentLiteModel>> SavePersonDocumentAsyncWithHttpInfo(PersonDocumentLiteModel personDocument = null)
        {
            var localVarPath = "/personDocument";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personDocument != null && personDocument.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(personDocument); // http body (model) parameter
            }
            else
            {
                localVarPostBody = personDocument; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SavePersonDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PersonDocumentLiteModel>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (PersonDocumentLiteModel)Configuration.ApiClient.Deserialize(localVarResponse, typeof(PersonDocumentLiteModel)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personDocumentList"> (optional)</param>
        /// <returns>List&lt;PersonDocumentLiteModel&gt;</returns>
        public List<PersonDocumentLiteModel> SavePersonDocumentList(List<PersonDocumentLiteModel> personDocumentList = null)
        {
            ApiResponse<List<PersonDocumentLiteModel>> localVarResponse = SavePersonDocumentListWithHttpInfo(personDocumentList);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personDocumentList"> (optional)</param>
        /// <returns>ApiResponse of List&lt;PersonDocumentLiteModel&gt;</returns>
        public ApiResponse<List<PersonDocumentLiteModel>> SavePersonDocumentListWithHttpInfo(List<PersonDocumentLiteModel> personDocumentList = null)
        {
            var localVarPath = "/personDocument/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personDocumentList != null && personDocumentList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(personDocumentList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = personDocumentList; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SavePersonDocumentList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PersonDocumentLiteModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PersonDocumentLiteModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PersonDocumentLiteModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personDocumentList"> (optional)</param>
        /// <returns>Task of List&lt;PersonDocumentLiteModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<PersonDocumentLiteModel>> SavePersonDocumentListAsync(List<PersonDocumentLiteModel> personDocumentList = null)
        {
            ApiResponse<List<PersonDocumentLiteModel>> localVarResponse = await SavePersonDocumentListAsyncWithHttpInfo(personDocumentList);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="personDocumentList"> (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;PersonDocumentLiteModel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PersonDocumentLiteModel>>> SavePersonDocumentListAsyncWithHttpInfo(List<PersonDocumentLiteModel> personDocumentList = null)
        {
            var localVarPath = "/personDocument/list";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (personDocumentList != null && personDocumentList.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(personDocumentList); // http body (model) parameter
            }
            else
            {
                localVarPostBody = personDocumentList; // byte array
            }

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SavePersonDocumentList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<PersonDocumentLiteModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<PersonDocumentLiteModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<PersonDocumentLiteModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId"></param>
        /// <param name="docNumber"> (optional)</param>
        /// <returns>bool</returns>
        public bool ValidateDocNumber(Guid? typeId, string docNumber = null)
        {
            ApiResponse<bool> localVarResponse = ValidateDocNumberWithHttpInfo(typeId, docNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId"></param>
        /// <param name="docNumber"> (optional)</param>
        /// <returns>ApiResponse of bool</returns>
        public ApiResponse<bool> ValidateDocNumberWithHttpInfo(Guid? typeId, string docNumber = null)
        {
            // verify the required parameter 'typeId' is set
            if (typeId == null)
                throw new ApiException(400, "Missing required parameter 'typeId' when calling PersonDocumentApi->ValidateDocNumber");

            var localVarPath = "/personDocument/validateDocNumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "docNumber", docNumber)); // query parameter
            if (typeId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "typeId", typeId)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateDocNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool)Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId"></param>
        /// <param name="docNumber"> (optional)</param>
        /// <returns>Task of bool</returns>
        public async System.Threading.Tasks.Task<bool> ValidateDocNumberAsync(Guid? typeId, string docNumber = null)
        {
            ApiResponse<bool> localVarResponse = await ValidateDocNumberAsyncWithHttpInfo(typeId, docNumber);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="typeId"></param>
        /// <param name="docNumber"> (optional)</param>
        /// <returns>Task of ApiResponse (bool)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<bool>> ValidateDocNumberAsyncWithHttpInfo(Guid? typeId, string docNumber = null)
        {
            // verify the required parameter 'typeId' is set
            if (typeId == null)
                throw new ApiException(400, "Missing required parameter 'typeId' when calling PersonDocumentApi->ValidateDocNumber");

            var localVarPath = "/personDocument/validateDocNumber";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docNumber != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "docNumber", docNumber)); // query parameter
            if (typeId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "typeId", typeId)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ValidateDocNumber", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<bool>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (bool)Configuration.ApiClient.Deserialize(localVarResponse, typeof(bool)));
        }
    }
}
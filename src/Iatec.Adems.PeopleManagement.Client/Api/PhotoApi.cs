/*
 * People Management API - BRA
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Iatec.Adems.PeopleManagement.Client.Model;
using Newtonsoft.Json;
using RestSharp;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Threading.Tasks;

namespace Iatec.Adems.PeopleManagement.Client.Api
{
    //public byte[] GetPhoto(Guid naturalPersonId)
    //public Guid SavePhoto(byte[] content, Guid naturalPersonId)
    //public IList<ImageHelper> GetListPhotoThumbnail(IList<Guid> naturalPersonIdList, int largestSide)
    //public byte[] GetPhotoThumbnail(Guid naturalPersonId, int largestSide)

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPhotoApi : IApiAccessor
    {
        #region Synchronous Operations

        /// <summary>
        ///
        /// </summary>
        /// <param name="naturalPersonId"></param>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PhotoApiLiteModel</returns>
        void DeleteByNaturalPerson(Guid? naturalPersonId);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PhotoApiLiteModel</returns>
        ApiResponse<Object> DeleteByNaturalPersonWithHttpInfo(Guid? naturalPersonId);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>byte[]</returns>
        byte[] GetByNaturalPersonId(Guid? naturalPersonId);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> GetByNaturalPersonIdWithHttpInfo(Guid? naturalPersonId);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>byte[]</returns>
        List<ImageModel> GetListThumbnail(IList<Guid> naturalPersonIdList, int largestSide);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<List<ImageModel>> GetListThumbnailWithHttpInfo(IList<Guid> naturalPersonIdList, int largestSide);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>byte[]</returns>
        byte[] GetThumbnail(Guid? naturalPersonId, int largestSide);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> GetThumbnailWithHttpInfo(Guid? naturalPersonId, int largestSide);

        /// <summary>
        ///
        /// </summary>
        /// <param name="content"></param>
        /// <param name="naturalPersonId"></param>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Guid</returns>
        Guid Save(byte[] content, Guid naturalPersonId);

        /// <summary>
        ///
        /// </summary>
        /// <param name="content"></param>
        /// <param name="naturalPersonId"></param>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Guid</returns>
        ApiResponse<Guid> SaveWithHttpInfo(byte[] content, Guid? naturalPersonId);

        #endregion Synchronous Operations

        #region Asynchronous Operations

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PhotoApiLiteModel</returns>
        System.Threading.Tasks.Task DeleteByNaturalPersonAsync(Guid? naturalPersonId);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PhotoApiLiteModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteByNaturalPersonAsyncWithHttpInfo(Guid? naturalPersonId);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> GetByNaturalPersonIdAsync(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> GetByNaturalPersonIdAsyncWithHttpInfo(Guid? id);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ImageModel>>> GetListThumbnailAsyncWithHttpInfo(IList<Guid> naturalPersonIdList, int largestSide);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<List<ImageModel>> GetListThumbnailAsync(IList<Guid> naturalPersonIdList, int largestSide);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        Task<ApiResponse<byte[]>> GetThumbnailAsyncWithHttpInfo(Guid? naturalPersonId, int largestSide);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>Task of byte[]</returns>
        Task<byte[]> GetThumbnailAsync(Guid? naturalPersonId, int largestSide);

        /// <summary>
        ///
        /// </summary>
        /// <param name="content"></param>
        /// <param name="naturalPersonId"></param>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Guid</returns>
        System.Threading.Tasks.Task<Guid> SaveAsync(byte[] content, Guid naturalPersonId);

        /// <summary>
        ///
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentTypeId"></param>
        /// <param name="docNumber"> (optional)</param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        System.Threading.Tasks.Task<ApiResponse<Guid>> SaveAsyncWithHttpInfo(byte[] content, Guid naturalPersonId);

        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PhotoApi : IPhotoApi
    {
        private Iatec.Adems.PeopleManagement.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PhotoApiApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PhotoApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Iatec.Adems.PeopleManagement.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PhotoApiApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PhotoApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Iatec.Adems.PeopleManagement.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Iatec.Adems.PeopleManagement.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns></returns>
        public void DeleteByNaturalPerson(Guid? naturalPersonId)
        {
            DeleteByNaturalPersonWithHttpInfo(naturalPersonId);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> DeleteByNaturalPersonWithHttpInfo(Guid? naturalPersonId)
        {
            // verify the required parameter 'naturalPersonId' is set
            if (naturalPersonId == null)
                throw new ApiException(400, "Missing required parameter 'naturalPersonId' when calling PhotoApi->DeleteByNaturalPerson");

            var localVarPath = "/photo/deleteByNaturalPerson";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (naturalPersonId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "naturalPersonId", naturalPersonId)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteByNaturalPerson", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteByNaturalPersonAsync(Guid? naturalPersonId)
        {
            await DeleteByNaturalPersonAsyncWithHttpInfo(naturalPersonId);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteByNaturalPersonAsyncWithHttpInfo(Guid? naturalPersonId)
        {
            if (naturalPersonId == null)
                throw new ApiException(400, "Missing required parameter 'naturalPersonId' when calling PhotoApi->DeleteByNaturalPerson");

            var localVarPath = "/photo/deleteByNaturalPerson";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (naturalPersonId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "naturalPersonId", naturalPersonId)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddressTypeDeleteSystemReference", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>byte[]</returns>
        public byte[] GetByNaturalPersonId(Guid? naturalPersonId)
        {
            ApiResponse<byte[]> localVarResponse = GetByNaturalPersonIdWithHttpInfo(naturalPersonId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse<byte[]> GetByNaturalPersonIdWithHttpInfo(Guid? naturalPersonId)
        {
            // verify the required parameter 'naturalPersonId' is set
            if (naturalPersonId == null)
                throw new ApiException(400, "Missing required parameter 'naturalPersonId' when calling PhotoApi->GetByNaturalPersonId");

            var localVarPath = "/photo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (naturalPersonId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "naturalPersonId", naturalPersonId)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetByNaturalPersonId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[])Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>Task of byte[]</returns>
        public async Task<ApiResponse<byte[]>> GetByNaturalPersonIdAsyncWithHttpInfo(Guid? naturalPersonId)
        {
            // verify the required parameter 'naturalPersonId' is set
            if (naturalPersonId == null)
                throw new ApiException(400, "Missing required parameter 'naturalPersonId' when calling PhotoApi->GetByNaturalPersonId");

            var localVarPath = "/photo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (naturalPersonId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "naturalPersonId", naturalPersonId)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetByNaturalPersonId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[])Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async Task<byte[]> GetByNaturalPersonIdAsync(Guid? naturalPersonId)
        {
            ApiResponse<byte[]> localVarResponse = await GetByNaturalPersonIdAsyncWithHttpInfo(naturalPersonId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="naturalPersonIdList"></param>
        /// <param name="largestSide"></param>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List(byte[])</returns>
        public List<ImageModel> GetListThumbnail(IList<Guid> naturalPersonIdList, int largestSide)
        {
            ApiResponse<List<ImageModel>> localVarResponse = GetListThumbnailWithHttpInfo(naturalPersonIdList, largestSide);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="naturalPersonIdList"></param>
        /// <param name="largestSide"></param>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List(byte[])</returns>
        public ApiResponse<List<ImageModel>> GetListThumbnailWithHttpInfo(IList<Guid> naturalPersonIdList, int largestSide)
        {
            // verify the required parameter 'naturalPersonId' is set
            if (naturalPersonIdList == null)
                throw new ApiException(400, "Missing required parameter 'naturalPersonIdList' when calling PhotoApi->GetListThumbnail");

            var localVarPath = "/photo/getListThumbnailByNaturalPersonList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "largestSide", largestSide)); // query parameter
            if (naturalPersonIdList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "naturalPersonIdList", naturalPersonIdList)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListThumbnail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ImageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ImageModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ImageModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="naturalPersonIdList"></param>
        /// <param name="largestSide"></param>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List(byte[])></returns>
        public async Task<ApiResponse<List<ImageModel>>> GetListThumbnailAsyncWithHttpInfo(IList<Guid> naturalPersonIdList, int largestSide)
        {
            // verify the required parameter 'naturalPersonId' is set
            if (naturalPersonIdList == null)
                throw new ApiException(400, "Missing required parameter 'naturalPersonIdList' when calling PhotoApi->GetListThumbnail");

            var localVarPath = "/photo/getListThumbnailByNaturalPersonList";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "largestSide", largestSide)); // query parameter
            if (naturalPersonIdList != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("multi", "naturalPersonIdList", naturalPersonIdList)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetListThumbnail", localVarResponse);
                if (exception != null) throw exception;
            }


            return new ApiResponse<List<ImageModel>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ImageModel>)Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ImageModel>)));
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="naturalPersonIdList"></param>
        /// <param name="largestSide"></param>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List(byte[])>)</returns>
        public async Task<List<ImageModel>> GetListThumbnailAsync(IList<Guid> naturalPersonIdList, int largestSide)
        {
            ApiResponse<List<ImageModel>> localVarResponse = await GetListThumbnailAsyncWithHttpInfo(naturalPersonIdList, largestSide);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>byte[]</returns>
        public byte[] GetThumbnail(Guid? naturalPersonId, int largestSide)
        {
            ApiResponse<byte[]> localVarResponse = GetThumbnailWithHttpInfo(naturalPersonId, largestSide);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse<byte[]> GetThumbnailWithHttpInfo(Guid? naturalPersonId, int largestSide)
        {
            // verify the required parameter 'naturalPersonId' is set
            if (naturalPersonId == null)
                throw new ApiException(400, "Missing required parameter 'naturalPersonId' when calling PhotoApi-> GetThumbnail");

            var localVarPath = "/photo/thumbnail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "largestSide", largestSide)); // query parameter
            if (naturalPersonId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "naturalPersonId", naturalPersonId)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetThumbnail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[])Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>Task of byte[]</returns>
        public async Task<ApiResponse<byte[]>> GetThumbnailAsyncWithHttpInfo(Guid? naturalPersonId, int largestSide)
        {
            // verify the required parameter 'naturalPersonId' is set
            if (naturalPersonId == null)
                throw new ApiException(400, "Missing required parameter 'naturalPersonId' when calling PhotoApi->GetThumbnail");

            var localVarPath = "/photo/thumbnail";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "largestSide", largestSide)); // query parameter
            if (naturalPersonId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "naturalPersonId", naturalPersonId)); // query parameter

            // authentication (client_credentials) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetThumbnail", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[])Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="naturalPersonId"></param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async Task<byte[]> GetThumbnailAsync(Guid? naturalPersonId, int largestSide)
        {
            ApiResponse<byte[]> localVarResponse = await GetThumbnailAsyncWithHttpInfo(naturalPersonId, largestSide);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="content"></param>
        /// <param name="naturalPersonId"></param>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Guid</returns>
        public Guid Save(byte[] content, Guid naturalPersonId)
        {
            ApiResponse<Guid> localVarResponse = SaveWithHttpInfo(content, naturalPersonId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <param name="content"></param>
        /// <param name="naturalPersonId"></param>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Guid</returns>
        public ApiResponse<Guid> SaveWithHttpInfo(byte[] content, Guid? naturalPersonId)
        {
            // verify the required parameter 'documentTypeId' is set
            if (naturalPersonId == null)
                throw new ApiException(400, "Missing required parameter 'naturalPersonId' when calling PhotoApi->Save");

            if (content == null)
                throw new ApiException(400, "Missing required parameter 'content' when calling PhotoApi->Save");

            var localVarPath = "/photo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (naturalPersonId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "naturalPersonId", naturalPersonId)); // query parameter
            using (var contentStream = new MemoryStream(content))
            {
                if (content != null) localVarFileParams.Add("content", Configuration.ApiClient.ParameterToFile("content", contentStream)); // query parameter

                // authentication (client_credentials) required
                // oauth required
                if (!String.IsNullOrEmpty(Configuration.AccessToken))
                {
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                    Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                    localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int)localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                    Exception exception = ExceptionFactory("Save", localVarResponse);
                    if (exception != null) throw exception;
                }

                return new ApiResponse<Guid>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                    (Guid)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Guid)));
            }
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content"></param>
        /// <param name="naturalPersonId"></param>
        /// <returns>Task of Guid</returns>
        public async System.Threading.Tasks.Task<Guid> SaveAsync(byte[] content, Guid naturalPersonId)
        {
            ApiResponse<Guid> localVarResponse = await SaveAsyncWithHttpInfo(content, naturalPersonId);
            return localVarResponse.Data;
        }

        /// <summary>
        ///
        /// </summary>
        /// <exception cref="Iatec.Adems.PeopleManagement.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="content"></param>
        /// <param name="naturalPersonId"></param>
        /// <returns>Task of ApiResponse (Guid)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Guid>> SaveAsyncWithHttpInfo(byte[] content, Guid naturalPersonId)
        {
            if (naturalPersonId == default(Guid))
                throw new ApiException(400, "Missing required parameter 'naturalPersonId' when calling PhotoApi->Save");

            if (content == null)
                throw new ApiException(400, "Missing required parameter 'content' when calling PhotoApi->Save");

            var localVarPath = "/photo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "applications/json",
                "applications/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (naturalPersonId != default(Guid)) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "naturalPersonId", naturalPersonId)); // query parameter
            using (var contentStream = new MemoryStream(content))
            {
                if (content != null) localVarFileParams.Add("content", Configuration.ApiClient.ParameterToFile("content", contentStream)); // query parameter

                // authentication (client_credentials) required
                // oauth required
                if (!String.IsNullOrEmpty(Configuration.AccessToken))
                {
                    localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
                }

                // make the HTTP request
                IRestResponse localVarResponse = (IRestResponse)await Configuration.ApiClient.CallApiAsync(localVarPath,
                    Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                    localVarPathParams, localVarHttpContentType);

                int localVarStatusCode = (int)localVarResponse.StatusCode;

                if (ExceptionFactory != null)
                {
                    Exception exception = ExceptionFactory("Save", localVarResponse);
                    if (exception != null) throw exception;
                }

                return new ApiResponse<Guid>(localVarStatusCode,
                    localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                    (Guid)Configuration.ApiClient.Deserialize(localVarResponse, typeof(Guid)));
            }
        }
    }
}
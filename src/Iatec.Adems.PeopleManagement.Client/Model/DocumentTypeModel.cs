/*
 * People Management API - BRA
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;

namespace Iatec.Adems.PeopleManagement.Client.Model
{
    /// <summary>
    /// DocumentTypeModel
    /// </summary>
    [DataContract]
    public partial class DocumentTypeModel : IEquatable<DocumentTypeModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentTypeModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DocumentTypeModel() { }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentTypeModel" /> class.
        /// </summary>
        /// <param name="Name">Name.</param>
        /// <param name="Code">Code.</param>
        /// <param name="IsPersonIdentifier">IsPersonIdentifier (required).</param>
        /// <param name="IsRequiredComments">IsRequiredComments (required).</param>
        /// <param name="IsRequiredExpiration">IsRequiredExpiration (required).</param>
        /// <param name="IsRequiredIssueBy">IsRequiredIssueBy (required).</param>
        /// <param name="IsRequiredIssueDate">IsRequiredIssueDate (required).</param>
        /// <param name="DocumentNumberMask">DocumentNumberMask.</param>
        /// <param name="DocumentValidation">DocumentValidation.</param>
        /// <param name="DocumentTypeClassification">DocumentTypeClassification.</param>
        /// <param name="Id">Id.</param>
        public DocumentTypeModel(string Name = default(string), string Code = default(string), bool IsPersonIdentifier = default(bool), bool IsRequiredComments = default(bool),
            bool IsRequiredExpiration = default(bool), bool IsRequiredIssueBy = default(bool), bool IsRequiredIssueDate = default(bool), string DocumentNumberMask = default(string),
            DocumentValidationModel DocumentValidation = default(DocumentValidationModel), DocumentTypeClassificationModel DocumentTypeClassification = default(DocumentTypeClassificationModel),
            Guid Id = default(Guid))
        {
            this.IsPersonIdentifier = IsPersonIdentifier;
            this.IsRequiredComments = IsRequiredComments;
            this.IsRequiredExpiration = IsRequiredExpiration;
            this.IsRequiredIssueBy = IsRequiredIssueBy;
            this.IsRequiredIssueDate = IsRequiredIssueDate;
            this.Name = Name;
            this.Code = Code;
            this.DocumentNumberMask = DocumentNumberMask;
            this.DocumentValidation = DocumentValidation;
            this.DocumentTypeClassification = DocumentTypeClassification;
            this.Id = Id;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets IsPersonIdentifier
        /// </summary>
        [DataMember(Name = "isPersonIdentifier", EmitDefaultValue = false)]
        public bool IsPersonIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets IsRequiredComments
        /// </summary>
        [DataMember(Name = "isRequiredComments", EmitDefaultValue = false)]
        public bool IsRequiredComments { get; set; }

        /// <summary>
        /// Gets or Sets IsRequiredExpiration
        /// </summary>
        [DataMember(Name = "isRequiredExpiration", EmitDefaultValue = false)]
        public bool IsRequiredExpiration { get; set; }

        /// <summary>
        /// Gets or Sets IsRequiredIssueBy
        /// </summary>
        [DataMember(Name = "isRequiredIssueBy", EmitDefaultValue = false)]
        public bool IsRequiredIssueBy { get; set; }

        /// <summary>
        /// Gets or Sets IsRequiredIssueDate
        /// </summary>
        [DataMember(Name = "isRequiredIssueDate", EmitDefaultValue = false)]
        public bool IsRequiredIssueDate { get; set; }

        /// <summary>
        /// Gets or Sets DocumentNumberMask
        /// </summary>
        [DataMember(Name = "documentNumberMask", EmitDefaultValue = false)]
        public string DocumentNumberMask { get; set; }

        /// <summary>
        /// Gets or Sets DocumentValidation
        /// </summary>
        [DataMember(Name = "documentValidation", EmitDefaultValue = false)]
        public DocumentValidationModel DocumentValidation { get; set; }

        /// <summary>
        /// Gets or Sets DocumentTypeClassification
        /// </summary>
        [DataMember(Name = "documentTypeClassification", EmitDefaultValue = false)]
        public DocumentTypeClassificationModel DocumentTypeClassification { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentTypeModel {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  IsPersonIdentifier: ").Append(IsPersonIdentifier).Append("\n");
            sb.Append("  IsRequiredComments: ").Append(IsRequiredComments).Append("\n");
            sb.Append("  IsRequiredExpiration: ").Append(IsRequiredExpiration).Append("\n");
            sb.Append("  IsRequiredIssueBy: ").Append(IsRequiredIssueBy).Append("\n");
            sb.Append("  IsRequiredIssueDate: ").Append(IsRequiredIssueDate).Append("\n");
            sb.Append("  DocumentNumberMask: ").Append(DocumentNumberMask).Append("\n");
            sb.Append("  DocumentValidation: ").Append(DocumentValidation).Append("\n");
            sb.Append("  DocumentTypeClassification: ").Append(DocumentTypeClassification).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentTypeModel);
        }

        /// <summary>
        /// Returns true if DocumentTypeModel instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentTypeModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentTypeModel input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) &&
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) &&
                (
                    this.IsPersonIdentifier == input.IsPersonIdentifier ||
                    (this.IsPersonIdentifier.Equals(input.IsPersonIdentifier))
                ) &&
                (
                    this.IsRequiredComments == input.IsRequiredComments ||
                    (this.IsRequiredComments.Equals(input.IsRequiredComments))
                ) &&
                (
                    this.IsRequiredExpiration == input.IsRequiredExpiration ||
                    (this.IsRequiredExpiration.Equals(input.IsRequiredExpiration))
                ) &&
                (
                    this.IsRequiredIssueBy == input.IsRequiredIssueBy ||
                    (this.IsRequiredIssueBy.Equals(input.IsRequiredIssueBy))
                ) &&
                (
                    this.IsRequiredIssueDate == input.IsRequiredIssueDate ||
                    (this.IsRequiredIssueDate.Equals(input.IsRequiredIssueDate))
                ) &&
                (
                    this.DocumentNumberMask == input.DocumentNumberMask ||
                    (this.DocumentNumberMask != null &&
                    this.DocumentNumberMask.Equals(input.DocumentNumberMask))
                ) &&
                (
                    this.DocumentValidation == input.DocumentValidation ||
                    (this.DocumentValidation != null &&
                    this.DocumentValidation.Equals(input.DocumentValidation))
                ) &&
                (
                    this.DocumentTypeClassification == input.DocumentTypeClassification ||
                    (this.DocumentTypeClassification != null &&
                    this.DocumentTypeClassification.Equals(input.DocumentTypeClassification))
                ) &&
                (
                    this.Id == input.Id ||
                    (this.Id != default(Guid) &&
                    this.Id.Equals(input.Id))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                hashCode = hashCode * 59 + this.IsPersonIdentifier.GetHashCode();
                hashCode = hashCode * 59 + this.IsRequiredComments.GetHashCode();
                hashCode = hashCode * 59 + this.IsRequiredExpiration.GetHashCode();
                hashCode = hashCode * 59 + this.IsRequiredIssueBy.GetHashCode();
                hashCode = hashCode * 59 + this.IsRequiredIssueDate.GetHashCode();
                if (this.DocumentNumberMask != null)
                    hashCode = hashCode * 59 + this.DocumentNumberMask.GetHashCode();
                if (this.DocumentValidation != null)
                    hashCode = hashCode * 59 + this.DocumentValidation.GetHashCode();
                if (this.DocumentTypeClassification != null)
                    hashCode = hashCode * 59 + this.DocumentTypeClassification.GetHashCode();
                if (this.Id != default(Guid))
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
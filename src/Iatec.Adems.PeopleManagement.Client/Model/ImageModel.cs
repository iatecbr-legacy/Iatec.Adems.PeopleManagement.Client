/*
 * People Management API - BRA
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace Iatec.Adems.PeopleManagement.Client.Model
{
    /// <summary>
    /// ImageModel
    /// </summary>
    [DataContract]
    public partial class ImageModel : IEquatable<ImageModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImageModel" /> class.
        /// </summary>
        /// <param name="ReferenceId"></param>
        /// <param name="Content"></param>
        /// <param name="IsThumbnail"></param>
        public ImageModel(Guid? ReferenceId = default(Guid?), byte[] Content = default(byte[]), bool IsThumbnail = default(bool))
        {
            this.ReferenceId = ReferenceId;
            this.Content = Content;
            this.IsThumbnail = IsThumbnail;
        }

        /// <summary>
        /// Gets or Sets ReferenceId
        /// </summary>
        [DataMember(Name = "referenceId", EmitDefaultValue = false)]
        public Guid? ReferenceId { get; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name = "content", EmitDefaultValue = false)]
        public byte[] Content { get; }

        /// <summary>
        /// Gets or Sets IsThumbnail
        /// </summary>
        [DataMember(Name = "isThumbnail", EmitDefaultValue = false)]
        public bool IsThumbnail { get; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImageModel {\n");
            sb.Append("  ReferenceId: ").Append(ReferenceId).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  IsThumbnail: ").Append(IsThumbnail).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImageModel);
        }

        /// <summary>
        /// Returns true if ImageModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ImageModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImageModel input)
        {
            if (input == null)
                return false;

            return
                (
                    this.ReferenceId == input.ReferenceId ||
                    (this.ReferenceId != null &&
                    this.ReferenceId.Equals(input.ReferenceId))
                ) &&
                (
                    this.IsThumbnail == input.IsThumbnail ||
                    (                    this.IsThumbnail.Equals(input.IsThumbnail))
                ) &&
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ReferenceId != null)
                    hashCode = hashCode * 59 + this.ReferenceId.GetHashCode();
                if (this.Content != null)
                    hashCode = hashCode * 59 + this.Content.GetHashCode();
                    hashCode = hashCode * 59 + this.IsThumbnail.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/*
 * People Management API - BRA
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;

namespace Iatec.Adems.PeopleManagement.Client.Model
{
    /// <summary>
    /// LegalEntityLiteExternalModel
    /// </summary>
    [DataContract]
    public partial class LegalEntityLiteExternalModel : IEquatable<LegalEntityLiteExternalModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LegalEntityLiteExternalModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LegalEntityLiteExternalModel() { }

        /// <summary>
        /// Initializes a new instance of the <see cref="LegalEntityLiteExternalModel" /> class.
        /// </summary>
        /// <param name="IdentifierDocumentNumber">IdentifierDocumentNumber.</param>
        /// <param name="Id">Id.</param>
        /// <param name="Acronym">Acronym.</param>
        /// <param name="Code">Code.</param>
        /// <param name="HierarchyNodeId">HierarchyNodeId.</param>
        /// <param name="IsAdventistEntity">IsAdventistEntity (required).</param>
        /// <param name="LastUpdate">LastUpdate.</param>
        /// <param name="LegalName">LegalName.</param>
        /// <param name="Name">Name.</param>
        /// <param name="NewIdentity">NewIdentity.</param>
        /// <param name="Region">Region.</param>
        /// <param name="TimeZone">TimeZone.</param>
        /// <param name="Country">Country.</param>
        public LegalEntityLiteExternalModel(string IdentifierDocumentNumber = default(string), Guid Id = default(Guid), string Acronym = default(string), string Code = default(string),
            Guid? HierarchyNodeId = default(Guid?), bool IsAdventistEntity = default(bool), DateTime LastUpdate = default(DateTime), string LegalName = default(string), string Name = default(string),
            Guid? NewIdentity = default(Guid?), CultureModel Region = default(CultureModel), TimeZoneModel TimeZone = default(TimeZoneModel),
            CountryLiteSearchModel Country = default(CountryLiteSearchModel))
        {
            this.IsAdventistEntity = IsAdventistEntity;
            this.IdentifierDocumentNumber = IdentifierDocumentNumber;
            this.Id = Id;
            this.Acronym = Acronym;
            this.Code = Code;
            this.HierarchyNodeId = HierarchyNodeId;
            this.LastUpdate = LastUpdate;
            this.LegalName = LegalName;
            this.Name = Name;
            this.NewIdentity = NewIdentity;
            this.Region = Region;
            this.TimeZone = TimeZone;
            this.Country = Country;
        }

        /// <summary>
        /// Gets or Sets IdentifierDocumentNumber
        /// </summary>
        [DataMember(Name = "identifierDocumentNumber", EmitDefaultValue = false)]
        public string IdentifierDocumentNumber { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Acronym
        /// </summary>
        [DataMember(Name = "acronym", EmitDefaultValue = false)]
        public string Acronym { get; set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets HierarchyNodeId
        /// </summary>
        [DataMember(Name = "hierarchyNodeId", EmitDefaultValue = false)]
        public Guid? HierarchyNodeId { get; set; }

        /// <summary>
        /// Gets or Sets IsAdventistEntity
        /// </summary>
        [DataMember(Name = "isAdventistEntity", EmitDefaultValue = false)]
        public bool IsAdventistEntity { get; set; }

        /// <summary>
        /// Gets or Sets LastUpdate
        /// </summary>
        [DataMember(Name = "lastUpdate", EmitDefaultValue = false)]
        public DateTime LastUpdate { get; set; }

        /// <summary>
        /// Gets or Sets LegalName
        /// </summary>
        [DataMember(Name = "legalName", EmitDefaultValue = false)]
        public string LegalName { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets NewIdentity
        /// </summary>
        [DataMember(Name = "newIdentity", EmitDefaultValue = false)]
        public Guid? NewIdentity { get; set; }

        /// <summary>
        /// Gets or Sets Region
        /// </summary>
        [DataMember(Name = "region", EmitDefaultValue = false)]
        public CultureModel Region { get; set; }

        /// <summary>
        /// Gets or Sets TimeZone
        /// </summary>
        [DataMember(Name = "timeZone", EmitDefaultValue = false)]
        public TimeZoneModel TimeZone { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public CountryLiteSearchModel Country { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LegalEntityLiteExternalModel {\n");
            sb.Append("  IdentifierDocumentNumber: ").Append(IdentifierDocumentNumber).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Acronym: ").Append(Acronym).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  HierarchyNodeId: ").Append(HierarchyNodeId).Append("\n");
            sb.Append("  IsAdventistEntity: ").Append(IsAdventistEntity).Append("\n");
            sb.Append("  LastUpdate: ").Append(LastUpdate).Append("\n");
            sb.Append("  LegalName: ").Append(LegalName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NewIdentity: ").Append(NewIdentity).Append("\n");
            sb.Append("  Region: ").Append(Region).Append("\n");
            sb.Append("  TimeZone: ").Append(TimeZone).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LegalEntityLiteExternalModel);
        }

        /// <summary>
        /// Returns true if LegalEntityLiteExternalModel instances are equal
        /// </summary>
        /// <param name="input">Instance of LegalEntityLiteExternalModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LegalEntityLiteExternalModel input)
        {
            if (input == null)
                return false;

            return
                (
                    this.IdentifierDocumentNumber == input.IdentifierDocumentNumber ||
                    (this.IdentifierDocumentNumber != null &&
                    this.IdentifierDocumentNumber.Equals(input.IdentifierDocumentNumber))
                ) &&
                (
                    this.Id == input.Id ||
                    (this.Id != default(Guid) &&
                    this.Id.Equals(input.Id))
                ) &&
                (
                    this.Acronym == input.Acronym ||
                    (this.Acronym != null &&
                    this.Acronym.Equals(input.Acronym))
                ) &&
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) &&
                (
                    this.HierarchyNodeId == input.HierarchyNodeId ||
                    (this.HierarchyNodeId != null &&
                    this.HierarchyNodeId.Equals(input.HierarchyNodeId))
                ) &&
                (
                    this.IsAdventistEntity == input.IsAdventistEntity ||
                    (                    this.IsAdventistEntity.Equals(input.IsAdventistEntity))
                ) &&
                (
                    this.LastUpdate == input.LastUpdate ||
                    (this.LastUpdate != null &&
                    this.LastUpdate.Equals(input.LastUpdate))
                ) &&
                (
                    this.LegalName == input.LegalName ||
                    (this.LegalName != null &&
                    this.LegalName.Equals(input.LegalName))
                ) &&
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) &&
                (
                    this.NewIdentity == input.NewIdentity ||
                    (this.NewIdentity != null &&
                    this.NewIdentity.Equals(input.NewIdentity))
                ) &&
                (
                    this.Region == input.Region ||
                    (this.Region != null &&
                    this.Region.Equals(input.Region))
                ) &&
                (
                    this.TimeZone == input.TimeZone ||
                    (this.TimeZone != null &&
                    this.TimeZone.Equals(input.TimeZone))
                ) &&
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IdentifierDocumentNumber != null)
                    hashCode = hashCode * 59 + this.IdentifierDocumentNumber.GetHashCode();
                if (this.Id != default(Guid))
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Acronym != null)
                    hashCode = hashCode * 59 + this.Acronym.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.HierarchyNodeId != null)
                    hashCode = hashCode * 59 + this.HierarchyNodeId.GetHashCode();
                    hashCode = hashCode * 59 + this.IsAdventistEntity.GetHashCode();
                if (this.LastUpdate != null)
                    hashCode = hashCode * 59 + this.LastUpdate.GetHashCode();
                if (this.LegalName != null)
                    hashCode = hashCode * 59 + this.LegalName.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.NewIdentity != null)
                    hashCode = hashCode * 59 + this.NewIdentity.GetHashCode();
                if (this.Region != null)
                    hashCode = hashCode * 59 + this.Region.GetHashCode();
                if (this.TimeZone != null)
                    hashCode = hashCode * 59 + this.TimeZone.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
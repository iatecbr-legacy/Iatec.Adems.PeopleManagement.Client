/*
 * People Management API - BRA
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;

namespace Iatec.Adems.PeopleManagement.Client.Model
{
    /// <summary>
    /// LocalityLiteModel
    /// </summary>
    [DataContract]
    public partial class LocalityLiteModel : IEquatable<LocalityLiteModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LocalityLiteModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LocalityLiteModel() { }

        /// <summary>
        /// Initializes a new instance of the <see cref="LocalityLiteModel" /> class.
        /// </summary>
        /// <param name="IsActive">IsActive (required).</param>
        /// <param name="ZipPostalCode">ZipPostalCode.</param>
        /// <param name="RefNumber">RefNumber.</param>
        /// <param name="Id">Id.</param>
        /// <param name="Abbreviation">Abbreviation.</param>
        /// <param name="Code">Code.</param>
        /// <param name="Name">Name.</param>
        /// <param name="FormattedName">FormattedName.</param>
        /// <param name="NameFemaleNaturality">NameFemaleNaturality.</param>
        /// <param name="NameMaleNaturality">NameMaleNaturality.</param>
        /// <param name="TimeZone">TimeZone.</param>
        /// <param name="Country">Country.</param>
        /// <param name="LocalityType">LocalityType.</param>
        /// <param name="LocalityParent">LocalityParent.</param>
        public LocalityLiteModel(bool IsActive = default(bool), string ZipPostalCode = default(string), string RefNumber = default(string), Guid Id = default(Guid),
            string Abbreviation = default(string), string Code = default(string), string Name = default(string), string FormattedName = default(string), string NameFemaleNaturality = default(string),
            string NameMaleNaturality = default(string), TimeZoneModel TimeZone = default(TimeZoneModel), CountryLiteSearchModel Country = default(CountryLiteSearchModel),
            LocalityTypeLiteSearchModel LocalityType = default(LocalityTypeLiteSearchModel), LocalityLiteSearchModel LocalityParent = default(LocalityLiteSearchModel))
        {
            this.IsActive = IsActive;
            this.ZipPostalCode = ZipPostalCode;
            this.RefNumber = RefNumber;
            this.Id = Id;
            this.Abbreviation = Abbreviation;
            this.Code = Code;
            this.Name = Name;
            this.FormattedName = FormattedName;
            this.NameFemaleNaturality = NameFemaleNaturality;
            this.NameMaleNaturality = NameMaleNaturality;
            this.TimeZone = TimeZone;
            this.Country = Country;
            this.LocalityType = LocalityType;
            this.LocalityParent = LocalityParent;
        }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name = "isActive", EmitDefaultValue = false)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Gets or Sets ZipPostalCode
        /// </summary>
        [DataMember(Name = "zipPostalCode", EmitDefaultValue = false)]
        public string ZipPostalCode { get; set; }

        /// <summary>
        /// Gets or Sets RefNumber
        /// </summary>
        [DataMember(Name = "refNumber", EmitDefaultValue = false)]
        public string RefNumber { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Abbreviation
        /// </summary>
        [DataMember(Name = "abbreviation", EmitDefaultValue = false)]
        public string Abbreviation { get; set; }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets FormattedName
        /// </summary>
        [DataMember(Name = "formattedName", EmitDefaultValue = false)]
        public string FormattedName { get; set; }

        /// <summary>
        /// Gets or Sets NameFemaleNaturality
        /// </summary>
        [DataMember(Name = "nameFemaleNaturality", EmitDefaultValue = false)]
        public string NameFemaleNaturality { get; set; }

        /// <summary>
        /// Gets or Sets NameMaleNaturality
        /// </summary>
        [DataMember(Name = "nameMaleNaturality", EmitDefaultValue = false)]
        public string NameMaleNaturality { get; set; }

        /// <summary>
        /// Gets or Sets TimeZone
        /// </summary>
        [DataMember(Name = "timeZone", EmitDefaultValue = false)]
        public TimeZoneModel TimeZone { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public CountryLiteSearchModel Country { get; set; }

        /// <summary>
        /// Gets or Sets LocalityType
        /// </summary>
        [DataMember(Name = "localityType", EmitDefaultValue = false)]
        public LocalityTypeLiteSearchModel LocalityType { get; set; }

        /// <summary>
        /// Gets or Sets LocalityParent
        /// </summary>
        [DataMember(Name = "localityParent", EmitDefaultValue = false)]
        public LocalityLiteSearchModel LocalityParent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LocalityLiteModel {\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  ZipPostalCode: ").Append(ZipPostalCode).Append("\n");
            sb.Append("  RefNumber: ").Append(RefNumber).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Abbreviation: ").Append(Abbreviation).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  FormattedName: ").Append(FormattedName).Append("\n");
            sb.Append("  NameFemaleNaturality: ").Append(NameFemaleNaturality).Append("\n");
            sb.Append("  NameMaleNaturality: ").Append(NameMaleNaturality).Append("\n");
            sb.Append("  TimeZone: ").Append(TimeZone).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  LocalityType: ").Append(LocalityType).Append("\n");
            sb.Append("  LocalityParent: ").Append(LocalityParent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LocalityLiteModel);
        }

        /// <summary>
        /// Returns true if LocalityLiteModel instances are equal
        /// </summary>
        /// <param name="input">Instance of LocalityLiteModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LocalityLiteModel input)
        {
            if (input == null)
                return false;

            return
                (
                    this.IsActive == input.IsActive ||
                    (                    this.IsActive.Equals(input.IsActive))
                ) &&
                (
                    this.ZipPostalCode == input.ZipPostalCode ||
                    (this.ZipPostalCode != null &&
                    this.ZipPostalCode.Equals(input.ZipPostalCode))
                ) &&
                (
                    this.RefNumber == input.RefNumber ||
                    (this.RefNumber != null &&
                    this.RefNumber.Equals(input.RefNumber))
                ) &&
                (
                    this.Id == input.Id ||
                    (this.Id != default(Guid) &&
                    this.Id.Equals(input.Id))
                ) &&
                (
                    this.Abbreviation == input.Abbreviation ||
                    (this.Abbreviation != null &&
                    this.Abbreviation.Equals(input.Abbreviation))
                ) &&
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) &&
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) &&
                (
                    this.FormattedName == input.FormattedName ||
                    (this.FormattedName != null &&
                    this.FormattedName.Equals(input.FormattedName))
                ) &&
                (
                    this.NameFemaleNaturality == input.NameFemaleNaturality ||
                    (this.NameFemaleNaturality != null &&
                    this.NameFemaleNaturality.Equals(input.NameFemaleNaturality))
                ) &&
                (
                    this.NameMaleNaturality == input.NameMaleNaturality ||
                    (this.NameMaleNaturality != null &&
                    this.NameMaleNaturality.Equals(input.NameMaleNaturality))
                ) &&
                (
                    this.TimeZone == input.TimeZone ||
                    (this.TimeZone != null &&
                    this.TimeZone.Equals(input.TimeZone))
                ) &&
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) &&
                (
                    this.LocalityType == input.LocalityType ||
                    (this.LocalityType != null &&
                    this.LocalityType.Equals(input.LocalityType))
                ) &&
                (
                    this.LocalityParent == input.LocalityParent ||
                    (this.LocalityParent != null &&
                    this.LocalityParent.Equals(input.LocalityParent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.ZipPostalCode != null)
                    hashCode = hashCode * 59 + this.ZipPostalCode.GetHashCode();
                if (this.RefNumber != null)
                    hashCode = hashCode * 59 + this.RefNumber.GetHashCode();
                if (this.Id != default(Guid))
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Abbreviation != null)
                    hashCode = hashCode * 59 + this.Abbreviation.GetHashCode();
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.FormattedName != null)
                    hashCode = hashCode * 59 + this.FormattedName.GetHashCode();
                if (this.NameFemaleNaturality != null)
                    hashCode = hashCode * 59 + this.NameFemaleNaturality.GetHashCode();
                if (this.NameMaleNaturality != null)
                    hashCode = hashCode * 59 + this.NameMaleNaturality.GetHashCode();
                if (this.TimeZone != null)
                    hashCode = hashCode * 59 + this.TimeZone.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.LocalityType != null)
                    hashCode = hashCode * 59 + this.LocalityType.GetHashCode();
                if (this.LocalityParent != null)
                    hashCode = hashCode * 59 + this.LocalityParent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/*
 * People Management API - BRA
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace Iatec.Adems.PeopleManagement.Client.Model
{
    /// <summary>
    /// NaturalPersonAllergyLiteModel
    /// </summary>
    [DataContract]
    public partial class NaturalPersonAllergyLiteModel : IEquatable<NaturalPersonAllergyLiteModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NaturalPersonAllergyLiteModel" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="AllergyType">AllergyType.</param>
        /// <param name="Description">Description.</param>
        /// <param name="NaturalPersonId">NaturalPersonId.</param>
        public NaturalPersonAllergyLiteModel(Guid Id = default(Guid), AllergyTypeModel AllergyType = default(AllergyTypeModel), string Description = default(string), 
            Guid NaturalPersonId = default(Guid))
        {
            this.Id = Id;
            this.AllergyType = AllergyType;
            this.Description = Description;
            this.NaturalPersonId = NaturalPersonId;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets AllergyType
        /// </summary>
        [DataMember(Name = "allergyType", EmitDefaultValue = false)]
        public AllergyTypeModel AllergyType { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets NaturalPersonId
        /// </summary>
        [DataMember(Name = "naturalPersonId", EmitDefaultValue = false)]
        public Guid NaturalPersonId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NaturalPersonAllergyLiteModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AllergyType: ").Append(AllergyType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  NaturalPersonId: ").Append(NaturalPersonId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NaturalPersonAllergyLiteModel);
        }

        /// <summary>
        /// Returns true if NaturalPersonAllergyLiteModel instances are equal
        /// </summary>
        /// <param name="input">Instance of NaturalPersonAllergyLiteModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NaturalPersonAllergyLiteModel input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Id == input.Id ||
                    (this.Id != default(Guid) &&
                    this.Id.Equals(input.Id))
                ) &&
                (
                    this.AllergyType == input.AllergyType ||
                    (this.AllergyType != null &&
                    this.AllergyType.Equals(input.AllergyType))
                ) &&
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) &&
                (
                    this.NaturalPersonId == input.NaturalPersonId ||
                    (this.NaturalPersonId != default(Guid) &&
                    this.NaturalPersonId.Equals(input.NaturalPersonId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != default(Guid))
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AllergyType != null)
                    hashCode = hashCode * 59 + this.AllergyType.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.NaturalPersonId != default(Guid))
                    hashCode = hashCode * 59 + this.NaturalPersonId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/*
 * People Management API - BRA
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace Iatec.Adems.PeopleManagement.Client.Model
{
    /// <summary>
    /// NaturalPersonNationalityLiteModel
    /// </summary>
    [DataContract]
    public partial class NaturalPersonNationalityLiteModel : IEquatable<NaturalPersonNationalityLiteModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NaturalPersonNationalityLiteModel" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="Country">Country.</param>
        /// <param name="NameFemaleNationality">NameFemaleNationality.</param>
        /// <param name="NameMaleNationality">NameMaleNationality.</param>
        /// <param name="NaturalPersonId">NaturalPersonId.</param>
        public NaturalPersonNationalityLiteModel(Guid Id = default(Guid), CountryLiteSearchModel Country = default(CountryLiteSearchModel), string NameFemaleNationality = default(string), 
            string NameMaleNationality = default(string), Guid NaturalPersonId = default(Guid))
        {
            this.Id = Id;
            this.Country = Country;
            this.NameFemaleNationality = NameFemaleNationality;
            this.NameMaleNationality = NameMaleNationality;
            this.NaturalPersonId = NaturalPersonId;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public CountryLiteSearchModel Country { get; set; }

        /// <summary>
        /// Gets or Sets NameFemaleNationality
        /// </summary>
        [DataMember(Name = "nameFemaleNationality", EmitDefaultValue = false)]
        public string NameFemaleNationality { get; set; }

        /// <summary>
        /// Gets or Sets NameMaleNationality
        /// </summary>
        [DataMember(Name = "nameMaleNationality", EmitDefaultValue = false)]
        public string NameMaleNationality { get; set; }

        /// <summary>
        /// Gets or Sets NaturalPersonId
        /// </summary>
        [DataMember(Name = "naturalPersonId", EmitDefaultValue = false)]
        public Guid NaturalPersonId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NaturalPersonNationalityLiteModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  NameFemaleNationality: ").Append(NameFemaleNationality).Append("\n");
            sb.Append("  NameMaleNationality: ").Append(NameMaleNationality).Append("\n");
            sb.Append("  NaturalPersonId: ").Append(NaturalPersonId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NaturalPersonNationalityLiteModel);
        }

        /// <summary>
        /// Returns true if NaturalPersonNationalityLiteModel instances are equal
        /// </summary>
        /// <param name="input">Instance of NaturalPersonNationalityLiteModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NaturalPersonNationalityLiteModel input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Id == input.Id ||
                    (this.Id != default(Guid) &&
                    this.Id.Equals(input.Id))
                ) &&
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) &&
                (
                    this.NameFemaleNationality == input.NameFemaleNationality ||
                    (this.NameFemaleNationality != null &&
                    this.NameFemaleNationality.Equals(input.NameFemaleNationality))
                ) &&
                (
                    this.NameMaleNationality == input.NameMaleNationality ||
                    (this.NameMaleNationality != null &&
                    this.NameMaleNationality.Equals(input.NameMaleNationality))
                ) &&
                (
                    this.NaturalPersonId == input.NaturalPersonId ||
                    (this.NaturalPersonId != default(Guid) &&
                    this.NaturalPersonId.Equals(input.NaturalPersonId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != default(Guid))
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.NameFemaleNationality != null)
                    hashCode = hashCode * 59 + this.NameFemaleNationality.GetHashCode();
                if (this.NameMaleNationality != null)
                    hashCode = hashCode * 59 + this.NameMaleNationality.GetHashCode();
                if (this.NaturalPersonId != default(Guid))
                    hashCode = hashCode * 59 + this.NaturalPersonId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
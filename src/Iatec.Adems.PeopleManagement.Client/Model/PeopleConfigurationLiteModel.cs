/*
 * People Management API - BRA
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace Iatec.Adems.PeopleManagement.Client.Model
{
    /// <summary>
    /// PeopleConfigurationLiteModel
    /// </summary>
    [DataContract]
    public partial class PeopleConfigurationLiteModel : IEquatable<PeopleConfigurationLiteModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PeopleConfigurationLiteModel" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="PersonFullNameMask">PersonFullNameMask.</param>
        /// <param name="Country">Country.</param>
        public PeopleConfigurationLiteModel(Guid Id = default(Guid), string PersonFullNameMask = default(string), CountryLiteModel Country = default(CountryLiteModel))
        {
            this.Id = Id;
            this.PersonFullNameMask = PersonFullNameMask;
            this.Country = Country;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets PersonFullNameMask
        /// </summary>
        [DataMember(Name = "personFullNameMask", EmitDefaultValue = false)]
        public string PersonFullNameMask { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public CountryLiteModel Country { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PeopleConfigurationLiteModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PersonFullNameMask: ").Append(PersonFullNameMask).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PeopleConfigurationLiteModel);
        }

        /// <summary>
        /// Returns true if PeopleConfigurationLiteModel instances are equal
        /// </summary>
        /// <param name="input">Instance of PeopleConfigurationLiteModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PeopleConfigurationLiteModel input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Id == input.Id ||
                    (this.Id != default(Guid) &&
                    this.Id.Equals(input.Id))
                ) &&
                (
                    this.PersonFullNameMask == input.PersonFullNameMask ||
                    (this.PersonFullNameMask != null &&
                    this.PersonFullNameMask.Equals(input.PersonFullNameMask))
                ) &&
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != default(Guid))
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.PersonFullNameMask != null)
                    hashCode = hashCode * 59 + this.PersonFullNameMask.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
/*
 * People Management API - BRA
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;

namespace Iatec.Adems.PeopleManagement.Client.Model
{
    /// <summary>
    /// PersonPhoneLiteModel
    /// </summary>
    [DataContract]
    public partial class PersonPhoneLiteModel : IEquatable<PersonPhoneLiteModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PersonPhoneLiteModel" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PersonPhoneLiteModel() { }

        /// <summary>
        /// Initializes a new instance of the <see cref="PersonPhoneLiteModel" /> class.
        /// </summary>
        /// <param name="Id">Id.</param>
        /// <param name="CityAreaCode">CityAreaCode.</param>
        /// <param name="CountryAreaCode">CountryAreaCode.</param>
        /// <param name="Extension">Extension.</param>
        /// <param name="IsDefault">IsDefault (required).</param>
        /// <param name="IsSMSReceiver">IsSMSReceiver (required).</param>
        /// <param name="LastUpdate">LastUpdate.</param>
        /// <param name="LocalNumber">LocalNumber.</param>
        /// <param name="PersonId">PersonId.</param>
        /// <param name="PhoneType">PhoneType.</param>
        public PersonPhoneLiteModel(Guid Id = default(Guid), string CityAreaCode = default(string), string CountryAreaCode = default(string), 
            string Extension = default(string), bool IsDefault = default(bool), bool IsSMSReceiver = default(bool), DateTime LastUpdate = default(DateTime), 
            string LocalNumber = default(string), Guid PersonId = default(Guid), PhoneTypeModel PhoneType = default(PhoneTypeModel))
        {
            this.IsDefault = IsDefault;
            this.IsSMSReceiver = IsSMSReceiver;
            this.Id = Id;
            this.CityAreaCode = CityAreaCode;
            this.CountryAreaCode = CountryAreaCode;
            this.Extension = Extension;
            this.LastUpdate = LastUpdate;
            this.LocalNumber = LocalNumber;
            this.PersonId = PersonId;
            this.PhoneType = PhoneType;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets CityAreaCode
        /// </summary>
        [DataMember(Name = "cityAreaCode", EmitDefaultValue = false)]
        public string CityAreaCode { get; set; }

        /// <summary>
        /// Gets or Sets CountryAreaCode
        /// </summary>
        [DataMember(Name = "countryAreaCode", EmitDefaultValue = false)]
        public string CountryAreaCode { get; set; }

        /// <summary>
        /// Gets or Sets Extension
        /// </summary>
        [DataMember(Name = "extension", EmitDefaultValue = false)]
        public string Extension { get; set; }

        /// <summary>
        /// Gets or Sets IsDefault
        /// </summary>
        [DataMember(Name = "isDefault", EmitDefaultValue = false)]
        public bool IsDefault { get; set; }

        /// <summary>
        /// Gets or Sets IsSMSReceiver
        /// </summary>
        [DataMember(Name = "isSMSReceiver", EmitDefaultValue = false)]
        public bool IsSMSReceiver { get; set; }

        /// <summary>
        /// Gets or Sets LastUpdate
        /// </summary>
        [DataMember(Name = "lastUpdate", EmitDefaultValue = false)]
        public DateTime LastUpdate { get; set; }

        /// <summary>
        /// Gets or Sets LocalNumber
        /// </summary>
        [DataMember(Name = "localNumber", EmitDefaultValue = false)]
        public string LocalNumber { get; set; }

        /// <summary>
        /// Gets or Sets PersonId
        /// </summary>
        [DataMember(Name = "personId", EmitDefaultValue = false)]
        public Guid PersonId { get; set; }

        /// <summary>
        /// Gets or Sets PhoneType
        /// </summary>
        [DataMember(Name = "phoneType", EmitDefaultValue = false)]
        public PhoneTypeModel PhoneType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PersonPhoneLiteModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CityAreaCode: ").Append(CityAreaCode).Append("\n");
            sb.Append("  CountryAreaCode: ").Append(CountryAreaCode).Append("\n");
            sb.Append("  Extension: ").Append(Extension).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  IsSMSReceiver: ").Append(IsSMSReceiver).Append("\n");
            sb.Append("  LastUpdate: ").Append(LastUpdate).Append("\n");
            sb.Append("  LocalNumber: ").Append(LocalNumber).Append("\n");
            sb.Append("  PersonId: ").Append(PersonId).Append("\n");
            sb.Append("  PhoneType: ").Append(PhoneType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PersonPhoneLiteModel);
        }

        /// <summary>
        /// Returns true if PersonPhoneLiteModel instances are equal
        /// </summary>
        /// <param name="input">Instance of PersonPhoneLiteModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PersonPhoneLiteModel input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Id == input.Id ||
                    (this.Id != default(Guid) &&
                    this.Id.Equals(input.Id))
                ) &&
                (
                    this.CityAreaCode == input.CityAreaCode ||
                    (this.CityAreaCode != null &&
                    this.CityAreaCode.Equals(input.CityAreaCode))
                ) &&
                (
                    this.CountryAreaCode == input.CountryAreaCode ||
                    (this.CountryAreaCode != null &&
                    this.CountryAreaCode.Equals(input.CountryAreaCode))
                ) &&
                (
                    this.Extension == input.Extension ||
                    (this.Extension != null &&
                    this.Extension.Equals(input.Extension))
                ) &&
                (
                    this.IsDefault == input.IsDefault ||
                    (this.IsDefault.Equals(input.IsDefault))
                ) &&
                (
                    this.IsSMSReceiver == input.IsSMSReceiver ||
                    (this.IsSMSReceiver.Equals(input.IsSMSReceiver))
                ) &&
                (
                    this.LastUpdate == input.LastUpdate ||
                    (this.LastUpdate != null &&
                    this.LastUpdate.Equals(input.LastUpdate))
                ) &&
                (
                    this.LocalNumber == input.LocalNumber ||
                    (this.LocalNumber != null &&
                    this.LocalNumber.Equals(input.LocalNumber))
                ) &&
                (
                    this.PersonId == input.PersonId ||
                    (this.PersonId != default(Guid) &&
                    this.PersonId.Equals(input.PersonId))
                ) &&
                (
                    this.PhoneType == input.PhoneType ||
                    (this.PhoneType != null &&
                    this.PhoneType.Equals(input.PhoneType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != default(Guid))
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CityAreaCode != null)
                    hashCode = hashCode * 59 + this.CityAreaCode.GetHashCode();
                if (this.CountryAreaCode != null)
                    hashCode = hashCode * 59 + this.CountryAreaCode.GetHashCode();
                if (this.Extension != null)
                    hashCode = hashCode * 59 + this.Extension.GetHashCode();
                hashCode = hashCode * 59 + this.IsDefault.GetHashCode();
                hashCode = hashCode * 59 + this.IsSMSReceiver.GetHashCode();
                if (this.LastUpdate != null)
                    hashCode = hashCode * 59 + this.LastUpdate.GetHashCode();
                if (this.LocalNumber != null)
                    hashCode = hashCode * 59 + this.LocalNumber.GetHashCode();
                if (this.PersonId != default(Guid))
                    hashCode = hashCode * 59 + this.PersonId.GetHashCode();
                if (this.PhoneType != null)
                    hashCode = hashCode * 59 + this.PhoneType.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
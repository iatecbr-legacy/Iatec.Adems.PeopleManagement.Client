/*
 * People Management API - BRA
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.2.1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;

namespace Iatec.Adems.PeopleManagement.Client.Model
{
    /// <summary>
    /// ZipPostalCodeAddressLiteModel
    /// </summary>
    [DataContract]
    public partial class ZipPostalCodeAddressLiteModel : IEquatable<ZipPostalCodeAddressLiteModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ZipPostalCodeAddressLiteModel" /> class.
        /// </summary>
        /// <param name="NeighborhoodRefNumber">NeighborhoodRefNumber.</param>
        /// <param name="BigUserRefNumber">BigUserRefNumber.</param>
        /// <param name="RefNumber">RefNumber.</param>
        /// <param name="Id">Id.</param>
        /// <param name="AddressLine01">AddressLine01.</param>
        /// <param name="AddressLine02">AddressLine02.</param>
        /// <param name="AddressLine03">AddressLine03.</param>
        /// <param name="ZipPostalCode">ZipPostalCode.</param>
        /// <param name="CountryLiteSearch">CountryLiteSearch.</param>
        /// <param name="LocalityLiteSearch">LocalityLiteSearch.</param>
        public ZipPostalCodeAddressLiteModel(string NeighborhoodRefNumber = default(string), string BigUserRefNumber = default(string), string RefNumber = default(string), Guid Id = default(Guid), string AddressLine01 = default(string), string AddressLine02 = default(string), string AddressLine03 = default(string), string ZipPostalCode = default(string), CountryLiteSearchModel CountryLiteSearch = default(CountryLiteSearchModel), LocalityLiteSearchModel LocalityLiteSearch = default(LocalityLiteSearchModel))
        {
            this.NeighborhoodRefNumber = NeighborhoodRefNumber;
            this.BigUserRefNumber = BigUserRefNumber;
            this.RefNumber = RefNumber;
            this.Id = Id;
            this.AddressLine01 = AddressLine01;
            this.AddressLine02 = AddressLine02;
            this.AddressLine03 = AddressLine03;
            this.ZipPostalCode = ZipPostalCode;
            this.CountryLiteSearch = CountryLiteSearch;
            this.LocalityLiteSearch = LocalityLiteSearch;
        }

        /// <summary>
        /// Gets or Sets NeighborhoodRefNumber
        /// </summary>
        [DataMember(Name = "neighborhoodRefNumber", EmitDefaultValue = false)]
        public string NeighborhoodRefNumber { get; set; }

        /// <summary>
        /// Gets or Sets BigUserRefNumber
        /// </summary>
        [DataMember(Name = "bigUserRefNumber", EmitDefaultValue = false)]
        public string BigUserRefNumber { get; set; }

        /// <summary>
        /// Gets or Sets RefNumber
        /// </summary>
        [DataMember(Name = "refNumber", EmitDefaultValue = false)]
        public string RefNumber { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets AddressLine01
        /// </summary>
        [DataMember(Name = "addressLine01", EmitDefaultValue = false)]
        public string AddressLine01 { get; set; }

        /// <summary>
        /// Gets or Sets AddressLine02
        /// </summary>
        [DataMember(Name = "addressLine02", EmitDefaultValue = false)]
        public string AddressLine02 { get; set; }

        /// <summary>
        /// Gets or Sets AddressLine03
        /// </summary>
        [DataMember(Name = "addressLine03", EmitDefaultValue = false)]
        public string AddressLine03 { get; set; }

        /// <summary>
        /// Gets or Sets ZipPostalCode
        /// </summary>
        [DataMember(Name = "zipPostalCode", EmitDefaultValue = false)]
        public string ZipPostalCode { get; set; }

        /// <summary>
        /// Gets or Sets CountryLiteSearch
        /// </summary>
        [DataMember(Name = "countryLiteSearch", EmitDefaultValue = false)]
        public CountryLiteSearchModel CountryLiteSearch { get; set; }

        /// <summary>
        /// Gets or Sets LocalityLiteSearch
        /// </summary>
        [DataMember(Name = "localityLiteSearch", EmitDefaultValue = false)]
        public LocalityLiteSearchModel LocalityLiteSearch { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ZipPostalCodeAddressLiteModel {\n");
            sb.Append("  NeighborhoodRefNumber: ").Append(NeighborhoodRefNumber).Append("\n");
            sb.Append("  BigUserRefNumber: ").Append(BigUserRefNumber).Append("\n");
            sb.Append("  RefNumber: ").Append(RefNumber).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AddressLine01: ").Append(AddressLine01).Append("\n");
            sb.Append("  AddressLine02: ").Append(AddressLine02).Append("\n");
            sb.Append("  AddressLine03: ").Append(AddressLine03).Append("\n");
            sb.Append("  ZipPostalCode: ").Append(ZipPostalCode).Append("\n");
            sb.Append("  CountryLiteSearch: ").Append(CountryLiteSearch).Append("\n");
            sb.Append("  LocalityLiteSearch: ").Append(LocalityLiteSearch).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ZipPostalCodeAddressLiteModel);
        }

        /// <summary>
        /// Returns true if ZipPostalCodeAddressLiteModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ZipPostalCodeAddressLiteModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ZipPostalCodeAddressLiteModel input)
        {
            if (input == null)
                return false;

            return
                (
                    this.NeighborhoodRefNumber == input.NeighborhoodRefNumber ||
                    (this.NeighborhoodRefNumber != null &&
                    this.NeighborhoodRefNumber.Equals(input.NeighborhoodRefNumber))
                ) &&
                (
                    this.BigUserRefNumber == input.BigUserRefNumber ||
                    (this.BigUserRefNumber != null &&
                    this.BigUserRefNumber.Equals(input.BigUserRefNumber))
                ) &&
                (
                    this.RefNumber == input.RefNumber ||
                    (this.RefNumber != null &&
                    this.RefNumber.Equals(input.RefNumber))
                ) &&
                (
                    this.Id == input.Id ||
                    (this.Id != default(Guid) &&
                    this.Id.Equals(input.Id))
                ) &&
                (
                    this.AddressLine01 == input.AddressLine01 ||
                    (this.AddressLine01 != null &&
                    this.AddressLine01.Equals(input.AddressLine01))
                ) &&
                (
                    this.AddressLine02 == input.AddressLine02 ||
                    (this.AddressLine02 != null &&
                    this.AddressLine02.Equals(input.AddressLine02))
                ) &&
                (
                    this.AddressLine03 == input.AddressLine03 ||
                    (this.AddressLine03 != null &&
                    this.AddressLine03.Equals(input.AddressLine03))
                ) &&
                (
                    this.ZipPostalCode == input.ZipPostalCode ||
                    (this.ZipPostalCode != null &&
                    this.ZipPostalCode.Equals(input.ZipPostalCode))
                ) &&
                (
                    this.CountryLiteSearch == input.CountryLiteSearch ||
                    (this.CountryLiteSearch != null &&
                    this.CountryLiteSearch.Equals(input.CountryLiteSearch))
                ) &&
                (
                    this.LocalityLiteSearch == input.LocalityLiteSearch ||
                    (this.LocalityLiteSearch != null &&
                    this.LocalityLiteSearch.Equals(input.LocalityLiteSearch))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NeighborhoodRefNumber != null)
                    hashCode = hashCode * 59 + this.NeighborhoodRefNumber.GetHashCode();
                if (this.BigUserRefNumber != null)
                    hashCode = hashCode * 59 + this.BigUserRefNumber.GetHashCode();
                if (this.RefNumber != null)
                    hashCode = hashCode * 59 + this.RefNumber.GetHashCode();
                if (this.Id != default(Guid))
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.AddressLine01 != null)
                    hashCode = hashCode * 59 + this.AddressLine01.GetHashCode();
                if (this.AddressLine02 != null)
                    hashCode = hashCode * 59 + this.AddressLine02.GetHashCode();
                if (this.AddressLine03 != null)
                    hashCode = hashCode * 59 + this.AddressLine03.GetHashCode();
                if (this.ZipPostalCode != null)
                    hashCode = hashCode * 59 + this.ZipPostalCode.GetHashCode();
                if (this.CountryLiteSearch != null)
                    hashCode = hashCode * 59 + this.CountryLiteSearch.GetHashCode();
                if (this.LocalityLiteSearch != null)
                    hashCode = hashCode * 59 + this.LocalityLiteSearch.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}